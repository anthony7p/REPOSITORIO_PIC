

Microchip MPLAB XC8 Assembler V2.41 build 20230208172133 
                                                                                               Tue Jun 13 22:23:18 2023

Microchip MPLAB XC8 C Compiler v2.41 (Free license) build 20230208172133 Og1 
     1                           	processor	18F45K50
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1
    16                           	psect	text7,global,reloc=2,class=CODE,delta=1
    17                           	psect	text8,global,reloc=2,class=CODE,delta=1
    18                           	psect	text9,global,reloc=2,class=CODE,delta=1
    19                           	psect	text10,global,reloc=2,class=CODE,delta=1
    20                           	psect	text11,global,reloc=2,class=CODE,delta=1
    21                           	psect	text12,global,reloc=2,class=CODE,delta=1
    22                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=2
    23                           	psect	text14,global,reloc=2,class=CODE,delta=1
    24                           	psect	text15,global,reloc=2,class=CODE,delta=1
    25                           	psect	text16,global,reloc=2,class=CODE,delta=1
    26                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    27                           	psect	text18,global,reloc=2,class=CODE,delta=1
    28                           	psect	text19,global,reloc=2,class=CODE,delta=1
    29                           	psect	text20,global,reloc=2,class=CODE,delta=1
    30                           	psect	text21,global,reloc=2,class=CODE,delta=1
    31                           	psect	text22,global,reloc=2,class=CODE,delta=1
    32                           	psect	text23,global,reloc=2,class=CODE,delta=1
    33                           	psect	text24,global,reloc=2,class=CODE,delta=1
    34                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    35                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    36                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    37                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    38                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    39   000000                     
    40                           ; Generated 06/04/2022 GMT
    41                           ; 
    42                           ; Copyright Â© 2022, Microchip Technology Inc. and its subsidiaries ("Microchip")
    43                           ; All rights reserved.
    44                           ; 
    45                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    46                           ; 
    47                           ; Redistribution and use in source and binary forms, with or without modification, are
    48                           ; permitted provided that the following conditions are met:
    49                           ; 
    50                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    51                           ;        conditions and the following disclaimer.
    52                           ; 
    53                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    54                           ;        of conditions and the following disclaimer in the documentation and/or other
    55                           ;        materials provided with the distribution. Publication is not required when
    56                           ;        this file is used in an embedded application.
    57                           ; 
    58                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    59                           ;        software without specific prior written permission.
    60                           ; 
    61                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    62                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    63                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    64                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    65                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    66                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    67                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    68                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    69                           ; 
    70                           ; 
    71                           ; Code-generator required, PIC18F45K50 Definitions
    72                           ; 
    73                           ; SFR Addresses
    74   000000                     _T3CONbits	set	4017
    75   000000                     _LATD	set	3980
    76   000000                     _CCPTMRSbits	set	3929
    77   000000                     _ANSELD	set	3934
    78   000000                     _PORTD	set	3971
    79   000000                     _LATDbits	set	3980
    80   000000                     _CCPR2	set	3984
    81   000000                     _TRISCbits	set	3988
    82   000000                     _TRISD	set	3989
    83   000000                     _CCP2CON	set	3991
    84   000000                     _T3CON	set	4017
    85   000000                     _OSCCON	set	4051
    86   000000                     _INTCONbits	set	4082
    87   000000                     _TMR3	set	4018
    88   000000                     _PIE2bits	set	4000
    89   000000                     _PIR2bits	set	4001
    90                           
    91                           	psect	smallconst
    92   000800                     __psmallconst:
    93                           	callstack 0
    94   000800  00                 	db	0
    95   000801                     STR_3:
    96   000801  59                 	db	89	;'Y'
    97   000802  41                 	db	65	;'A'
    98   000803  20                 	db	32
    99   000804  48                 	db	72	;'H'
   100   000805  41                 	db	65	;'A'
   101   000806  59                 	db	89	;'Y'
   102   000807  20                 	db	32
   103   000808  4D                 	db	77	;'M'
   104   000809  41                 	db	65	;'A'
   105   00080A  54                 	db	84	;'T'
   106   00080B  43                 	db	67	;'C'
   107   00080C  48                 	db	72	;'H'
   108   00080D  00                 	db	0
   109   00080E                     STR_1:
   110   00080E  45                 	db	69	;'E'
   111   00080F  53                 	db	83	;'S'
   112   000810  50                 	db	80	;'P'
   113   000811  45                 	db	69	;'E'
   114   000812  52                 	db	82	;'R'
   115   000813  41                 	db	65	;'A'
   116   000814  2E                 	db	46
   117   000815  2E                 	db	46
   118   000816  2E                 	db	46
   119   000817  00                 	db	0
   120   000818                     STR_2:
   121   000818  43                 	db	67	;'C'
   122   000819  55                 	db	85	;'U'
   123   00081A  45                 	db	69	;'E'
   124   00081B  4E                 	db	78	;'N'
   125   00081C  54                 	db	84	;'T'
   126   00081D  41                 	db	65	;'A'
   127   00081E  3A                 	db	58	;':'
   128   00081F  20                 	db	32
   129   000820  00                 	db	0
   130   000821  00                 	db	0	; dummy byte at the end
   131   000000                     
   132                           ; #config settings
   133                           
   134                           	psect	cinit
   135   000E34                     __pcinit:
   136                           	callstack 0
   137   000E34                     start_initialization:
   138                           	callstack 0
   139   000E34                     __initialization:
   140                           	callstack 0
   141                           
   142                           ; Clear objects allocated to COMRAM (7 bytes)
   143   000E34  EE00  F01D         	lfsr	0,__pbssCOMRAM
   144   000E38  0E07               	movlw	7
   145   000E3A                     clear_0:
   146   000E3A  6AEE               	clrf	postinc0,c
   147   000E3C  06E8               	decf	wreg,f,c
   148   000E3E  E1FD               	bnz	clear_0
   149   000E40                     end_of_initialization:
   150                           	callstack 0
   151   000E40                     __end_of__initialization:
   152                           	callstack 0
   153   000E40  9024               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   154   000E42  9224               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   155   000E44  0E00               	movlw	low (__Lsmallconst shr (0+16))
   156   000E46  6EF8               	movwf	tblptru,c
   157   000E48  0E08               	movlw	high __Lsmallconst
   158   000E4A  6EF7               	movwf	tblptrh,c
   159   000E4C  0100               	movlb	0
   160   000E4E  EF18  F005         	goto	_main	;jump to C main() function
   161                           
   162                           	psect	bssCOMRAM
   163   00001D                     __pbssCOMRAM:
   164                           	callstack 0
   165   00001D                     _count:
   166                           	callstack 0
   167   00001D                     	ds	2
   168   00001F                     _unidad:
   169                           	callstack 0
   170   00001F                     	ds	1
   171   000020                     _decena:
   172                           	callstack 0
   173   000020                     	ds	1
   174   000021                     _centena:
   175                           	callstack 0
   176   000021                     	ds	1
   177   000022                     _millar:
   178                           	callstack 0
   179   000022                     	ds	1
   180   000023                     _dec_mil:
   181                           	callstack 0
   182   000023                     	ds	1
   183                           
   184                           	psect	cstackCOMRAM
   185   000001                     __pcstackCOMRAM:
   186                           	callstack 0
   187   000001                     ?i2_strlen:
   188                           	callstack 0
   189   000001                     i2ENVIA_NIBBLE@dato:
   190                           	callstack 0
   191   000001                     i2LEER_LCD@aux:
   192                           	callstack 0
   193   000001                     i2strlen@s:
   194                           	callstack 0
   195                           
   196                           ; 2 bytes @ 0x0
   197   000001                     	ds	1
   198   000002                     i2ENVIA_CHAR@dato:
   199                           	callstack 0
   200   000002                     i2ENVIA_LCD_CMD@dato:
   201                           	callstack 0
   202                           
   203                           ; 1 bytes @ 0x1
   204   000002                     	ds	1
   205   000003                     i2ENVIA_CHAR@aux:
   206                           	callstack 0
   207   000003                     i2ENVIA_LCD_CMD@aux:
   208                           	callstack 0
   209   000003                     i2strlen@a:
   210                           	callstack 0
   211                           
   212                           ; 2 bytes @ 0x2
   213   000003                     	ds	1
   214   000004                     i2POS_CURSOR@columna:
   215                           	callstack 0
   216                           
   217                           ; 1 bytes @ 0x3
   218   000004                     	ds	1
   219   000005                     i2POS_CURSOR@fila:
   220                           	callstack 0
   221   000005                     i2ESCRIBE_MENSAJE2@cadena:
   222                           	callstack 0
   223                           
   224                           ; 2 bytes @ 0x4
   225   000005                     	ds	2
   226   000007                     ??i2_ESCRIBE_MENSAJE2:
   227                           
   228                           ; 1 bytes @ 0x6
   229   000007                     	ds	2
   230   000009                     i2ESCRIBE_MENSAJE2@tam:
   231                           	callstack 0
   232                           
   233                           ; 1 bytes @ 0x8
   234   000009                     	ds	1
   235   00000A                     i2ESCRIBE_MENSAJE2@i:
   236                           	callstack 0
   237                           
   238                           ; 1 bytes @ 0x9
   239   00000A                     	ds	1
   240   00000B                     ??_INT_CCP2:
   241                           
   242                           ; 1 bytes @ 0xA
   243   00000B                     	ds	4
   244   00000F                     ?_strlen:
   245                           	callstack 0
   246   00000F                     ?___lwmod:
   247                           	callstack 0
   248   00000F                     ENVIA_NIBBLE@dato:
   249                           	callstack 0
   250   00000F                     LEER_LCD@aux:
   251                           	callstack 0
   252   00000F                     ___lwmod@dividend:
   253                           	callstack 0
   254   00000F                     strlen@s:
   255                           	callstack 0
   256                           
   257                           ; 2 bytes @ 0xE
   258   00000F                     	ds	1
   259   000010                     ENVIA_CHAR@dato:
   260                           	callstack 0
   261   000010                     ENVIA_LCD_CMD@dato:
   262                           	callstack 0
   263                           
   264                           ; 1 bytes @ 0xF
   265   000010                     	ds	1
   266   000011                     ENVIA_CHAR@aux:
   267                           	callstack 0
   268   000011                     ENVIA_LCD_CMD@aux:
   269                           	callstack 0
   270   000011                     ___lwmod@divisor:
   271                           	callstack 0
   272   000011                     strlen@a:
   273                           	callstack 0
   274                           
   275                           ; 2 bytes @ 0x10
   276   000011                     	ds	1
   277   000012                     ??_LCD_CONFIG:
   278   000012                     POS_CURSOR@columna:
   279                           	callstack 0
   280   000012                     CURSOR_ONOFF@estado:
   281                           	callstack 0
   282                           
   283                           ; 1 bytes @ 0x11
   284   000012                     	ds	1
   285   000013                     ??_LCD_INIT:
   286   000013                     POS_CURSOR@fila:
   287                           	callstack 0
   288   000013                     ___lwmod@counter:
   289                           	callstack 0
   290   000013                     ESCRIBE_MENSAJE2@cadena:
   291                           	callstack 0
   292                           
   293                           ; 2 bytes @ 0x12
   294   000013                     	ds	1
   295   000014                     ?___lwdiv:
   296                           	callstack 0
   297   000014                     ___lwdiv@dividend:
   298                           	callstack 0
   299                           
   300                           ; 2 bytes @ 0x13
   301   000014                     	ds	1
   302   000015                     ??_ESCRIBE_MENSAJE2:
   303                           
   304                           ; 1 bytes @ 0x14
   305   000015                     	ds	1
   306   000016                     ___lwdiv@divisor:
   307                           	callstack 0
   308                           
   309                           ; 2 bytes @ 0x15
   310   000016                     	ds	1
   311   000017                     ESCRIBE_MENSAJE2@tam:
   312                           	callstack 0
   313                           
   314                           ; 1 bytes @ 0x16
   315   000017                     	ds	1
   316   000018                     ESCRIBE_MENSAJE2@i:
   317                           	callstack 0
   318   000018                     ___lwdiv@quotient:
   319                           	callstack 0
   320                           
   321                           ; 2 bytes @ 0x17
   322   000018                     	ds	2
   323   00001A                     ___lwdiv@counter:
   324                           	callstack 0
   325                           
   326                           ; 1 bytes @ 0x19
   327   00001A                     	ds	1
   328   00001B                     convierte@numero:
   329                           	callstack 0
   330                           
   331                           ; 2 bytes @ 0x1A
   332   00001B                     	ds	2
   333   00001D                     
   334                           ; 1 bytes @ 0x1C
   335 ;;
   336 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   337 ;;
   338 ;; *************** function _main *****************
   339 ;; Defined at:
   340 ;;		line 54 in file "CPP_compare.c"
   341 ;; Parameters:    Size  Location     Type
   342 ;;		None
   343 ;; Auto vars:     Size  Location     Type
   344 ;;		None
   345 ;; Return value:  Size  Location     Type
   346 ;;                  1    wreg      void 
   347 ;; Registers used:
   348 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   349 ;; Tracked objects:
   350 ;;		On entry : 0/0
   351 ;;		On exit  : 0/0
   352 ;;		Unchanged: 0/0
   353 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   354 ;;      Params:         0       0       0       0       0       0       0       0       0
   355 ;;      Locals:         0       0       0       0       0       0       0       0       0
   356 ;;      Temps:          0       0       0       0       0       0       0       0       0
   357 ;;      Totals:         0       0       0       0       0       0       0       0       0
   358 ;;Total ram usage:        0 bytes
   359 ;; Hardware stack levels required when called: 9
   360 ;; This function calls:
   361 ;;		_ENVIA_CHAR
   362 ;;		_ESCRIBE_MENSAJE2
   363 ;;		_POS_CURSOR
   364 ;;		_configuro
   365 ;;		_convierte
   366 ;; This function is called by:
   367 ;;		Startup code after reset
   368 ;; This function uses a non-reentrant model
   369 ;;
   370                           
   371                           	psect	text0
   372   000A30                     __ptext0:
   373                           	callstack 0
   374   000A30                     _main:
   375                           	callstack 22
   376   000A30                     
   377                           ;CPP_compare.c: 55:     configuro();
   378   000A30  EC67  F006         	call	_configuro	;wreg free
   379                           
   380                           ;CPP_compare.c: 56:     POS_CURSOR(1,0);
   381   000A34  0E00               	movlw	0
   382   000A36  6E12               	movwf	POS_CURSOR@columna^0,c
   383   000A38  0E01               	movlw	1
   384   000A3A  ECF3  F005         	call	_POS_CURSOR
   385   000A3E                     
   386                           ;CPP_compare.c: 57:     ESCRIBE_MENSAJE2("ESPERA...");
   387   000A3E  0E0E               	movlw	low STR_1
   388   000A40  6E13               	movwf	ESCRIBE_MENSAJE2@cadena^0,c
   389   000A42  0E08               	movlw	high STR_1
   390   000A44  6E14               	movwf	(ESCRIBE_MENSAJE2@cadena+1)^0,c
   391   000A46  ECA9  F005         	call	_ESCRIBE_MENSAJE2	;wreg free
   392   000A4A                     l1438:
   393                           
   394                           ;CPP_compare.c: 59:         POS_CURSOR(2,0);
   395   000A4A  0E00               	movlw	0
   396   000A4C  6E12               	movwf	POS_CURSOR@columna^0,c
   397   000A4E  0E02               	movlw	2
   398   000A50  ECF3  F005         	call	_POS_CURSOR
   399   000A54                     
   400                           ;CPP_compare.c: 60:         convierte(TMR3);
   401   000A54  CFB2 F01B          	movff	4018,convierte@numero	;volatile
   402   000A58  CFB3 F01C          	movff	4019,convierte@numero+1	;volatile
   403   000A5C  EC11  F004         	call	_convierte	;wreg free
   404   000A60                     
   405                           ;CPP_compare.c: 61:         ESCRIBE_MENSAJE2("CUENTA: ");
   406   000A60  0E18               	movlw	low STR_2
   407   000A62  6E13               	movwf	ESCRIBE_MENSAJE2@cadena^0,c
   408   000A64  0E08               	movlw	high STR_2
   409   000A66  6E14               	movwf	(ESCRIBE_MENSAJE2@cadena+1)^0,c
   410   000A68  ECA9  F005         	call	_ESCRIBE_MENSAJE2	;wreg free
   411                           
   412                           ;CPP_compare.c: 62:         ENVIA_CHAR(dec_mil + 0x30);
   413   000A6C  5023               	movf	_dec_mil^0,w,c
   414   000A6E  0F30               	addlw	48
   415   000A70  EC9C  F006         	call	_ENVIA_CHAR
   416                           
   417                           ;CPP_compare.c: 63:         ENVIA_CHAR(millar + 0x30);
   418   000A74  5022               	movf	_millar^0,w,c
   419   000A76  0F30               	addlw	48
   420   000A78  EC9C  F006         	call	_ENVIA_CHAR
   421                           
   422                           ;CPP_compare.c: 64:         ENVIA_CHAR(centena + 0x30);
   423   000A7C  5021               	movf	_centena^0,w,c
   424   000A7E  0F30               	addlw	48
   425   000A80  EC9C  F006         	call	_ENVIA_CHAR
   426                           
   427                           ;CPP_compare.c: 65:         ENVIA_CHAR(decena + 0x30);
   428   000A84  5020               	movf	_decena^0,w,c
   429   000A86  0F30               	addlw	48
   430   000A88  EC9C  F006         	call	_ENVIA_CHAR
   431                           
   432                           ;CPP_compare.c: 66:         ENVIA_CHAR(unidad + 0x30);
   433   000A8C  501F               	movf	_unidad^0,w,c
   434   000A8E  0F30               	addlw	48
   435   000A90  EC9C  F006         	call	_ENVIA_CHAR
   436   000A94  EF25  F005         	goto	l1438
   437   000A98  EF23  F000         	goto	start
   438   000A9C                     __end_of_main:
   439                           	callstack 0
   440                           
   441 ;; *************** function _convierte *****************
   442 ;; Defined at:
   443 ;;		line 46 in file "CPP_compare.c"
   444 ;; Parameters:    Size  Location     Type
   445 ;;  numero          2   26[COMRAM] unsigned int 
   446 ;; Auto vars:     Size  Location     Type
   447 ;;		None
   448 ;; Return value:  Size  Location     Type
   449 ;;                  1    wreg      void 
   450 ;; Registers used:
   451 ;;		wreg, status,2, status,0, cstack
   452 ;; Tracked objects:
   453 ;;		On entry : 0/0
   454 ;;		On exit  : 0/0
   455 ;;		Unchanged: 0/0
   456 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   457 ;;      Params:         2       0       0       0       0       0       0       0       0
   458 ;;      Locals:         0       0       0       0       0       0       0       0       0
   459 ;;      Temps:          0       0       0       0       0       0       0       0       0
   460 ;;      Totals:         2       0       0       0       0       0       0       0       0
   461 ;;Total ram usage:        2 bytes
   462 ;; Hardware stack levels used: 1
   463 ;; Hardware stack levels required when called: 5
   464 ;; This function calls:
   465 ;;		___lwdiv
   466 ;;		___lwmod
   467 ;; This function is called by:
   468 ;;		_main
   469 ;; This function uses a non-reentrant model
   470 ;;
   471                           
   472                           	psect	text1
   473   000822                     __ptext1:
   474                           	callstack 0
   475   000822                     _convierte:
   476                           	callstack 25
   477   000822                     
   478                           ;CPP_compare.c: 47:     dec_mil = numero / 10000;
   479   000822  C01B  F014         	movff	convierte@numero,___lwdiv@dividend
   480   000826  C01C  F015         	movff	convierte@numero+1,___lwdiv@dividend+1
   481   00082A  0E27               	movlw	39
   482   00082C  6E17               	movwf	(___lwdiv@divisor+1)^0,c
   483   00082E  0E10               	movlw	16
   484   000830  6E16               	movwf	___lwdiv@divisor^0,c
   485   000832  EC6C  F004         	call	___lwdiv	;wreg free
   486   000836  5014               	movf	?___lwdiv^0,w,c
   487   000838  6E23               	movwf	_dec_mil^0,c
   488                           
   489                           ;CPP_compare.c: 48:     millar = (numero % 10000)/1000;
   490   00083A  0E27               	movlw	39
   491   00083C  6E12               	movwf	(___lwmod@divisor+1)^0,c
   492   00083E  0E10               	movlw	16
   493   000840  6E11               	movwf	___lwmod@divisor^0,c
   494   000842  C01B  F00F         	movff	convierte@numero,___lwmod@dividend
   495   000846  C01C  F010         	movff	convierte@numero+1,___lwmod@dividend+1
   496   00084A  EC4E  F005         	call	___lwmod	;wreg free
   497   00084E  C00F  F014         	movff	?___lwmod,___lwdiv@dividend
   498   000852  C010  F015         	movff	?___lwmod+1,___lwdiv@dividend+1
   499   000856  0E03               	movlw	3
   500   000858  6E17               	movwf	(___lwdiv@divisor+1)^0,c
   501   00085A  0EE8               	movlw	232
   502   00085C  6E16               	movwf	___lwdiv@divisor^0,c
   503   00085E  EC6C  F004         	call	___lwdiv	;wreg free
   504   000862  5014               	movf	?___lwdiv^0,w,c
   505   000864  6E22               	movwf	_millar^0,c
   506                           
   507                           ;CPP_compare.c: 49:     centena = (numero % 1000)/100;
   508   000866  0E03               	movlw	3
   509   000868  6E12               	movwf	(___lwmod@divisor+1)^0,c
   510   00086A  0EE8               	movlw	232
   511   00086C  6E11               	movwf	___lwmod@divisor^0,c
   512   00086E  C01B  F00F         	movff	convierte@numero,___lwmod@dividend
   513   000872  C01C  F010         	movff	convierte@numero+1,___lwmod@dividend+1
   514   000876  EC4E  F005         	call	___lwmod	;wreg free
   515   00087A  C00F  F014         	movff	?___lwmod,___lwdiv@dividend
   516   00087E  C010  F015         	movff	?___lwmod+1,___lwdiv@dividend+1
   517   000882  0E00               	movlw	0
   518   000884  6E17               	movwf	(___lwdiv@divisor+1)^0,c
   519   000886  0E64               	movlw	100
   520   000888  6E16               	movwf	___lwdiv@divisor^0,c
   521   00088A  EC6C  F004         	call	___lwdiv	;wreg free
   522   00088E  5014               	movf	?___lwdiv^0,w,c
   523   000890  6E21               	movwf	_centena^0,c
   524                           
   525                           ;CPP_compare.c: 50:     decena = (numero % 100)/10;
   526   000892  0E00               	movlw	0
   527   000894  6E12               	movwf	(___lwmod@divisor+1)^0,c
   528   000896  0E64               	movlw	100
   529   000898  6E11               	movwf	___lwmod@divisor^0,c
   530   00089A  C01B  F00F         	movff	convierte@numero,___lwmod@dividend
   531   00089E  C01C  F010         	movff	convierte@numero+1,___lwmod@dividend+1
   532   0008A2  EC4E  F005         	call	___lwmod	;wreg free
   533   0008A6  C00F  F014         	movff	?___lwmod,___lwdiv@dividend
   534   0008AA  C010  F015         	movff	?___lwmod+1,___lwdiv@dividend+1
   535   0008AE  0E00               	movlw	0
   536   0008B0  6E17               	movwf	(___lwdiv@divisor+1)^0,c
   537   0008B2  0E0A               	movlw	10
   538   0008B4  6E16               	movwf	___lwdiv@divisor^0,c
   539   0008B6  EC6C  F004         	call	___lwdiv	;wreg free
   540   0008BA  5014               	movf	?___lwdiv^0,w,c
   541   0008BC  6E20               	movwf	_decena^0,c
   542                           
   543                           ;CPP_compare.c: 51:     unidad = numero % 10;
   544   0008BE  C01B  F00F         	movff	convierte@numero,___lwmod@dividend
   545   0008C2  C01C  F010         	movff	convierte@numero+1,___lwmod@dividend+1
   546   0008C6  0E00               	movlw	0
   547   0008C8  6E12               	movwf	(___lwmod@divisor+1)^0,c
   548   0008CA  0E0A               	movlw	10
   549   0008CC  6E11               	movwf	___lwmod@divisor^0,c
   550   0008CE  EC4E  F005         	call	___lwmod	;wreg free
   551   0008D2  500F               	movf	?___lwmod^0,w,c
   552   0008D4  6E1F               	movwf	_unidad^0,c
   553   0008D6  0012               	return		;funcret
   554   0008D8                     __end_of_convierte:
   555                           	callstack 0
   556                           
   557 ;; *************** function ___lwmod *****************
   558 ;; Defined at:
   559 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\lwmod.c"
   560 ;; Parameters:    Size  Location     Type
   561 ;;  dividend        2   14[COMRAM] unsigned int 
   562 ;;  divisor         2   16[COMRAM] unsigned int 
   563 ;; Auto vars:     Size  Location     Type
   564 ;;  counter         1   18[COMRAM] unsigned char 
   565 ;; Return value:  Size  Location     Type
   566 ;;                  2   14[COMRAM] unsigned int 
   567 ;; Registers used:
   568 ;;		wreg, status,2, status,0
   569 ;; Tracked objects:
   570 ;;		On entry : 0/0
   571 ;;		On exit  : 0/0
   572 ;;		Unchanged: 0/0
   573 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   574 ;;      Params:         4       0       0       0       0       0       0       0       0
   575 ;;      Locals:         1       0       0       0       0       0       0       0       0
   576 ;;      Temps:          0       0       0       0       0       0       0       0       0
   577 ;;      Totals:         5       0       0       0       0       0       0       0       0
   578 ;;Total ram usage:        5 bytes
   579 ;; Hardware stack levels used: 1
   580 ;; Hardware stack levels required when called: 4
   581 ;; This function calls:
   582 ;;		Nothing
   583 ;; This function is called by:
   584 ;;		_convierte
   585 ;; This function uses a non-reentrant model
   586 ;;
   587                           
   588                           	psect	text2
   589   000A9C                     __ptext2:
   590                           	callstack 0
   591   000A9C                     ___lwmod:
   592                           	callstack 25
   593   000A9C  5011               	movf	___lwmod@divisor^0,w,c
   594   000A9E  1012               	iorwf	(___lwmod@divisor+1)^0,w,c
   595   000AA0  B4D8               	btfsc	status,2,c
   596   000AA2  EF55  F005         	goto	u301
   597   000AA6  EF57  F005         	goto	u300
   598   000AAA                     u301:
   599   000AAA  EF7B  F005         	goto	l666
   600   000AAE                     u300:
   601   000AAE  0E01               	movlw	1
   602   000AB0  6E13               	movwf	___lwmod@counter^0,c
   603   000AB2  EF5F  F005         	goto	l1328
   604   000AB6                     l1326:
   605   000AB6  90D8               	bcf	status,0,c
   606   000AB8  3611               	rlcf	___lwmod@divisor^0,f,c
   607   000ABA  3612               	rlcf	(___lwmod@divisor+1)^0,f,c
   608   000ABC  2A13               	incf	___lwmod@counter^0,f,c
   609   000ABE                     l1328:
   610   000ABE  AE12               	btfss	(___lwmod@divisor+1)^0,7,c
   611   000AC0  EF64  F005         	goto	u311
   612   000AC4  EF66  F005         	goto	u310
   613   000AC8                     u311:
   614   000AC8  EF5B  F005         	goto	l1326
   615   000ACC                     u310:
   616   000ACC                     l1330:
   617   000ACC  5011               	movf	___lwmod@divisor^0,w,c
   618   000ACE  5C0F               	subwf	___lwmod@dividend^0,w,c
   619   000AD0  5012               	movf	(___lwmod@divisor+1)^0,w,c
   620   000AD2  5810               	subwfb	(___lwmod@dividend+1)^0,w,c
   621   000AD4  A0D8               	btfss	status,0,c
   622   000AD6  EF6F  F005         	goto	u321
   623   000ADA  EF71  F005         	goto	u320
   624   000ADE                     u321:
   625   000ADE  EF75  F005         	goto	l1334
   626   000AE2                     u320:
   627   000AE2  5011               	movf	___lwmod@divisor^0,w,c
   628   000AE4  5E0F               	subwf	___lwmod@dividend^0,f,c
   629   000AE6  5012               	movf	(___lwmod@divisor+1)^0,w,c
   630   000AE8  5A10               	subwfb	(___lwmod@dividend+1)^0,f,c
   631   000AEA                     l1334:
   632   000AEA  90D8               	bcf	status,0,c
   633   000AEC  3212               	rrcf	(___lwmod@divisor+1)^0,f,c
   634   000AEE  3211               	rrcf	___lwmod@divisor^0,f,c
   635   000AF0  2E13               	decfsz	___lwmod@counter^0,f,c
   636   000AF2  EF66  F005         	goto	l1330
   637   000AF6                     l666:
   638   000AF6  C00F  F00F         	movff	___lwmod@dividend,?___lwmod
   639   000AFA  C010  F010         	movff	___lwmod@dividend+1,?___lwmod+1
   640   000AFE  0012               	return		;funcret
   641   000B00                     __end_of___lwmod:
   642                           	callstack 0
   643                           
   644 ;; *************** function ___lwdiv *****************
   645 ;; Defined at:
   646 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\lwdiv.c"
   647 ;; Parameters:    Size  Location     Type
   648 ;;  dividend        2   19[COMRAM] unsigned int 
   649 ;;  divisor         2   21[COMRAM] unsigned int 
   650 ;; Auto vars:     Size  Location     Type
   651 ;;  quotient        2   23[COMRAM] unsigned int 
   652 ;;  counter         1   25[COMRAM] unsigned char 
   653 ;; Return value:  Size  Location     Type
   654 ;;                  2   19[COMRAM] unsigned int 
   655 ;; Registers used:
   656 ;;		wreg, status,2, status,0
   657 ;; Tracked objects:
   658 ;;		On entry : 0/0
   659 ;;		On exit  : 0/0
   660 ;;		Unchanged: 0/0
   661 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   662 ;;      Params:         4       0       0       0       0       0       0       0       0
   663 ;;      Locals:         3       0       0       0       0       0       0       0       0
   664 ;;      Temps:          0       0       0       0       0       0       0       0       0
   665 ;;      Totals:         7       0       0       0       0       0       0       0       0
   666 ;;Total ram usage:        7 bytes
   667 ;; Hardware stack levels used: 1
   668 ;; Hardware stack levels required when called: 4
   669 ;; This function calls:
   670 ;;		Nothing
   671 ;; This function is called by:
   672 ;;		_convierte
   673 ;; This function uses a non-reentrant model
   674 ;;
   675                           
   676                           	psect	text3
   677   0008D8                     __ptext3:
   678                           	callstack 0
   679   0008D8                     ___lwdiv:
   680                           	callstack 25
   681   0008D8  0E00               	movlw	0
   682   0008DA  6E19               	movwf	(___lwdiv@quotient+1)^0,c
   683   0008DC  0E00               	movlw	0
   684   0008DE  6E18               	movwf	___lwdiv@quotient^0,c
   685   0008E0  5016               	movf	___lwdiv@divisor^0,w,c
   686   0008E2  1017               	iorwf	(___lwdiv@divisor+1)^0,w,c
   687   0008E4  B4D8               	btfsc	status,2,c
   688   0008E6  EF77  F004         	goto	u271
   689   0008EA  EF79  F004         	goto	u270
   690   0008EE                     u271:
   691   0008EE  EFA1  F004         	goto	l656
   692   0008F2                     u270:
   693   0008F2  0E01               	movlw	1
   694   0008F4  6E1A               	movwf	___lwdiv@counter^0,c
   695   0008F6  EF81  F004         	goto	l1308
   696   0008FA                     l1306:
   697   0008FA  90D8               	bcf	status,0,c
   698   0008FC  3616               	rlcf	___lwdiv@divisor^0,f,c
   699   0008FE  3617               	rlcf	(___lwdiv@divisor+1)^0,f,c
   700   000900  2A1A               	incf	___lwdiv@counter^0,f,c
   701   000902                     l1308:
   702   000902  AE17               	btfss	(___lwdiv@divisor+1)^0,7,c
   703   000904  EF86  F004         	goto	u281
   704   000908  EF88  F004         	goto	u280
   705   00090C                     u281:
   706   00090C  EF7D  F004         	goto	l1306
   707   000910                     u280:
   708   000910                     l1310:
   709   000910  90D8               	bcf	status,0,c
   710   000912  3618               	rlcf	___lwdiv@quotient^0,f,c
   711   000914  3619               	rlcf	(___lwdiv@quotient+1)^0,f,c
   712   000916  5016               	movf	___lwdiv@divisor^0,w,c
   713   000918  5C14               	subwf	___lwdiv@dividend^0,w,c
   714   00091A  5017               	movf	(___lwdiv@divisor+1)^0,w,c
   715   00091C  5815               	subwfb	(___lwdiv@dividend+1)^0,w,c
   716   00091E  A0D8               	btfss	status,0,c
   717   000920  EF94  F004         	goto	u291
   718   000924  EF96  F004         	goto	u290
   719   000928                     u291:
   720   000928  EF9B  F004         	goto	l1318
   721   00092C                     u290:
   722   00092C  5016               	movf	___lwdiv@divisor^0,w,c
   723   00092E  5E14               	subwf	___lwdiv@dividend^0,f,c
   724   000930  5017               	movf	(___lwdiv@divisor+1)^0,w,c
   725   000932  5A15               	subwfb	(___lwdiv@dividend+1)^0,f,c
   726   000934  8018               	bsf	___lwdiv@quotient^0,0,c
   727   000936                     l1318:
   728   000936  90D8               	bcf	status,0,c
   729   000938  3217               	rrcf	(___lwdiv@divisor+1)^0,f,c
   730   00093A  3216               	rrcf	___lwdiv@divisor^0,f,c
   731   00093C  2E1A               	decfsz	___lwdiv@counter^0,f,c
   732   00093E  EF88  F004         	goto	l1310
   733   000942                     l656:
   734   000942  C018  F014         	movff	___lwdiv@quotient,?___lwdiv
   735   000946  C019  F015         	movff	___lwdiv@quotient+1,?___lwdiv+1
   736   00094A  0012               	return		;funcret
   737   00094C                     __end_of___lwdiv:
   738                           	callstack 0
   739                           
   740 ;; *************** function _configuro *****************
   741 ;; Defined at:
   742 ;;		line 17 in file "CPP_compare.c"
   743 ;; Parameters:    Size  Location     Type
   744 ;;		None
   745 ;; Auto vars:     Size  Location     Type
   746 ;;		None
   747 ;; Return value:  Size  Location     Type
   748 ;;                  1    wreg      void 
   749 ;; Registers used:
   750 ;;		wreg, status,2, status,0, cstack
   751 ;; Tracked objects:
   752 ;;		On entry : 0/0
   753 ;;		On exit  : 0/0
   754 ;;		Unchanged: 0/0
   755 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   756 ;;      Params:         0       0       0       0       0       0       0       0       0
   757 ;;      Locals:         0       0       0       0       0       0       0       0       0
   758 ;;      Temps:          0       0       0       0       0       0       0       0       0
   759 ;;      Totals:         0       0       0       0       0       0       0       0       0
   760 ;;Total ram usage:        0 bytes
   761 ;; Hardware stack levels used: 1
   762 ;; Hardware stack levels required when called: 8
   763 ;; This function calls:
   764 ;;		_LCD_INIT
   765 ;; This function is called by:
   766 ;;		_main
   767 ;; This function uses a non-reentrant model
   768 ;;
   769                           
   770                           	psect	text4
   771   000CCE                     __ptext4:
   772                           	callstack 0
   773   000CCE                     _configuro:
   774                           	callstack 22
   775   000CCE                     
   776                           ;CPP_compare.c: 18:     OSCCON = 0X52;
   777   000CCE  0E52               	movlw	82
   778   000CD0  6ED3               	movwf	211,c	;volatile
   779                           
   780                           ;CPP_compare.c: 19:     TRISD = 0;
   781   000CD2  0E00               	movlw	0
   782   000CD4  6E95               	movwf	149,c	;volatile
   783                           
   784                           ;CPP_compare.c: 20:     ANSELD = 0;
   785   000CD6  0E00               	movlw	0
   786   000CD8  010F               	movlb	15	; () banked
   787   000CDA  6F5E               	movwf	94,b	;volatile
   788   000CDC                     
   789                           ; BSR set to: 15
   790                           ;CPP_compare.c: 23:     TRISCbits.RC1 = 0;
   791   000CDC  9294               	bcf	148,1,c	;volatile
   792                           
   793                           ;CPP_compare.c: 26:     T3CON = 0X32;
   794   000CDE  0E32               	movlw	50
   795   000CE0  6EB1               	movwf	177,c	;volatile
   796                           
   797                           ;CPP_compare.c: 29:     CCP2CON = 0X02;
   798   000CE2  0E02               	movlw	2
   799   000CE4  6E97               	movwf	151,c	;volatile
   800   000CE6                     
   801                           ; BSR set to: 15
   802                           ;CPP_compare.c: 30:     CCPTMRSbits.C2TSEL = 1;
   803   000CE6  8759               	bsf	89,3,b	;volatile
   804                           
   805                           ;CPP_compare.c: 31:     CCPR2 = 0XFF;
   806   000CE8  0E00               	movlw	0
   807   000CEA  6E91               	movwf	145,c	;volatile
   808   000CEC  6890               	setf	144,c	;volatile
   809   000CEE                     
   810                           ; BSR set to: 15
   811                           ;CPP_compare.c: 34:     INTCONbits.GIE = 1;
   812   000CEE  8EF2               	bsf	242,7,c	;volatile
   813   000CF0                     
   814                           ; BSR set to: 15
   815                           ;CPP_compare.c: 35:     INTCONbits.PEIE = 1;
   816   000CF0  8CF2               	bsf	242,6,c	;volatile
   817   000CF2                     
   818                           ; BSR set to: 15
   819                           ;CPP_compare.c: 36:     PIE2bits.CCP2IE = 1;
   820   000CF2  80A0               	bsf	160,0,c	;volatile
   821                           
   822                           ;CPP_compare.c: 38:     TMR3 = 0;
   823   000CF4  0E00               	movlw	0
   824   000CF6  6EB3               	movwf	179,c	;volatile
   825   000CF8  0E00               	movlw	0
   826   000CFA  6EB2               	movwf	178,c	;volatile
   827   000CFC                     
   828                           ; BSR set to: 15
   829                           ;CPP_compare.c: 41:     T3CONbits.TMR3ON = 1;
   830   000CFC  80B1               	bsf	177,0,c	;volatile
   831   000CFE                     
   832                           ; BSR set to: 15
   833                           ;CPP_compare.c: 43:     LCD_INIT();
   834   000CFE  ECEA  F006         	call	_LCD_INIT	;wreg free
   835   000D02  0012               	return		;funcret
   836   000D04                     __end_of_configuro:
   837                           	callstack 0
   838                           
   839 ;; *************** function _LCD_INIT *****************
   840 ;; Defined at:
   841 ;;		line 185 in file "LCD.c"
   842 ;; Parameters:    Size  Location     Type
   843 ;;		None
   844 ;; Auto vars:     Size  Location     Type
   845 ;;		None
   846 ;; Return value:  Size  Location     Type
   847 ;;                  1    wreg      void 
   848 ;; Registers used:
   849 ;;		wreg, status,2, status,0, cstack
   850 ;; Tracked objects:
   851 ;;		On entry : 0/0
   852 ;;		On exit  : 0/0
   853 ;;		Unchanged: 0/0
   854 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   855 ;;      Params:         0       0       0       0       0       0       0       0       0
   856 ;;      Locals:         0       0       0       0       0       0       0       0       0
   857 ;;      Temps:          1       0       0       0       0       0       0       0       0
   858 ;;      Totals:         1       0       0       0       0       0       0       0       0
   859 ;;Total ram usage:        1 bytes
   860 ;; Hardware stack levels used: 1
   861 ;; Hardware stack levels required when called: 7
   862 ;; This function calls:
   863 ;;		_BORRAR_LCD
   864 ;;		_CURSOR_HOME
   865 ;;		_CURSOR_ONOFF
   866 ;;		_LCD_CONFIG
   867 ;; This function is called by:
   868 ;;		_configuro
   869 ;; This function uses a non-reentrant model
   870 ;;
   871                           
   872                           	psect	text5
   873   000DD4                     __ptext5:
   874                           	callstack 0
   875   000DD4                     _LCD_INIT:
   876                           	callstack 22
   877   000DD4                     
   878                           ;LCD.c: 186:     _delay((unsigned long)((15)*(4000000UL/4000.0)));
   879   000DD4  0E14               	movlw	20
   880   000DD6  6E13               	movwf	??_LCD_INIT^0,c
   881   000DD8  0E7A               	movlw	122
   882   000DDA                     u407:
   883   000DDA  2EE8               	decfsz	wreg,f,c
   884   000DDC  D7FE               	bra	u407
   885   000DDE  2E13               	decfsz	??_LCD_INIT^0,f,c
   886   000DE0  D7FC               	bra	u407
   887   000DE2                     
   888                           ;LCD.c: 187:     LCD_CONFIG();
   889   000DE2  EC80  F005         	call	_LCD_CONFIG	;wreg free
   890   000DE6                     
   891                           ;LCD.c: 188:     _delay((unsigned long)((15)*(4000000UL/4000.0)));
   892   000DE6  0E14               	movlw	20
   893   000DE8  6E13               	movwf	??_LCD_INIT^0,c
   894   000DEA  0E7A               	movlw	122
   895   000DEC                     u417:
   896   000DEC  2EE8               	decfsz	wreg,f,c
   897   000DEE  D7FE               	bra	u417
   898   000DF0  2E13               	decfsz	??_LCD_INIT^0,f,c
   899   000DF2  D7FC               	bra	u417
   900                           
   901                           ;LCD.c: 189:     BORRAR_LCD();
   902   000DF4  EC49  F007         	call	_BORRAR_LCD	;wreg free
   903                           
   904                           ;LCD.c: 190:     CURSOR_HOME();
   905   000DF8  EC45  F007         	call	_CURSOR_HOME	;wreg free
   906                           
   907                           ;LCD.c: 191:     CURSOR_ONOFF(1);
   908   000DFC  0E01               	movlw	1
   909   000DFE  EC02  F007         	call	_CURSOR_ONOFF
   910   000E02  0012               	return		;funcret
   911   000E04                     __end_of_LCD_INIT:
   912                           	callstack 0
   913                           
   914 ;; *************** function _LCD_CONFIG *****************
   915 ;; Defined at:
   916 ;;		line 102 in file "LCD.c"
   917 ;; Parameters:    Size  Location     Type
   918 ;;		None
   919 ;; Auto vars:     Size  Location     Type
   920 ;;		None
   921 ;; Return value:  Size  Location     Type
   922 ;;                  1    wreg      void 
   923 ;; Registers used:
   924 ;;		wreg, status,2, status,0, cstack
   925 ;; Tracked objects:
   926 ;;		On entry : 0/0
   927 ;;		On exit  : 0/0
   928 ;;		Unchanged: 0/0
   929 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   930 ;;      Params:         0       0       0       0       0       0       0       0       0
   931 ;;      Locals:         0       0       0       0       0       0       0       0       0
   932 ;;      Temps:          1       0       0       0       0       0       0       0       0
   933 ;;      Totals:         1       0       0       0       0       0       0       0       0
   934 ;;Total ram usage:        1 bytes
   935 ;; Hardware stack levels used: 1
   936 ;; Hardware stack levels required when called: 6
   937 ;; This function calls:
   938 ;;		_ENVIA_LCD_CMD
   939 ;;		_ENVIA_NIBBLE
   940 ;; This function is called by:
   941 ;;		_LCD_INIT
   942 ;; This function uses a non-reentrant model
   943 ;;
   944                           
   945                           	psect	text6
   946   000B00                     __ptext6:
   947                           	callstack 0
   948   000B00                     _LCD_CONFIG:
   949                           	callstack 22
   950   000B00                     
   951                           ;LCD.c: 104:  LATDbits.LATD0 = 0;
   952   000B00  908C               	bcf	140,0,c	;volatile
   953                           
   954                           ;LCD.c: 105:  LATDbits.LATD1 = 0;
   955   000B02  928C               	bcf	140,1,c	;volatile
   956   000B04                     
   957                           ;LCD.c: 106:  ENVIA_NIBBLE(0x30);
   958   000B04  0E30               	movlw	48
   959   000B06  EC29  F007         	call	_ENVIA_NIBBLE
   960   000B0A                     
   961                           ;LCD.c: 107:     _delay((unsigned long)((2)*(4000000UL/4000.0)));
   962   000B0A  0E03               	movlw	3
   963   000B0C  6E12               	movwf	??_LCD_CONFIG^0,c
   964   000B0E  0E98               	movlw	152
   965   000B10                     u427:
   966   000B10  2EE8               	decfsz	wreg,f,c
   967   000B12  D7FE               	bra	u427
   968   000B14  2E12               	decfsz	??_LCD_CONFIG^0,f,c
   969   000B16  D7FC               	bra	u427
   970   000B18                     
   971                           ;LCD.c: 108:  ENVIA_NIBBLE(0x30);
   972   000B18  0E30               	movlw	48
   973   000B1A  EC29  F007         	call	_ENVIA_NIBBLE
   974                           
   975                           ;LCD.c: 109:     _delay((unsigned long)((100)*(4000000UL/4000000.0)));
   976   000B1E  0E21               	movlw	33
   977   000B20                     u437:
   978   000B20  2EE8               	decfsz	wreg,f,c
   979   000B22  D7FE               	bra	u437
   980   000B24  F000               	nop	
   981   000B26                     
   982                           ;LCD.c: 110:     ENVIA_NIBBLE(0x30);
   983   000B26  0E30               	movlw	48
   984   000B28  EC29  F007         	call	_ENVIA_NIBBLE
   985   000B2C                     
   986                           ;LCD.c: 111:  ENVIA_NIBBLE(0x20);
   987   000B2C  0E20               	movlw	32
   988   000B2E  EC29  F007         	call	_ENVIA_NIBBLE
   989   000B32                     
   990                           ;LCD.c: 112:  ENVIA_LCD_CMD(0x01);
   991   000B32  0E01               	movlw	1
   992   000B34  EC82  F006         	call	_ENVIA_LCD_CMD
   993   000B38                     
   994                           ;LCD.c: 113:  ENVIA_LCD_CMD(0x28);
   995   000B38  0E28               	movlw	40
   996   000B3A  EC82  F006         	call	_ENVIA_LCD_CMD
   997   000B3E                     
   998                           ;LCD.c: 114:  ENVIA_LCD_CMD(0x0F);
   999   000B3E  0E0F               	movlw	15
  1000   000B40  EC82  F006         	call	_ENVIA_LCD_CMD
  1001   000B44                     
  1002                           ;LCD.c: 115:  ENVIA_LCD_CMD(0x06);
  1003   000B44  0E06               	movlw	6
  1004   000B46  EC82  F006         	call	_ENVIA_LCD_CMD
  1005   000B4A                     
  1006                           ;LCD.c: 116:  ENVIA_LCD_CMD(0x01);
  1007   000B4A  0E01               	movlw	1
  1008   000B4C  EC82  F006         	call	_ENVIA_LCD_CMD
  1009   000B50  0012               	return		;funcret
  1010   000B52                     __end_of_LCD_CONFIG:
  1011                           	callstack 0
  1012                           
  1013 ;; *************** function _CURSOR_ONOFF *****************
  1014 ;; Defined at:
  1015 ;;		line 55 in file "LCD.c"
  1016 ;; Parameters:    Size  Location     Type
  1017 ;;  estado          1    wreg     unsigned char 
  1018 ;; Auto vars:     Size  Location     Type
  1019 ;;  estado          1   17[COMRAM] unsigned char 
  1020 ;; Return value:  Size  Location     Type
  1021 ;;                  1    wreg      void 
  1022 ;; Registers used:
  1023 ;;		wreg, status,2, status,0, cstack
  1024 ;; Tracked objects:
  1025 ;;		On entry : 0/0
  1026 ;;		On exit  : 0/0
  1027 ;;		Unchanged: 0/0
  1028 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1029 ;;      Params:         0       0       0       0       0       0       0       0       0
  1030 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1031 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1032 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1033 ;;Total ram usage:        1 bytes
  1034 ;; Hardware stack levels used: 1
  1035 ;; Hardware stack levels required when called: 6
  1036 ;; This function calls:
  1037 ;;		_ENVIA_LCD_CMD
  1038 ;; This function is called by:
  1039 ;;		_LCD_INIT
  1040 ;; This function uses a non-reentrant model
  1041 ;;
  1042                           
  1043                           	psect	text7
  1044   000E04                     __ptext7:
  1045                           	callstack 0
  1046   000E04                     _CURSOR_ONOFF:
  1047                           	callstack 22
  1048                           
  1049                           ;incstack = 0
  1050                           ;CURSOR_ONOFF@estado stored from wreg
  1051   000E04  6E12               	movwf	CURSOR_ONOFF@estado^0,c
  1052   000E06                     
  1053                           ;LCD.c: 55: void CURSOR_ONOFF(unsigned char estado);LCD.c: 56: {;LCD.c: 57:  if(estado =
      +                          = 0) ENVIA_LCD_CMD(0x0E);
  1054   000E06  5012               	movf	CURSOR_ONOFF@estado^0,w,c
  1055   000E08  A4D8               	btfss	status,2,c
  1056   000E0A  EF09  F007         	goto	u21
  1057   000E0E  EF0B  F007         	goto	u20
  1058   000E12                     u21:
  1059   000E12  EF0E  F007         	goto	l918
  1060   000E16                     u20:
  1061   000E16  0E0E               	movlw	14
  1062   000E18  EC82  F006         	call	_ENVIA_LCD_CMD
  1063   000E1C                     l918:
  1064                           
  1065                           ;LCD.c: 58:  if(estado == 1) ENVIA_LCD_CMD(0x0C);
  1066   000E1C  0412               	decf	CURSOR_ONOFF@estado^0,w,c
  1067   000E1E  A4D8               	btfss	status,2,c
  1068   000E20  EF14  F007         	goto	u31
  1069   000E24  EF16  F007         	goto	u30
  1070   000E28                     u31:
  1071   000E28  EF19  F007         	goto	l56
  1072   000E2C                     u30:
  1073   000E2C  0E0C               	movlw	12
  1074   000E2E  EC82  F006         	call	_ENVIA_LCD_CMD
  1075   000E32                     l56:
  1076   000E32  0012               	return		;funcret
  1077   000E34                     __end_of_CURSOR_ONOFF:
  1078                           	callstack 0
  1079                           
  1080 ;; *************** function _CURSOR_HOME *****************
  1081 ;; Defined at:
  1082 ;;		line 30 in file "LCD.c"
  1083 ;; Parameters:    Size  Location     Type
  1084 ;;		None
  1085 ;; Auto vars:     Size  Location     Type
  1086 ;;		None
  1087 ;; Return value:  Size  Location     Type
  1088 ;;                  1    wreg      void 
  1089 ;; Registers used:
  1090 ;;		wreg, status,2, status,0, cstack
  1091 ;; Tracked objects:
  1092 ;;		On entry : 0/0
  1093 ;;		On exit  : 0/0
  1094 ;;		Unchanged: 0/0
  1095 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1096 ;;      Params:         0       0       0       0       0       0       0       0       0
  1097 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1098 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1099 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1100 ;;Total ram usage:        0 bytes
  1101 ;; Hardware stack levels used: 1
  1102 ;; Hardware stack levels required when called: 6
  1103 ;; This function calls:
  1104 ;;		_ENVIA_LCD_CMD
  1105 ;; This function is called by:
  1106 ;;		_LCD_INIT
  1107 ;; This function uses a non-reentrant model
  1108 ;;
  1109                           
  1110                           	psect	text8
  1111   000E8A                     __ptext8:
  1112                           	callstack 0
  1113   000E8A                     _CURSOR_HOME:
  1114                           	callstack 22
  1115   000E8A                     
  1116                           ;LCD.c: 32:  ENVIA_LCD_CMD(0x02);
  1117   000E8A  0E02               	movlw	2
  1118   000E8C  EC82  F006         	call	_ENVIA_LCD_CMD
  1119   000E90  0012               	return		;funcret
  1120   000E92                     __end_of_CURSOR_HOME:
  1121                           	callstack 0
  1122                           
  1123 ;; *************** function _BORRAR_LCD *****************
  1124 ;; Defined at:
  1125 ;;		line 97 in file "LCD.c"
  1126 ;; Parameters:    Size  Location     Type
  1127 ;;		None
  1128 ;; Auto vars:     Size  Location     Type
  1129 ;;		None
  1130 ;; Return value:  Size  Location     Type
  1131 ;;                  1    wreg      void 
  1132 ;; Registers used:
  1133 ;;		wreg, status,2, status,0, cstack
  1134 ;; Tracked objects:
  1135 ;;		On entry : 0/0
  1136 ;;		On exit  : 0/0
  1137 ;;		Unchanged: 0/0
  1138 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1139 ;;      Params:         0       0       0       0       0       0       0       0       0
  1140 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1141 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1142 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1143 ;;Total ram usage:        0 bytes
  1144 ;; Hardware stack levels used: 1
  1145 ;; Hardware stack levels required when called: 6
  1146 ;; This function calls:
  1147 ;;		_ENVIA_LCD_CMD
  1148 ;; This function is called by:
  1149 ;;		_LCD_INIT
  1150 ;; This function uses a non-reentrant model
  1151 ;;
  1152                           
  1153                           	psect	text9
  1154   000E92                     __ptext9:
  1155                           	callstack 0
  1156   000E92                     _BORRAR_LCD:
  1157                           	callstack 22
  1158   000E92                     
  1159                           ;LCD.c: 99:  ENVIA_LCD_CMD(0x01);
  1160   000E92  0E01               	movlw	1
  1161   000E94  EC82  F006         	call	_ENVIA_LCD_CMD
  1162   000E98  0012               	return		;funcret
  1163   000E9A                     __end_of_BORRAR_LCD:
  1164                           	callstack 0
  1165                           
  1166 ;; *************** function _POS_CURSOR *****************
  1167 ;; Defined at:
  1168 ;;		line 6 in file "LCD.c"
  1169 ;; Parameters:    Size  Location     Type
  1170 ;;  fila            1    wreg     unsigned char 
  1171 ;;  columna         1   17[COMRAM] unsigned char 
  1172 ;; Auto vars:     Size  Location     Type
  1173 ;;  fila            1   18[COMRAM] unsigned char 
  1174 ;; Return value:  Size  Location     Type
  1175 ;;                  1    wreg      void 
  1176 ;; Registers used:
  1177 ;;		wreg, status,2, status,0, cstack
  1178 ;; Tracked objects:
  1179 ;;		On entry : 0/0
  1180 ;;		On exit  : 0/0
  1181 ;;		Unchanged: 0/0
  1182 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1183 ;;      Params:         1       0       0       0       0       0       0       0       0
  1184 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1185 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1186 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1187 ;;Total ram usage:        2 bytes
  1188 ;; Hardware stack levels used: 1
  1189 ;; Hardware stack levels required when called: 6
  1190 ;; This function calls:
  1191 ;;		_ENVIA_LCD_CMD
  1192 ;; This function is called by:
  1193 ;;		_main
  1194 ;; This function uses a non-reentrant model
  1195 ;;
  1196                           
  1197                           	psect	text10
  1198   000BE6                     __ptext10:
  1199                           	callstack 0
  1200   000BE6                     _POS_CURSOR:
  1201                           	callstack 24
  1202                           
  1203                           ;incstack = 0
  1204                           ;POS_CURSOR@fila stored from wreg
  1205   000BE6  6E13               	movwf	POS_CURSOR@fila^0,c
  1206   000BE8                     
  1207                           ;LCD.c: 6: void POS_CURSOR(unsigned char fila,unsigned char columna);LCD.c: 7: {;LCD.c: 
      +                          8:  if(fila == 1)
  1208   000BE8  0413               	decf	POS_CURSOR@fila^0,w,c
  1209   000BEA  A4D8               	btfss	status,2,c
  1210   000BEC  EFFA  F005         	goto	u341
  1211   000BF0  EFFC  F005         	goto	u340
  1212   000BF4                     u341:
  1213   000BF4  EF02  F006         	goto	l1396
  1214   000BF8                     u340:
  1215   000BF8                     
  1216                           ;LCD.c: 9:  {;LCD.c: 10:   ENVIA_LCD_CMD(0x80+columna);
  1217   000BF8  5012               	movf	POS_CURSOR@columna^0,w,c
  1218   000BFA  0F80               	addlw	128
  1219   000BFC  EC82  F006         	call	_ENVIA_LCD_CMD
  1220                           
  1221                           ;LCD.c: 11:  }
  1222   000C00  EF0F  F006         	goto	l26
  1223   000C04                     l1396:
  1224   000C04  0E02               	movlw	2
  1225   000C06  1813               	xorwf	POS_CURSOR@fila^0,w,c
  1226   000C08  A4D8               	btfss	status,2,c
  1227   000C0A  EF09  F006         	goto	u351
  1228   000C0E  EF0B  F006         	goto	u350
  1229   000C12                     u351:
  1230   000C12  EF0F  F006         	goto	l26
  1231   000C16                     u350:
  1232   000C16                     
  1233                           ;LCD.c: 13:  {;LCD.c: 14:   ENVIA_LCD_CMD(0xC0+columna);
  1234   000C16  5012               	movf	POS_CURSOR@columna^0,w,c
  1235   000C18  0FC0               	addlw	192
  1236   000C1A  EC82  F006         	call	_ENVIA_LCD_CMD
  1237   000C1E                     l26:
  1238   000C1E  0012               	return		;funcret
  1239   000C20                     __end_of_POS_CURSOR:
  1240                           	callstack 0
  1241                           
  1242 ;; *************** function _ENVIA_LCD_CMD *****************
  1243 ;; Defined at:
  1244 ;;		line 129 in file "LCD.c"
  1245 ;; Parameters:    Size  Location     Type
  1246 ;;  dato            1    wreg     unsigned char 
  1247 ;; Auto vars:     Size  Location     Type
  1248 ;;  dato            1   15[COMRAM] unsigned char 
  1249 ;;  aux             1   16[COMRAM] unsigned char 
  1250 ;; Return value:  Size  Location     Type
  1251 ;;                  1    wreg      void 
  1252 ;; Registers used:
  1253 ;;		wreg, status,2, status,0, cstack
  1254 ;; Tracked objects:
  1255 ;;		On entry : 0/0
  1256 ;;		On exit  : 0/0
  1257 ;;		Unchanged: 0/0
  1258 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1259 ;;      Params:         0       0       0       0       0       0       0       0       0
  1260 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1261 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1262 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1263 ;;Total ram usage:        2 bytes
  1264 ;; Hardware stack levels used: 1
  1265 ;; Hardware stack levels required when called: 5
  1266 ;; This function calls:
  1267 ;;		_ENVIA_NIBBLE
  1268 ;;		_LEER_LCD
  1269 ;; This function is called by:
  1270 ;;		_POS_CURSOR
  1271 ;;		_CURSOR_HOME
  1272 ;;		_CURSOR_ONOFF
  1273 ;;		_BORRAR_LCD
  1274 ;;		_LCD_CONFIG
  1275 ;;		_BLINK_CURSOR
  1276 ;;		_DISPLAY_ONOFF
  1277 ;;		_CURSOR_SHIFTLEFT
  1278 ;;		_CURSOR_SHIFTRIGHT
  1279 ;;		_DISPLAY_SHIFTLEFT
  1280 ;;		_DISPLAY_SHIFTRIGHT
  1281 ;;		_GENERACARACTER
  1282 ;; This function uses a non-reentrant model
  1283 ;;
  1284                           
  1285                           	psect	text11
  1286   000D04                     __ptext11:
  1287                           	callstack 0
  1288   000D04                     _ENVIA_LCD_CMD:
  1289                           	callstack 22
  1290                           
  1291                           ;incstack = 0
  1292                           ;ENVIA_LCD_CMD@dato stored from wreg
  1293   000D04  6E10               	movwf	ENVIA_LCD_CMD@dato^0,c
  1294   000D06                     
  1295                           ;LCD.c: 129: void ENVIA_LCD_CMD(unsigned char dato);LCD.c: 130: {;LCD.c: 131:  unsigned 
      +                          char aux;;LCD.c: 132:  LATDbits.LATD0 = 0;
  1296   000D06  908C               	bcf	140,0,c	;volatile
  1297   000D08                     
  1298                           ;LCD.c: 133:  LEER_LCD();
  1299   000D08  ECA6  F004         	call	_LEER_LCD	;wreg free
  1300   000D0C                     
  1301                           ;LCD.c: 134:  TRISD = 0b00000000;
  1302   000D0C  0E00               	movlw	0
  1303   000D0E  6E95               	movwf	149,c	;volatile
  1304   000D10                     
  1305                           ;LCD.c: 135:     _delay((unsigned long)((100)*(4000000UL/4000000.0)));
  1306   000D10  0E21               	movlw	33
  1307   000D12                     u447:
  1308   000D12  2EE8               	decfsz	wreg,f,c
  1309   000D14  D7FE               	bra	u447
  1310   000D16  F000               	nop	
  1311   000D18                     
  1312                           ;LCD.c: 136:     LATDbits.LATD1 = 0;
  1313   000D18  928C               	bcf	140,1,c	;volatile
  1314   000D1A                     
  1315                           ;LCD.c: 137:  LATDbits.LATD2 = 0;
  1316   000D1A  948C               	bcf	140,2,c	;volatile
  1317   000D1C                     
  1318                           ;LCD.c: 138:  LATDbits.LATD0 = 0;
  1319   000D1C  908C               	bcf	140,0,c	;volatile
  1320   000D1E                     
  1321                           ;LCD.c: 139:  aux = dato & 0xF0;
  1322   000D1E  5010               	movf	ENVIA_LCD_CMD@dato^0,w,c
  1323   000D20  0BF0               	andlw	240
  1324   000D22  6E11               	movwf	ENVIA_LCD_CMD@aux^0,c
  1325   000D24                     
  1326                           ;LCD.c: 140:  ENVIA_NIBBLE(aux);
  1327   000D24  5011               	movf	ENVIA_LCD_CMD@aux^0,w,c
  1328   000D26  EC29  F007         	call	_ENVIA_NIBBLE
  1329   000D2A                     
  1330                           ;LCD.c: 141:  aux = dato<<4;
  1331   000D2A  3810               	swapf	ENVIA_LCD_CMD@dato^0,w,c
  1332   000D2C  0BF0               	andlw	240
  1333   000D2E  6E11               	movwf	ENVIA_LCD_CMD@aux^0,c
  1334   000D30                     
  1335                           ;LCD.c: 142:  ENVIA_NIBBLE(aux);
  1336   000D30  5011               	movf	ENVIA_LCD_CMD@aux^0,w,c
  1337   000D32  EC29  F007         	call	_ENVIA_NIBBLE
  1338   000D36  0012               	return		;funcret
  1339   000D38                     __end_of_ENVIA_LCD_CMD:
  1340                           	callstack 0
  1341                           
  1342 ;; *************** function _ESCRIBE_MENSAJE2 *****************
  1343 ;; Defined at:
  1344 ;;		line 70 in file "LCD.c"
  1345 ;; Parameters:    Size  Location     Type
  1346 ;;  cadena          2   18[COMRAM] PTR const unsigned char 
  1347 ;;		 -> STR_3(13), STR_2(9), STR_1(10), 
  1348 ;; Auto vars:     Size  Location     Type
  1349 ;;  i               1   23[COMRAM] unsigned char 
  1350 ;;  tam             1   22[COMRAM] unsigned char 
  1351 ;; Return value:  Size  Location     Type
  1352 ;;                  1    wreg      void 
  1353 ;; Registers used:
  1354 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1355 ;; Tracked objects:
  1356 ;;		On entry : 0/0
  1357 ;;		On exit  : 0/0
  1358 ;;		Unchanged: 0/0
  1359 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1360 ;;      Params:         2       0       0       0       0       0       0       0       0
  1361 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1362 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1363 ;;      Totals:         6       0       0       0       0       0       0       0       0
  1364 ;;Total ram usage:        6 bytes
  1365 ;; Hardware stack levels used: 1
  1366 ;; Hardware stack levels required when called: 6
  1367 ;; This function calls:
  1368 ;;		_ENVIA_CHAR
  1369 ;;		_strlen
  1370 ;; This function is called by:
  1371 ;;		_main
  1372 ;; This function uses a non-reentrant model
  1373 ;;
  1374                           
  1375                           	psect	text12
  1376   000B52                     __ptext12:
  1377                           	callstack 0
  1378   000B52                     _ESCRIBE_MENSAJE2:
  1379                           	callstack 24
  1380   000B52                     
  1381                           ;LCD.c: 70: void ESCRIBE_MENSAJE2(const char *cadena);LCD.c: 71: {;LCD.c: 72:     unsign
      +                          ed char tam;;LCD.c: 73:     tam = strlen(cadena);
  1382   000B52  C013  F00F         	movff	ESCRIBE_MENSAJE2@cadena,strlen@s
  1383   000B56  C014  F010         	movff	ESCRIBE_MENSAJE2@cadena+1,strlen@s+1
  1384   000B5A  EC10  F006         	call	_strlen	;wreg free
  1385   000B5E  500F               	movf	?_strlen^0,w,c
  1386   000B60  6E17               	movwf	ESCRIBE_MENSAJE2@tam^0,c
  1387   000B62                     
  1388                           ;LCD.c: 75:  for(i = 0; i<tam; i++)
  1389   000B62  0E00               	movlw	0
  1390   000B64  6E18               	movwf	ESCRIBE_MENSAJE2@i^0,c
  1391   000B66  EFC4  F005         	goto	l1410
  1392   000B6A                     l1406:
  1393                           
  1394                           ;LCD.c: 76:  {;LCD.c: 77:   ENVIA_CHAR(cadena[i]);
  1395   000B6A  5018               	movf	ESCRIBE_MENSAJE2@i^0,w,c
  1396   000B6C  2413               	addwf	ESCRIBE_MENSAJE2@cadena^0,w,c
  1397   000B6E  6E15               	movwf	??_ESCRIBE_MENSAJE2^0,c
  1398   000B70  0E00               	movlw	0
  1399   000B72  2014               	addwfc	(ESCRIBE_MENSAJE2@cadena+1)^0,w,c
  1400   000B74  6E16               	movwf	(??_ESCRIBE_MENSAJE2+1)^0,c
  1401   000B76  C015  FFF6         	movff	??_ESCRIBE_MENSAJE2,tblptrl
  1402   000B7A  C016  FFF7         	movff	??_ESCRIBE_MENSAJE2+1,tblptrh
  1403   000B7E                     	if	0	;tblptru may be non-zero
  1404   000B7E                     	endif
  1405   000B7E                     	if	0	;tblptru may be non-zero
  1406   000B7E                     	endif
  1407   000B7E  0008               	tblrd		*
  1408   000B80  50F5               	movf	tablat,w,c
  1409   000B82  EC9C  F006         	call	_ENVIA_CHAR
  1410   000B86                     
  1411                           ;LCD.c: 78:  }
  1412   000B86  2A18               	incf	ESCRIBE_MENSAJE2@i^0,f,c
  1413   000B88                     l1410:
  1414   000B88  5017               	movf	ESCRIBE_MENSAJE2@tam^0,w,c
  1415   000B8A  5C18               	subwf	ESCRIBE_MENSAJE2@i^0,w,c
  1416   000B8C  A0D8               	btfss	status,0,c
  1417   000B8E  EFCB  F005         	goto	u361
  1418   000B92  EFCD  F005         	goto	u360
  1419   000B96                     u361:
  1420   000B96  EFB5  F005         	goto	l1406
  1421   000B9A                     u360:
  1422   000B9A  0012               	return		;funcret
  1423   000B9C                     __end_of_ESCRIBE_MENSAJE2:
  1424                           	callstack 0
  1425                           
  1426 ;; *************** function _strlen *****************
  1427 ;; Defined at:
  1428 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\strlen.c"
  1429 ;; Parameters:    Size  Location     Type
  1430 ;;  s               2   14[COMRAM] PTR const unsigned char 
  1431 ;;		 -> STR_3(13), STR_2(9), STR_1(10), 
  1432 ;; Auto vars:     Size  Location     Type
  1433 ;;  a               2   16[COMRAM] PTR const unsigned char 
  1434 ;;		 -> STR_3(13), STR_2(9), STR_1(10), 
  1435 ;; Return value:  Size  Location     Type
  1436 ;;                  2   14[COMRAM] unsigned int 
  1437 ;; Registers used:
  1438 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
  1439 ;; Tracked objects:
  1440 ;;		On entry : 0/0
  1441 ;;		On exit  : 0/0
  1442 ;;		Unchanged: 0/0
  1443 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1444 ;;      Params:         2       0       0       0       0       0       0       0       0
  1445 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1446 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1447 ;;      Totals:         4       0       0       0       0       0       0       0       0
  1448 ;;Total ram usage:        4 bytes
  1449 ;; Hardware stack levels used: 1
  1450 ;; Hardware stack levels required when called: 4
  1451 ;; This function calls:
  1452 ;;		Nothing
  1453 ;; This function is called by:
  1454 ;;		_ESCRIBE_MENSAJE2
  1455 ;; This function uses a non-reentrant model
  1456 ;;
  1457                           
  1458                           	psect	text13
  1459   000C20                     __ptext13:
  1460                           	callstack 0
  1461   000C20                     _strlen:
  1462                           	callstack 25
  1463   000C20  C00F  F011         	movff	strlen@s,strlen@a
  1464   000C24  C010  F012         	movff	strlen@s+1,strlen@a+1
  1465   000C28  EF18  F006         	goto	l1294
  1466   000C2C                     l1292:
  1467   000C2C  4A0F               	infsnz	strlen@s^0,f,c
  1468   000C2E  2A10               	incf	(strlen@s+1)^0,f,c
  1469   000C30                     l1294:
  1470   000C30  C00F  FFF6         	movff	strlen@s,tblptrl
  1471   000C34  C010  FFF7         	movff	strlen@s+1,tblptrh
  1472   000C38                     	if	0	;tblptru may be non-zero
  1473   000C38                     	endif
  1474   000C38                     	if	0	;tblptru may be non-zero
  1475   000C38                     	endif
  1476   000C38  0008               	tblrd		*
  1477   000C3A  50F5               	movf	tablat,w,c
  1478   000C3C  0900               	iorlw	0
  1479   000C3E  A4D8               	btfss	status,2,c
  1480   000C40  EF24  F006         	goto	u261
  1481   000C44  EF26  F006         	goto	u260
  1482   000C48                     u261:
  1483   000C48  EF16  F006         	goto	l1292
  1484   000C4C                     u260:
  1485   000C4C  5011               	movf	strlen@a^0,w,c
  1486   000C4E  5C0F               	subwf	strlen@s^0,w,c
  1487   000C50  6E0F               	movwf	?_strlen^0,c
  1488   000C52  5012               	movf	(strlen@a+1)^0,w,c
  1489   000C54  5810               	subwfb	(strlen@s+1)^0,w,c
  1490   000C56  6E10               	movwf	(?_strlen+1)^0,c
  1491   000C58  0012               	return		;funcret
  1492   000C5A                     __end_of_strlen:
  1493                           	callstack 0
  1494                           
  1495 ;; *************** function _ENVIA_CHAR *****************
  1496 ;; Defined at:
  1497 ;;		line 81 in file "LCD.c"
  1498 ;; Parameters:    Size  Location     Type
  1499 ;;  dato            1    wreg     unsigned char 
  1500 ;; Auto vars:     Size  Location     Type
  1501 ;;  dato            1   15[COMRAM] unsigned char 
  1502 ;;  aux             1   16[COMRAM] unsigned char 
  1503 ;; Return value:  Size  Location     Type
  1504 ;;                  1    wreg      void 
  1505 ;; Registers used:
  1506 ;;		wreg, status,2, status,0, cstack
  1507 ;; Tracked objects:
  1508 ;;		On entry : 0/0
  1509 ;;		On exit  : 0/0
  1510 ;;		Unchanged: 0/0
  1511 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1512 ;;      Params:         0       0       0       0       0       0       0       0       0
  1513 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1514 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1515 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1516 ;;Total ram usage:        2 bytes
  1517 ;; Hardware stack levels used: 1
  1518 ;; Hardware stack levels required when called: 5
  1519 ;; This function calls:
  1520 ;;		_ENVIA_NIBBLE
  1521 ;;		_LEER_LCD
  1522 ;; This function is called by:
  1523 ;;		_ESCRIBE_MENSAJE2
  1524 ;;		_main
  1525 ;;		_ESCRIBE_MENSAJE
  1526 ;;		_GENERACARACTER
  1527 ;; This function uses a non-reentrant model
  1528 ;;
  1529                           
  1530                           	psect	text14
  1531   000D38                     __ptext14:
  1532                           	callstack 0
  1533   000D38                     _ENVIA_CHAR:
  1534                           	callstack 24
  1535                           
  1536                           ;incstack = 0
  1537                           ;ENVIA_CHAR@dato stored from wreg
  1538   000D38  6E10               	movwf	ENVIA_CHAR@dato^0,c
  1539   000D3A                     
  1540                           ;LCD.c: 81: void ENVIA_CHAR(unsigned char dato);LCD.c: 82: {;LCD.c: 83:  unsigned char a
      +                          ux;;LCD.c: 84:  LATDbits.LATD0 = 1;
  1541   000D3A  808C               	bsf	140,0,c	;volatile
  1542   000D3C                     
  1543                           ;LCD.c: 85:  LEER_LCD();
  1544   000D3C  ECA6  F004         	call	_LEER_LCD	;wreg free
  1545   000D40                     
  1546                           ;LCD.c: 86:  TRISD = 0x00;
  1547   000D40  0E00               	movlw	0
  1548   000D42  6E95               	movwf	149,c	;volatile
  1549   000D44                     
  1550                           ;LCD.c: 87:     _delay((unsigned long)((100)*(4000000UL/4000000.0)));
  1551   000D44  0E21               	movlw	33
  1552   000D46                     u457:
  1553   000D46  2EE8               	decfsz	wreg,f,c
  1554   000D48  D7FE               	bra	u457
  1555   000D4A  F000               	nop	
  1556   000D4C                     
  1557                           ;LCD.c: 88:  LATDbits.LATD1 = 0;
  1558   000D4C  928C               	bcf	140,1,c	;volatile
  1559   000D4E                     
  1560                           ;LCD.c: 89:  LATDbits.LATD2 = 0;
  1561   000D4E  948C               	bcf	140,2,c	;volatile
  1562   000D50                     
  1563                           ;LCD.c: 90:  LATDbits.LATD0 = 1;
  1564   000D50  808C               	bsf	140,0,c	;volatile
  1565   000D52                     
  1566                           ;LCD.c: 91:  aux = dato & 0xF0;
  1567   000D52  5010               	movf	ENVIA_CHAR@dato^0,w,c
  1568   000D54  0BF0               	andlw	240
  1569   000D56  6E11               	movwf	ENVIA_CHAR@aux^0,c
  1570   000D58                     
  1571                           ;LCD.c: 92:  ENVIA_NIBBLE(aux);
  1572   000D58  5011               	movf	ENVIA_CHAR@aux^0,w,c
  1573   000D5A  EC29  F007         	call	_ENVIA_NIBBLE
  1574   000D5E                     
  1575                           ;LCD.c: 93:  aux = dato << 4;
  1576   000D5E  3810               	swapf	ENVIA_CHAR@dato^0,w,c
  1577   000D60  0BF0               	andlw	240
  1578   000D62  6E11               	movwf	ENVIA_CHAR@aux^0,c
  1579   000D64                     
  1580                           ;LCD.c: 94:  ENVIA_NIBBLE(aux);
  1581   000D64  5011               	movf	ENVIA_CHAR@aux^0,w,c
  1582   000D66  EC29  F007         	call	_ENVIA_NIBBLE
  1583   000D6A  0012               	return		;funcret
  1584   000D6C                     __end_of_ENVIA_CHAR:
  1585                           	callstack 0
  1586                           
  1587 ;; *************** function _LEER_LCD *****************
  1588 ;; Defined at:
  1589 ;;		line 145 in file "LCD.c"
  1590 ;; Parameters:    Size  Location     Type
  1591 ;;		None
  1592 ;; Auto vars:     Size  Location     Type
  1593 ;;  aux             1   14[COMRAM] unsigned char 
  1594 ;; Return value:  Size  Location     Type
  1595 ;;                  1    wreg      void 
  1596 ;; Registers used:
  1597 ;;		wreg, status,2, status,0
  1598 ;; Tracked objects:
  1599 ;;		On entry : 0/0
  1600 ;;		On exit  : 0/0
  1601 ;;		Unchanged: 0/0
  1602 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1603 ;;      Params:         0       0       0       0       0       0       0       0       0
  1604 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1605 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1606 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1607 ;;Total ram usage:        1 bytes
  1608 ;; Hardware stack levels used: 1
  1609 ;; Hardware stack levels required when called: 4
  1610 ;; This function calls:
  1611 ;;		Nothing
  1612 ;; This function is called by:
  1613 ;;		_ENVIA_CHAR
  1614 ;;		_ENVIA_LCD_CMD
  1615 ;; This function uses a non-reentrant model
  1616 ;;
  1617                           
  1618                           	psect	text15
  1619   00094C                     __ptext15:
  1620                           	callstack 0
  1621   00094C                     _LEER_LCD:
  1622                           	callstack 22
  1623   00094C                     
  1624                           ;LCD.c: 147:  unsigned char aux;;LCD.c: 148:  TRISD = 0xF8;
  1625   00094C  0EF8               	movlw	248
  1626   00094E  6E95               	movwf	149,c	;volatile
  1627   000950                     
  1628                           ;LCD.c: 149:  LATDbits.LATD0 = 0;
  1629   000950  908C               	bcf	140,0,c	;volatile
  1630   000952                     
  1631                           ;LCD.c: 150:  LATDbits.LATD1 = 1;
  1632   000952  828C               	bsf	140,1,c	;volatile
  1633   000954                     
  1634                           ;LCD.c: 151:  LATDbits.LATD2 = 1;
  1635   000954  848C               	bsf	140,2,c	;volatile
  1636   000956                     
  1637                           ;LCD.c: 152:     _delay((unsigned long)((100)*(4000000UL/4000000.0)));
  1638   000956  0E21               	movlw	33
  1639   000958                     u467:
  1640   000958  2EE8               	decfsz	wreg,f,c
  1641   00095A  D7FE               	bra	u467
  1642   00095C  F000               	nop	
  1643   00095E                     
  1644                           ;LCD.c: 153:  aux = PORTD;
  1645   00095E  CF83 F00F          	movff	3971,LEER_LCD@aux	;volatile
  1646   000962                     
  1647                           ;LCD.c: 154:  LATDbits.LATD2 = 0;
  1648   000962  948C               	bcf	140,2,c	;volatile
  1649   000964                     
  1650                           ;LCD.c: 155:     _delay((unsigned long)((100)*(4000000UL/4000000.0)));
  1651   000964  0E21               	movlw	33
  1652   000966                     u477:
  1653   000966  2EE8               	decfsz	wreg,f,c
  1654   000968  D7FE               	bra	u477
  1655   00096A  F000               	nop	
  1656   00096C                     
  1657                           ;LCD.c: 156:  LATDbits.LATD2 = 1;
  1658   00096C  848C               	bsf	140,2,c	;volatile
  1659   00096E                     
  1660                           ;LCD.c: 157:     _delay((unsigned long)((100)*(4000000UL/4000000.0)));
  1661   00096E  0E21               	movlw	33
  1662   000970                     u487:
  1663   000970  2EE8               	decfsz	wreg,f,c
  1664   000972  D7FE               	bra	u487
  1665   000974  F000               	nop	
  1666   000976                     
  1667                           ;LCD.c: 158:  LATDbits.LATD2 = 0;
  1668   000976  948C               	bcf	140,2,c	;volatile
  1669   000978                     l866:
  1670                           
  1671                           ;LCD.c: 159:  aux = aux & 0x80;
  1672   000978  500F               	movf	LEER_LCD@aux^0,w,c
  1673   00097A  0B80               	andlw	128
  1674   00097C  6E0F               	movwf	LEER_LCD@aux^0,c
  1675                           
  1676                           ;LCD.c: 160:  while(aux == 0x80)
  1677   00097E  EFD5  F004         	goto	l880
  1678   000982                     l87:
  1679                           
  1680                           ;LCD.c: 161:         {;LCD.c: 162:             LATDbits.LATD2 = 1;
  1681   000982  848C               	bsf	140,2,c	;volatile
  1682   000984                     
  1683                           ;LCD.c: 163:             _delay((unsigned long)((100)*(4000000UL/4000000.0)));
  1684   000984  0E21               	movlw	33
  1685   000986                     u497:
  1686   000986  2EE8               	decfsz	wreg,f,c
  1687   000988  D7FE               	bra	u497
  1688   00098A  F000               	nop	
  1689   00098C                     
  1690                           ;LCD.c: 164:             aux = PORTD;
  1691   00098C  CF83 F00F          	movff	3971,LEER_LCD@aux	;volatile
  1692   000990                     
  1693                           ;LCD.c: 165:             LATDbits.LATD2 = 0;
  1694   000990  948C               	bcf	140,2,c	;volatile
  1695                           
  1696                           ;LCD.c: 166:             _delay((unsigned long)((100)*(4000000UL/4000000.0)));
  1697   000992  0E21               	movlw	33
  1698   000994                     u507:
  1699   000994  2EE8               	decfsz	wreg,f,c
  1700   000996  D7FE               	bra	u507
  1701   000998  F000               	nop	
  1702   00099A                     
  1703                           ;LCD.c: 167:             LATDbits.LATD2 = 1;
  1704   00099A  848C               	bsf	140,2,c	;volatile
  1705                           
  1706                           ;LCD.c: 168:             _delay((unsigned long)((100)*(4000000UL/4000000.0)));
  1707   00099C  0E21               	movlw	33
  1708   00099E                     u517:
  1709   00099E  2EE8               	decfsz	wreg,f,c
  1710   0009A0  D7FE               	bra	u517
  1711   0009A2  F000               	nop	
  1712   0009A4                     
  1713                           ;LCD.c: 169:             LATDbits.LATD2 = 0;
  1714   0009A4  948C               	bcf	140,2,c	;volatile
  1715   0009A6  EFBC  F004         	goto	l866
  1716   0009AA                     l880:
  1717                           
  1718                           ;LCD.c: 160:  while(aux == 0x80)
  1719   0009AA  0E80               	movlw	128
  1720   0009AC  180F               	xorwf	LEER_LCD@aux^0,w,c
  1721   0009AE  B4D8               	btfsc	status,2,c
  1722   0009B0  EFDC  F004         	goto	u11
  1723   0009B4  EFDE  F004         	goto	u10
  1724   0009B8                     u11:
  1725   0009B8  EFC1  F004         	goto	l87
  1726   0009BC                     u10:
  1727   0009BC  0012               	return		;funcret
  1728   0009BE                     __end_of_LEER_LCD:
  1729                           	callstack 0
  1730                           
  1731 ;; *************** function _ENVIA_NIBBLE *****************
  1732 ;; Defined at:
  1733 ;;		line 119 in file "LCD.c"
  1734 ;; Parameters:    Size  Location     Type
  1735 ;;  dato            1    wreg     unsigned char 
  1736 ;; Auto vars:     Size  Location     Type
  1737 ;;  dato            1   14[COMRAM] unsigned char 
  1738 ;; Return value:  Size  Location     Type
  1739 ;;                  1    wreg      void 
  1740 ;; Registers used:
  1741 ;;		wreg, status,2, status,0
  1742 ;; Tracked objects:
  1743 ;;		On entry : 0/0
  1744 ;;		On exit  : 0/0
  1745 ;;		Unchanged: 0/0
  1746 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1747 ;;      Params:         0       0       0       0       0       0       0       0       0
  1748 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1749 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1750 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1751 ;;Total ram usage:        1 bytes
  1752 ;; Hardware stack levels used: 1
  1753 ;; Hardware stack levels required when called: 4
  1754 ;; This function calls:
  1755 ;;		Nothing
  1756 ;; This function is called by:
  1757 ;;		_ENVIA_CHAR
  1758 ;;		_LCD_CONFIG
  1759 ;;		_ENVIA_LCD_CMD
  1760 ;; This function uses a non-reentrant model
  1761 ;;
  1762                           
  1763                           	psect	text16
  1764   000E52                     __ptext16:
  1765                           	callstack 0
  1766   000E52                     _ENVIA_NIBBLE:
  1767                           	callstack 23
  1768                           
  1769                           ;incstack = 0
  1770                           ;ENVIA_NIBBLE@dato stored from wreg
  1771   000E52  6E0F               	movwf	ENVIA_NIBBLE@dato^0,c
  1772   000E54                     
  1773                           ;LCD.c: 119: void ENVIA_NIBBLE(unsigned char dato);LCD.c: 120: {;LCD.c: 121:  LATD &= 0x
      +                          0F;
  1774   000E54  0E0F               	movlw	15
  1775   000E56  168C               	andwf	140,f,c	;volatile
  1776                           
  1777                           ;LCD.c: 122:  dato &= 0xF0;
  1778   000E58  0EF0               	movlw	240
  1779   000E5A  160F               	andwf	ENVIA_NIBBLE@dato^0,f,c
  1780                           
  1781                           ;LCD.c: 123:  LATD|= dato;
  1782   000E5C  500F               	movf	ENVIA_NIBBLE@dato^0,w,c	;volatile
  1783   000E5E  128C               	iorwf	140,f,c	;volatile
  1784   000E60                     
  1785                           ;LCD.c: 124:  LATDbits.LATD2 = 1;
  1786   000E60  848C               	bsf	140,2,c	;volatile
  1787   000E62                     
  1788                           ;LCD.c: 125:     _delay((unsigned long)((100)*(4000000UL/4000000.0)));
  1789   000E62  0E21               	movlw	33
  1790   000E64                     u527:
  1791   000E64  2EE8               	decfsz	wreg,f,c
  1792   000E66  D7FE               	bra	u527
  1793   000E68  F000               	nop	
  1794   000E6A                     
  1795                           ;LCD.c: 126:  LATDbits.LATD2 = 0;
  1796   000E6A  948C               	bcf	140,2,c	;volatile
  1797   000E6C  0012               	return		;funcret
  1798   000E6E                     __end_of_ENVIA_NIBBLE:
  1799                           	callstack 0
  1800                           
  1801 ;; *************** function _INT_CCP2 *****************
  1802 ;; Defined at:
  1803 ;;		line 72 in file "CPP_compare.c"
  1804 ;; Parameters:    Size  Location     Type
  1805 ;;		None
  1806 ;; Auto vars:     Size  Location     Type
  1807 ;;		None
  1808 ;; Return value:  Size  Location     Type
  1809 ;;                  1    wreg      void 
  1810 ;; Registers used:
  1811 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1812 ;; Tracked objects:
  1813 ;;		On entry : 0/0
  1814 ;;		On exit  : 0/0
  1815 ;;		Unchanged: 0/0
  1816 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1817 ;;      Params:         0       0       0       0       0       0       0       0       0
  1818 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1819 ;;      Temps:          4       0       0       0       0       0       0       0       0
  1820 ;;      Totals:         4       0       0       0       0       0       0       0       0
  1821 ;;Total ram usage:        4 bytes
  1822 ;; Hardware stack levels used: 1
  1823 ;; Hardware stack levels required when called: 3
  1824 ;; This function calls:
  1825 ;;		i2_ESCRIBE_MENSAJE2
  1826 ;;		i2_POS_CURSOR
  1827 ;; This function is called by:
  1828 ;;		Interrupt level 2
  1829 ;; This function uses a non-reentrant model
  1830 ;;
  1831                           
  1832                           	psect	intcode
  1833   000008                     __pintcode:
  1834                           	callstack 0
  1835   000008                     _INT_CCP2:
  1836                           	callstack 22
  1837                           
  1838                           ;incstack = 0
  1839   000008  8224               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  1840   00000A  CFF6 F00B          	movff	tblptrl,??_INT_CCP2
  1841   00000E  CFF7 F00C          	movff	tblptrh,??_INT_CCP2+1
  1842   000012  CFF8 F00D          	movff	tblptru,??_INT_CCP2+2
  1843   000016  CFF5 F00E          	movff	tablat,??_INT_CCP2+3
  1844   00001A                     
  1845                           ;CPP_compare.c: 73:     PIR2bits.CCP2IF = 0;
  1846   00001A  90A1               	bcf	161,0,c	;volatile
  1847   00001C                     
  1848                           ;CPP_compare.c: 75:     POS_CURSOR(1,0);
  1849   00001C  0E00               	movlw	0
  1850   00001E  6E04               	movwf	i2POS_CURSOR@columna^0,c
  1851   000020  0E01               	movlw	1
  1852   000022  EC2D  F006         	call	i2_POS_CURSOR
  1853   000026                     
  1854                           ;CPP_compare.c: 76:     ESCRIBE_MENSAJE2("YA HAY MATCH");
  1855   000026  0E01               	movlw	low STR_3
  1856   000028  6E05               	movwf	i2ESCRIBE_MENSAJE2@cadena^0,c
  1857   00002A  0E08               	movlw	high STR_3
  1858   00002C  6E06               	movwf	(i2ESCRIBE_MENSAJE2@cadena+1)^0,c
  1859   00002E  ECCE  F005         	call	i2_ESCRIBE_MENSAJE2	;wreg free
  1860   000032  C00E  FFF5         	movff	??_INT_CCP2+3,tablat
  1861   000036  C00D  FFF8         	movff	??_INT_CCP2+2,tblptru
  1862   00003A  C00C  FFF7         	movff	??_INT_CCP2+1,tblptrh
  1863   00003E  C00B  FFF6         	movff	??_INT_CCP2,tblptrl
  1864   000042  9224               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1865   000044  0011               	retfie		f
  1866   000046                     __end_of_INT_CCP2:
  1867                           	callstack 0
  1868                           
  1869 ;; *************** function i2_POS_CURSOR *****************
  1870 ;; Defined at:
  1871 ;;		line 6 in file "LCD.c"
  1872 ;; Parameters:    Size  Location     Type
  1873 ;;  fila            1    wreg     unsigned char 
  1874 ;;  columna         1    3[COMRAM] unsigned char 
  1875 ;; Auto vars:     Size  Location     Type
  1876 ;;  fila            1    4[COMRAM] unsigned char 
  1877 ;; Return value:  Size  Location     Type
  1878 ;;                  1    wreg      void 
  1879 ;; Registers used:
  1880 ;;		wreg, status,2, status,0, cstack
  1881 ;; Tracked objects:
  1882 ;;		On entry : 0/0
  1883 ;;		On exit  : 0/0
  1884 ;;		Unchanged: 0/0
  1885 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1886 ;;      Params:         1       0       0       0       0       0       0       0       0
  1887 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1888 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1889 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1890 ;;Total ram usage:        2 bytes
  1891 ;; Hardware stack levels used: 1
  1892 ;; Hardware stack levels required when called: 2
  1893 ;; This function calls:
  1894 ;;		i2_ENVIA_LCD_CMD
  1895 ;; This function is called by:
  1896 ;;		_INT_CCP2
  1897 ;; This function uses a non-reentrant model
  1898 ;;
  1899                           
  1900                           	psect	text18
  1901   000C5A                     __ptext18:
  1902                           	callstack 0
  1903   000C5A                     i2_POS_CURSOR:
  1904                           	callstack 22
  1905                           
  1906                           ;incstack = 0
  1907                           ;i2POS_CURSOR@fila stored from wreg
  1908   000C5A  6E05               	movwf	i2POS_CURSOR@fila^0,c
  1909   000C5C                     
  1910                           ;LCD.c: 6: void POS_CURSOR(unsigned char fila,unsigned char columna);LCD.c: 7: {;LCD.c: 
      +                          8:  if(fila == 1)
  1911   000C5C  0405               	decf	i2POS_CURSOR@fila^0,w,c
  1912   000C5E  A4D8               	btfss	status,2,c
  1913   000C60  EF34  F006         	goto	i2u37_41
  1914   000C64  EF36  F006         	goto	i2u37_40
  1915   000C68                     i2u37_41:
  1916   000C68  EF3C  F006         	goto	i2l1418
  1917   000C6C                     i2u37_40:
  1918   000C6C                     
  1919                           ;LCD.c: 9:  {;LCD.c: 10:   ENVIA_LCD_CMD(0x80+columna);
  1920   000C6C  5004               	movf	i2POS_CURSOR@columna^0,w,c
  1921   000C6E  0F80               	addlw	128
  1922   000C70  ECB6  F006         	call	i2_ENVIA_LCD_CMD
  1923                           
  1924                           ;LCD.c: 11:  }
  1925   000C74  EF49  F006         	goto	i2l26
  1926   000C78                     i2l1418:
  1927   000C78  0E02               	movlw	2
  1928   000C7A  1805               	xorwf	i2POS_CURSOR@fila^0,w,c
  1929   000C7C  A4D8               	btfss	status,2,c
  1930   000C7E  EF43  F006         	goto	i2u38_41
  1931   000C82  EF45  F006         	goto	i2u38_40
  1932   000C86                     i2u38_41:
  1933   000C86  EF49  F006         	goto	i2l26
  1934   000C8A                     i2u38_40:
  1935   000C8A                     
  1936                           ;LCD.c: 13:  {;LCD.c: 14:   ENVIA_LCD_CMD(0xC0+columna);
  1937   000C8A  5004               	movf	i2POS_CURSOR@columna^0,w,c
  1938   000C8C  0FC0               	addlw	192
  1939   000C8E  ECB6  F006         	call	i2_ENVIA_LCD_CMD
  1940   000C92                     i2l26:
  1941   000C92  0012               	return		;funcret
  1942   000C94                     __end_ofi2_POS_CURSOR:
  1943                           	callstack 0
  1944                           
  1945 ;; *************** function i2_ENVIA_LCD_CMD *****************
  1946 ;; Defined at:
  1947 ;;		line 129 in file "LCD.c"
  1948 ;; Parameters:    Size  Location     Type
  1949 ;;  dato            1    wreg     unsigned char 
  1950 ;; Auto vars:     Size  Location     Type
  1951 ;;  dato            1    1[COMRAM] unsigned char 
  1952 ;;  aux             1    2[COMRAM] unsigned char 
  1953 ;; Return value:  Size  Location     Type
  1954 ;;                  1    wreg      void 
  1955 ;; Registers used:
  1956 ;;		wreg, status,2, status,0, cstack
  1957 ;; Tracked objects:
  1958 ;;		On entry : 0/0
  1959 ;;		On exit  : 0/0
  1960 ;;		Unchanged: 0/0
  1961 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1962 ;;      Params:         0       0       0       0       0       0       0       0       0
  1963 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1964 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1965 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1966 ;;Total ram usage:        2 bytes
  1967 ;; Hardware stack levels used: 1
  1968 ;; Hardware stack levels required when called: 1
  1969 ;; This function calls:
  1970 ;;		i2_ENVIA_NIBBLE
  1971 ;;		i2_LEER_LCD
  1972 ;; This function is called by:
  1973 ;;		i2_POS_CURSOR
  1974 ;; This function uses a non-reentrant model
  1975 ;;
  1976                           
  1977                           	psect	text19
  1978   000D6C                     __ptext19:
  1979                           	callstack 0
  1980   000D6C                     i2_ENVIA_LCD_CMD:
  1981                           	callstack 22
  1982                           
  1983                           ;incstack = 0
  1984                           ;i2ENVIA_LCD_CMD@dato stored from wreg
  1985   000D6C  6E02               	movwf	i2ENVIA_LCD_CMD@dato^0,c
  1986   000D6E                     
  1987                           ;LCD.c: 129: void ENVIA_LCD_CMD(unsigned char dato);LCD.c: 130: {;LCD.c: 131:  unsigned 
      +                          char aux;;LCD.c: 132:  LATDbits.LATD0 = 0;
  1988   000D6E  908C               	bcf	140,0,c	;volatile
  1989   000D70                     
  1990                           ;LCD.c: 133:  LEER_LCD();
  1991   000D70  ECDF  F004         	call	i2_LEER_LCD	;wreg free
  1992   000D74                     
  1993                           ;LCD.c: 134:  TRISD = 0b00000000;
  1994   000D74  0E00               	movlw	0
  1995   000D76  6E95               	movwf	149,c	;volatile
  1996   000D78                     
  1997                           ;LCD.c: 135:     _delay((unsigned long)((100)*(4000000UL/4000000.0)));
  1998   000D78  0E21               	movlw	33
  1999   000D7A                     i2u53_47:
  2000   000D7A  2EE8               	decfsz	wreg,f,c
  2001   000D7C  D7FE               	bra	i2u53_47
  2002   000D7E  F000               	nop	
  2003   000D80                     
  2004                           ;LCD.c: 136:     LATDbits.LATD1 = 0;
  2005   000D80  928C               	bcf	140,1,c	;volatile
  2006   000D82                     
  2007                           ;LCD.c: 137:  LATDbits.LATD2 = 0;
  2008   000D82  948C               	bcf	140,2,c	;volatile
  2009   000D84                     
  2010                           ;LCD.c: 138:  LATDbits.LATD0 = 0;
  2011   000D84  908C               	bcf	140,0,c	;volatile
  2012   000D86                     
  2013                           ;LCD.c: 139:  aux = dato & 0xF0;
  2014   000D86  5002               	movf	i2ENVIA_LCD_CMD@dato^0,w,c
  2015   000D88  0BF0               	andlw	240
  2016   000D8A  6E03               	movwf	i2ENVIA_LCD_CMD@aux^0,c
  2017   000D8C                     
  2018                           ;LCD.c: 140:  ENVIA_NIBBLE(aux);
  2019   000D8C  5003               	movf	i2ENVIA_LCD_CMD@aux^0,w,c
  2020   000D8E  EC37  F007         	call	i2_ENVIA_NIBBLE
  2021   000D92                     
  2022                           ;LCD.c: 141:  aux = dato<<4;
  2023   000D92  3802               	swapf	i2ENVIA_LCD_CMD@dato^0,w,c
  2024   000D94  0BF0               	andlw	240
  2025   000D96  6E03               	movwf	i2ENVIA_LCD_CMD@aux^0,c
  2026   000D98                     
  2027                           ;LCD.c: 142:  ENVIA_NIBBLE(aux);
  2028   000D98  5003               	movf	i2ENVIA_LCD_CMD@aux^0,w,c
  2029   000D9A  EC37  F007         	call	i2_ENVIA_NIBBLE
  2030   000D9E  0012               	return		;funcret
  2031   000DA0                     __end_ofi2_ENVIA_LCD_CMD:
  2032                           	callstack 0
  2033                           
  2034 ;; *************** function i2_ESCRIBE_MENSAJE2 *****************
  2035 ;; Defined at:
  2036 ;;		line 70 in file "LCD.c"
  2037 ;; Parameters:    Size  Location     Type
  2038 ;;  cadena          2    4[COMRAM] PTR const unsigned char 
  2039 ;;		 -> STR_3(13), STR_2(9), STR_1(10), 
  2040 ;; Auto vars:     Size  Location     Type
  2041 ;;  i               1    9[COMRAM] unsigned char 
  2042 ;;  tam             1    8[COMRAM] unsigned char 
  2043 ;; Return value:  Size  Location     Type
  2044 ;;                  1    wreg      void 
  2045 ;; Registers used:
  2046 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2047 ;; Tracked objects:
  2048 ;;		On entry : 0/0
  2049 ;;		On exit  : 0/0
  2050 ;;		Unchanged: 0/0
  2051 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2052 ;;      Params:         2       0       0       0       0       0       0       0       0
  2053 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2054 ;;      Temps:          2       0       0       0       0       0       0       0       0
  2055 ;;      Totals:         6       0       0       0       0       0       0       0       0
  2056 ;;Total ram usage:        6 bytes
  2057 ;; Hardware stack levels used: 1
  2058 ;; Hardware stack levels required when called: 2
  2059 ;; This function calls:
  2060 ;;		i2_ENVIA_CHAR
  2061 ;;		i2_strlen
  2062 ;; This function is called by:
  2063 ;;		_INT_CCP2
  2064 ;; This function uses a non-reentrant model
  2065 ;;
  2066                           
  2067                           	psect	text20
  2068   000B9C                     __ptext20:
  2069                           	callstack 0
  2070   000B9C                     i2_ESCRIBE_MENSAJE2:
  2071                           	callstack 22
  2072   000B9C                     
  2073                           ;LCD.c: 70: void ESCRIBE_MENSAJE2(const char *cadena);LCD.c: 71: {;LCD.c: 72:     unsign
      +                          ed char tam;;LCD.c: 73:     tam = strlen(cadena);
  2074   000B9C  C005  F001         	movff	i2ESCRIBE_MENSAJE2@cadena,i2strlen@s
  2075   000BA0  C006  F002         	movff	i2ESCRIBE_MENSAJE2@cadena+1,i2strlen@s+1
  2076   000BA4  EC4A  F006         	call	i2_strlen	;wreg free
  2077   000BA8  5001               	movf	?i2_strlen^0,w,c
  2078   000BAA  6E09               	movwf	i2ESCRIBE_MENSAJE2@tam^0,c
  2079   000BAC                     
  2080                           ;LCD.c: 75:  for(i = 0; i<tam; i++)
  2081   000BAC  0E00               	movlw	0
  2082   000BAE  6E0A               	movwf	i2ESCRIBE_MENSAJE2@i^0,c
  2083   000BB0  EFE9  F005         	goto	i2l1432
  2084   000BB4                     i2l1428:
  2085                           
  2086                           ;LCD.c: 76:  {;LCD.c: 77:   ENVIA_CHAR(cadena[i]);
  2087   000BB4  500A               	movf	i2ESCRIBE_MENSAJE2@i^0,w,c
  2088   000BB6  2405               	addwf	i2ESCRIBE_MENSAJE2@cadena^0,w,c
  2089   000BB8  6E07               	movwf	??i2_ESCRIBE_MENSAJE2^0,c
  2090   000BBA  0E00               	movlw	0
  2091   000BBC  2006               	addwfc	(i2ESCRIBE_MENSAJE2@cadena+1)^0,w,c
  2092   000BBE  6E08               	movwf	(??i2_ESCRIBE_MENSAJE2+1)^0,c
  2093   000BC0  C007  FFF6         	movff	??i2_ESCRIBE_MENSAJE2,tblptrl
  2094   000BC4  C008  FFF7         	movff	??i2_ESCRIBE_MENSAJE2+1,tblptrh
  2095   000BC8                     	if	0	;tblptru may be non-zero
  2096   000BC8                     	endif
  2097   000BC8                     	if	0	;tblptru may be non-zero
  2098   000BC8                     	endif
  2099   000BC8  0008               	tblrd		*
  2100   000BCA  50F5               	movf	tablat,w,c
  2101   000BCC  ECD0  F006         	call	i2_ENVIA_CHAR
  2102   000BD0                     
  2103                           ;LCD.c: 78:  }
  2104   000BD0  2A0A               	incf	i2ESCRIBE_MENSAJE2@i^0,f,c
  2105   000BD2                     i2l1432:
  2106   000BD2  5009               	movf	i2ESCRIBE_MENSAJE2@tam^0,w,c
  2107   000BD4  5C0A               	subwf	i2ESCRIBE_MENSAJE2@i^0,w,c
  2108   000BD6  A0D8               	btfss	status,0,c
  2109   000BD8  EFF0  F005         	goto	i2u39_41
  2110   000BDC  EFF2  F005         	goto	i2u39_40
  2111   000BE0                     i2u39_41:
  2112   000BE0  EFDA  F005         	goto	i2l1428
  2113   000BE4                     i2u39_40:
  2114   000BE4  0012               	return		;funcret
  2115   000BE6                     __end_ofi2_ESCRIBE_MENSAJE2:
  2116                           	callstack 0
  2117                           
  2118 ;; *************** function i2_strlen *****************
  2119 ;; Defined at:
  2120 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\strlen.c"
  2121 ;; Parameters:    Size  Location     Type
  2122 ;;  s               2    0[COMRAM] PTR const unsigned char 
  2123 ;;		 -> STR_3(13), STR_2(9), STR_1(10), 
  2124 ;; Auto vars:     Size  Location     Type
  2125 ;;  a               2    2[COMRAM] PTR const unsigned char 
  2126 ;;		 -> STR_3(13), STR_2(9), STR_1(10), 
  2127 ;; Return value:  Size  Location     Type
  2128 ;;                  2    0[COMRAM] unsigned int 
  2129 ;; Registers used:
  2130 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
  2131 ;; Tracked objects:
  2132 ;;		On entry : 0/0
  2133 ;;		On exit  : 0/0
  2134 ;;		Unchanged: 0/0
  2135 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2136 ;;      Params:         2       0       0       0       0       0       0       0       0
  2137 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2138 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2139 ;;      Totals:         4       0       0       0       0       0       0       0       0
  2140 ;;Total ram usage:        4 bytes
  2141 ;; Hardware stack levels used: 1
  2142 ;; This function calls:
  2143 ;;		Nothing
  2144 ;; This function is called by:
  2145 ;;		i2_ESCRIBE_MENSAJE2
  2146 ;; This function uses a non-reentrant model
  2147 ;;
  2148                           
  2149                           	psect	text21
  2150   000C94                     __ptext21:
  2151                           	callstack 0
  2152   000C94                     i2_strlen:
  2153                           	callstack 23
  2154   000C94  C001  F003         	movff	i2strlen@s,i2strlen@a
  2155   000C98  C002  F004         	movff	i2strlen@s+1,i2strlen@a+1
  2156   000C9C  EF52  F006         	goto	i2l1386
  2157   000CA0                     i2l1384:
  2158   000CA0  4A01               	infsnz	i2strlen@s^0,f,c
  2159   000CA2  2A02               	incf	(i2strlen@s+1)^0,f,c
  2160   000CA4                     i2l1386:
  2161   000CA4  C001  FFF6         	movff	i2strlen@s,tblptrl
  2162   000CA8  C002  FFF7         	movff	i2strlen@s+1,tblptrh
  2163   000CAC                     	if	0	;tblptru may be non-zero
  2164   000CAC                     	endif
  2165   000CAC                     	if	0	;tblptru may be non-zero
  2166   000CAC                     	endif
  2167   000CAC  0008               	tblrd		*
  2168   000CAE  50F5               	movf	tablat,w,c
  2169   000CB0  0900               	iorlw	0
  2170   000CB2  A4D8               	btfss	status,2,c
  2171   000CB4  EF5E  F006         	goto	i2u33_41
  2172   000CB8  EF60  F006         	goto	i2u33_40
  2173   000CBC                     i2u33_41:
  2174   000CBC  EF50  F006         	goto	i2l1384
  2175   000CC0                     i2u33_40:
  2176   000CC0  5003               	movf	i2strlen@a^0,w,c
  2177   000CC2  5C01               	subwf	i2strlen@s^0,w,c
  2178   000CC4  6E01               	movwf	?i2_strlen^0,c
  2179   000CC6  5004               	movf	(i2strlen@a+1)^0,w,c
  2180   000CC8  5802               	subwfb	(i2strlen@s+1)^0,w,c
  2181   000CCA  6E02               	movwf	(?i2_strlen+1)^0,c
  2182   000CCC  0012               	return		;funcret
  2183   000CCE                     __end_ofi2_strlen:
  2184                           	callstack 0
  2185                           
  2186 ;; *************** function i2_ENVIA_CHAR *****************
  2187 ;; Defined at:
  2188 ;;		line 81 in file "LCD.c"
  2189 ;; Parameters:    Size  Location     Type
  2190 ;;  dato            1    wreg     unsigned char 
  2191 ;; Auto vars:     Size  Location     Type
  2192 ;;  dato            1    1[COMRAM] unsigned char 
  2193 ;;  aux             1    2[COMRAM] unsigned char 
  2194 ;; Return value:  Size  Location     Type
  2195 ;;                  1    wreg      void 
  2196 ;; Registers used:
  2197 ;;		wreg, status,2, status,0, cstack
  2198 ;; Tracked objects:
  2199 ;;		On entry : 0/0
  2200 ;;		On exit  : 0/0
  2201 ;;		Unchanged: 0/0
  2202 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2203 ;;      Params:         0       0       0       0       0       0       0       0       0
  2204 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2205 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2206 ;;      Totals:         2       0       0       0       0       0       0       0       0
  2207 ;;Total ram usage:        2 bytes
  2208 ;; Hardware stack levels used: 1
  2209 ;; Hardware stack levels required when called: 1
  2210 ;; This function calls:
  2211 ;;		i2_ENVIA_NIBBLE
  2212 ;;		i2_LEER_LCD
  2213 ;; This function is called by:
  2214 ;;		i2_ESCRIBE_MENSAJE2
  2215 ;; This function uses a non-reentrant model
  2216 ;;
  2217                           
  2218                           	psect	text22
  2219   000DA0                     __ptext22:
  2220                           	callstack 0
  2221   000DA0                     i2_ENVIA_CHAR:
  2222                           	callstack 22
  2223                           
  2224                           ;incstack = 0
  2225                           ;i2ENVIA_CHAR@dato stored from wreg
  2226   000DA0  6E02               	movwf	i2ENVIA_CHAR@dato^0,c
  2227   000DA2                     
  2228                           ;LCD.c: 81: void ENVIA_CHAR(unsigned char dato);LCD.c: 82: {;LCD.c: 83:  unsigned char a
      +                          ux;;LCD.c: 84:  LATDbits.LATD0 = 1;
  2229   000DA2  808C               	bsf	140,0,c	;volatile
  2230   000DA4                     
  2231                           ;LCD.c: 85:  LEER_LCD();
  2232   000DA4  ECDF  F004         	call	i2_LEER_LCD	;wreg free
  2233   000DA8                     
  2234                           ;LCD.c: 86:  TRISD = 0x00;
  2235   000DA8  0E00               	movlw	0
  2236   000DAA  6E95               	movwf	149,c	;volatile
  2237   000DAC                     
  2238                           ;LCD.c: 87:     _delay((unsigned long)((100)*(4000000UL/4000000.0)));
  2239   000DAC  0E21               	movlw	33
  2240   000DAE                     i2u54_47:
  2241   000DAE  2EE8               	decfsz	wreg,f,c
  2242   000DB0  D7FE               	bra	i2u54_47
  2243   000DB2  F000               	nop	
  2244   000DB4                     
  2245                           ;LCD.c: 88:  LATDbits.LATD1 = 0;
  2246   000DB4  928C               	bcf	140,1,c	;volatile
  2247   000DB6                     
  2248                           ;LCD.c: 89:  LATDbits.LATD2 = 0;
  2249   000DB6  948C               	bcf	140,2,c	;volatile
  2250   000DB8                     
  2251                           ;LCD.c: 90:  LATDbits.LATD0 = 1;
  2252   000DB8  808C               	bsf	140,0,c	;volatile
  2253   000DBA                     
  2254                           ;LCD.c: 91:  aux = dato & 0xF0;
  2255   000DBA  5002               	movf	i2ENVIA_CHAR@dato^0,w,c
  2256   000DBC  0BF0               	andlw	240
  2257   000DBE  6E03               	movwf	i2ENVIA_CHAR@aux^0,c
  2258   000DC0                     
  2259                           ;LCD.c: 92:  ENVIA_NIBBLE(aux);
  2260   000DC0  5003               	movf	i2ENVIA_CHAR@aux^0,w,c
  2261   000DC2  EC37  F007         	call	i2_ENVIA_NIBBLE
  2262   000DC6                     
  2263                           ;LCD.c: 93:  aux = dato << 4;
  2264   000DC6  3802               	swapf	i2ENVIA_CHAR@dato^0,w,c
  2265   000DC8  0BF0               	andlw	240
  2266   000DCA  6E03               	movwf	i2ENVIA_CHAR@aux^0,c
  2267   000DCC                     
  2268                           ;LCD.c: 94:  ENVIA_NIBBLE(aux);
  2269   000DCC  5003               	movf	i2ENVIA_CHAR@aux^0,w,c
  2270   000DCE  EC37  F007         	call	i2_ENVIA_NIBBLE
  2271   000DD2  0012               	return		;funcret
  2272   000DD4                     __end_ofi2_ENVIA_CHAR:
  2273                           	callstack 0
  2274                           
  2275 ;; *************** function i2_LEER_LCD *****************
  2276 ;; Defined at:
  2277 ;;		line 145 in file "LCD.c"
  2278 ;; Parameters:    Size  Location     Type
  2279 ;;		None
  2280 ;; Auto vars:     Size  Location     Type
  2281 ;;  aux             1    0[COMRAM] unsigned char 
  2282 ;; Return value:  Size  Location     Type
  2283 ;;                  1    wreg      void 
  2284 ;; Registers used:
  2285 ;;		wreg, status,2, status,0
  2286 ;; Tracked objects:
  2287 ;;		On entry : 0/0
  2288 ;;		On exit  : 0/0
  2289 ;;		Unchanged: 0/0
  2290 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2291 ;;      Params:         0       0       0       0       0       0       0       0       0
  2292 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2293 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2294 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2295 ;;Total ram usage:        1 bytes
  2296 ;; Hardware stack levels used: 1
  2297 ;; This function calls:
  2298 ;;		Nothing
  2299 ;; This function is called by:
  2300 ;;		i2_ENVIA_CHAR
  2301 ;;		i2_ENVIA_LCD_CMD
  2302 ;; This function uses a non-reentrant model
  2303 ;;
  2304                           
  2305                           	psect	text23
  2306   0009BE                     __ptext23:
  2307                           	callstack 0
  2308   0009BE                     i2_LEER_LCD:
  2309                           	callstack 22
  2310   0009BE                     
  2311                           ;LCD.c: 147:  unsigned char aux;;LCD.c: 148:  TRISD = 0xF8;
  2312   0009BE  0EF8               	movlw	248
  2313   0009C0  6E95               	movwf	149,c	;volatile
  2314   0009C2                     
  2315                           ;LCD.c: 149:  LATDbits.LATD0 = 0;
  2316   0009C2  908C               	bcf	140,0,c	;volatile
  2317   0009C4                     
  2318                           ;LCD.c: 150:  LATDbits.LATD1 = 1;
  2319   0009C4  828C               	bsf	140,1,c	;volatile
  2320   0009C6                     
  2321                           ;LCD.c: 151:  LATDbits.LATD2 = 1;
  2322   0009C6  848C               	bsf	140,2,c	;volatile
  2323   0009C8                     
  2324                           ;LCD.c: 152:     _delay((unsigned long)((100)*(4000000UL/4000000.0)));
  2325   0009C8  0E21               	movlw	33
  2326   0009CA                     i2u55_47:
  2327   0009CA  2EE8               	decfsz	wreg,f,c
  2328   0009CC  D7FE               	bra	i2u55_47
  2329   0009CE  F000               	nop	
  2330   0009D0                     
  2331                           ;LCD.c: 153:  aux = PORTD;
  2332   0009D0  CF83 F001          	movff	3971,i2LEER_LCD@aux	;volatile
  2333   0009D4                     
  2334                           ;LCD.c: 154:  LATDbits.LATD2 = 0;
  2335   0009D4  948C               	bcf	140,2,c	;volatile
  2336   0009D6                     
  2337                           ;LCD.c: 155:     _delay((unsigned long)((100)*(4000000UL/4000000.0)));
  2338   0009D6  0E21               	movlw	33
  2339   0009D8                     i2u56_47:
  2340   0009D8  2EE8               	decfsz	wreg,f,c
  2341   0009DA  D7FE               	bra	i2u56_47
  2342   0009DC  F000               	nop	
  2343   0009DE                     
  2344                           ;LCD.c: 156:  LATDbits.LATD2 = 1;
  2345   0009DE  848C               	bsf	140,2,c	;volatile
  2346   0009E0                     
  2347                           ;LCD.c: 157:     _delay((unsigned long)((100)*(4000000UL/4000000.0)));
  2348   0009E0  0E21               	movlw	33
  2349   0009E2                     i2u57_47:
  2350   0009E2  2EE8               	decfsz	wreg,f,c
  2351   0009E4  D7FE               	bra	i2u57_47
  2352   0009E6  F000               	nop	
  2353   0009E8                     
  2354                           ;LCD.c: 158:  LATDbits.LATD2 = 0;
  2355   0009E8  948C               	bcf	140,2,c	;volatile
  2356   0009EA                     i2l1274:
  2357                           
  2358                           ;LCD.c: 159:  aux = aux & 0x80;
  2359   0009EA  5001               	movf	i2LEER_LCD@aux^0,w,c
  2360   0009EC  0B80               	andlw	128
  2361   0009EE  6E01               	movwf	i2LEER_LCD@aux^0,c
  2362                           
  2363                           ;LCD.c: 160:  while(aux == 0x80)
  2364   0009F0  EF0E  F005         	goto	i2l1288
  2365   0009F4                     i2l87:
  2366                           
  2367                           ;LCD.c: 161:         {;LCD.c: 162:             LATDbits.LATD2 = 1;
  2368   0009F4  848C               	bsf	140,2,c	;volatile
  2369   0009F6                     
  2370                           ;LCD.c: 163:             _delay((unsigned long)((100)*(4000000UL/4000000.0)));
  2371   0009F6  0E21               	movlw	33
  2372   0009F8                     i2u58_47:
  2373   0009F8  2EE8               	decfsz	wreg,f,c
  2374   0009FA  D7FE               	bra	i2u58_47
  2375   0009FC  F000               	nop	
  2376   0009FE                     
  2377                           ;LCD.c: 164:             aux = PORTD;
  2378   0009FE  CF83 F001          	movff	3971,i2LEER_LCD@aux	;volatile
  2379   000A02                     
  2380                           ;LCD.c: 165:             LATDbits.LATD2 = 0;
  2381   000A02  948C               	bcf	140,2,c	;volatile
  2382                           
  2383                           ;LCD.c: 166:             _delay((unsigned long)((100)*(4000000UL/4000000.0)));
  2384   000A04  0E21               	movlw	33
  2385   000A06                     i2u59_47:
  2386   000A06  2EE8               	decfsz	wreg,f,c
  2387   000A08  D7FE               	bra	i2u59_47
  2388   000A0A  F000               	nop	
  2389   000A0C                     
  2390                           ;LCD.c: 167:             LATDbits.LATD2 = 1;
  2391   000A0C  848C               	bsf	140,2,c	;volatile
  2392                           
  2393                           ;LCD.c: 168:             _delay((unsigned long)((100)*(4000000UL/4000000.0)));
  2394   000A0E  0E21               	movlw	33
  2395   000A10                     i2u60_47:
  2396   000A10  2EE8               	decfsz	wreg,f,c
  2397   000A12  D7FE               	bra	i2u60_47
  2398   000A14  F000               	nop	
  2399   000A16                     
  2400                           ;LCD.c: 169:             LATDbits.LATD2 = 0;
  2401   000A16  948C               	bcf	140,2,c	;volatile
  2402   000A18  EFF5  F004         	goto	i2l1274
  2403   000A1C                     i2l1288:
  2404                           
  2405                           ;LCD.c: 160:  while(aux == 0x80)
  2406   000A1C  0E80               	movlw	128
  2407   000A1E  1801               	xorwf	i2LEER_LCD@aux^0,w,c
  2408   000A20  B4D8               	btfsc	status,2,c
  2409   000A22  EF15  F005         	goto	i2u25_41
  2410   000A26  EF17  F005         	goto	i2u25_40
  2411   000A2A                     i2u25_41:
  2412   000A2A  EFFA  F004         	goto	i2l87
  2413   000A2E                     i2u25_40:
  2414   000A2E  0012               	return		;funcret
  2415   000A30                     __end_ofi2_LEER_LCD:
  2416                           	callstack 0
  2417                           
  2418 ;; *************** function i2_ENVIA_NIBBLE *****************
  2419 ;; Defined at:
  2420 ;;		line 119 in file "LCD.c"
  2421 ;; Parameters:    Size  Location     Type
  2422 ;;  dato            1    wreg     unsigned char 
  2423 ;; Auto vars:     Size  Location     Type
  2424 ;;  dato            1    0[COMRAM] unsigned char 
  2425 ;; Return value:  Size  Location     Type
  2426 ;;                  1    wreg      void 
  2427 ;; Registers used:
  2428 ;;		wreg, status,2, status,0
  2429 ;; Tracked objects:
  2430 ;;		On entry : 0/0
  2431 ;;		On exit  : 0/0
  2432 ;;		Unchanged: 0/0
  2433 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2434 ;;      Params:         0       0       0       0       0       0       0       0       0
  2435 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2436 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2437 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2438 ;;Total ram usage:        1 bytes
  2439 ;; Hardware stack levels used: 1
  2440 ;; This function calls:
  2441 ;;		Nothing
  2442 ;; This function is called by:
  2443 ;;		i2_ENVIA_CHAR
  2444 ;;		i2_ENVIA_LCD_CMD
  2445 ;; This function uses a non-reentrant model
  2446 ;;
  2447                           
  2448                           	psect	text24
  2449   000E6E                     __ptext24:
  2450                           	callstack 0
  2451   000E6E                     i2_ENVIA_NIBBLE:
  2452                           	callstack 22
  2453                           
  2454                           ;incstack = 0
  2455                           ;i2ENVIA_NIBBLE@dato stored from wreg
  2456   000E6E  6E01               	movwf	i2ENVIA_NIBBLE@dato^0,c
  2457   000E70                     
  2458                           ;LCD.c: 119: void ENVIA_NIBBLE(unsigned char dato);LCD.c: 120: {;LCD.c: 121:  LATD &= 0x
      +                          0F;
  2459   000E70  0E0F               	movlw	15
  2460   000E72  168C               	andwf	140,f,c	;volatile
  2461                           
  2462                           ;LCD.c: 122:  dato &= 0xF0;
  2463   000E74  0EF0               	movlw	240
  2464   000E76  1601               	andwf	i2ENVIA_NIBBLE@dato^0,f,c
  2465                           
  2466                           ;LCD.c: 123:  LATD|= dato;
  2467   000E78  5001               	movf	i2ENVIA_NIBBLE@dato^0,w,c	;volatile
  2468   000E7A  128C               	iorwf	140,f,c	;volatile
  2469   000E7C                     
  2470                           ;LCD.c: 124:  LATDbits.LATD2 = 1;
  2471   000E7C  848C               	bsf	140,2,c	;volatile
  2472   000E7E                     
  2473                           ;LCD.c: 125:     _delay((unsigned long)((100)*(4000000UL/4000000.0)));
  2474   000E7E  0E21               	movlw	33
  2475   000E80                     i2u61_47:
  2476   000E80  2EE8               	decfsz	wreg,f,c
  2477   000E82  D7FE               	bra	i2u61_47
  2478   000E84  F000               	nop	
  2479   000E86                     
  2480                           ;LCD.c: 126:  LATDbits.LATD2 = 0;
  2481   000E86  948C               	bcf	140,2,c	;volatile
  2482   000E88  0012               	return		;funcret
  2483   000E8A                     __end_ofi2_ENVIA_NIBBLE:
  2484                           	callstack 0
  2485                           
  2486                           	psect	rparam
  2487   000000                     
  2488                           	psect	temp
  2489   000024                     btemp:
  2490                           	callstack 0
  2491   000024                     	ds	1
  2492   000000                     int$flags	set	btemp
  2493   000000                     wtemp8	set	btemp+1
  2494   000000                     ttemp5	set	btemp+1
  2495   000000                     ttemp6	set	btemp+4
  2496   000000                     ttemp7	set	btemp+8
  2497                           
  2498                           	psect	idloc
  2499                           
  2500                           ;Config register IDLOC0 @ 0x200000
  2501                           ;	unspecified, using default values
  2502   200000                     	org	2097152
  2503   200000  FF                 	db	255
  2504                           
  2505                           ;Config register IDLOC1 @ 0x200001
  2506                           ;	unspecified, using default values
  2507   200001                     	org	2097153
  2508   200001  FF                 	db	255
  2509                           
  2510                           ;Config register IDLOC2 @ 0x200002
  2511                           ;	unspecified, using default values
  2512   200002                     	org	2097154
  2513   200002  FF                 	db	255
  2514                           
  2515                           ;Config register IDLOC3 @ 0x200003
  2516                           ;	unspecified, using default values
  2517   200003                     	org	2097155
  2518   200003  FF                 	db	255
  2519                           
  2520                           ;Config register IDLOC4 @ 0x200004
  2521                           ;	unspecified, using default values
  2522   200004                     	org	2097156
  2523   200004  FF                 	db	255
  2524                           
  2525                           ;Config register IDLOC5 @ 0x200005
  2526                           ;	unspecified, using default values
  2527   200005                     	org	2097157
  2528   200005  FF                 	db	255
  2529                           
  2530                           ;Config register IDLOC6 @ 0x200006
  2531                           ;	unspecified, using default values
  2532   200006                     	org	2097158
  2533   200006  FF                 	db	255
  2534                           
  2535                           ;Config register IDLOC7 @ 0x200007
  2536                           ;	unspecified, using default values
  2537   200007                     	org	2097159
  2538   200007  FF                 	db	255
  2539                           
  2540                           	psect	config
  2541                           
  2542                           ;Config register CONFIG1L @ 0x300000
  2543                           ;	PLL Selection
  2544                           ;	PLLSEL = PLL4X, 4x clock multiplier
  2545                           ;	PLL Enable Configuration bit
  2546                           ;	CFGPLLEN = OFF, PLL Disabled (firmware controlled)
  2547                           ;	CPU System Clock Postscaler
  2548                           ;	CPUDIV = NOCLKDIV, CPU uses system clock (no divide)
  2549                           ;	Low Speed USB mode with 48 MHz system clock
  2550                           ;	LS48MHZ = SYS24X4, System clock at 24 MHz, USB clock divider is set to 4
  2551   300000                     	org	3145728
  2552   300000  00                 	db	0
  2553                           
  2554                           ;Config register CONFIG1H @ 0x300001
  2555                           ;	Oscillator Selection
  2556                           ;	FOSC = INTOSCIO, Internal oscillator
  2557                           ;	Primary Oscillator Shutdown
  2558                           ;	PCLKEN = OFF, Primary oscillator shutdown firmware controlled
  2559                           ;	Fail-Safe Clock Monitor
  2560                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
  2561                           ;	Internal/External Oscillator Switchover
  2562                           ;	IESO = OFF, Oscillator Switchover mode disabled
  2563   300001                     	org	3145729
  2564   300001  08                 	db	8
  2565                           
  2566                           ;Config register CONFIG2L @ 0x300002
  2567                           ;	Power-up Timer Enable
  2568                           ;	nPWRTEN = ON, Power up timer enabled
  2569                           ;	Brown-out Reset Enable
  2570                           ;	BOREN = OFF, BOR disabled in hardware (SBOREN is ignored)
  2571                           ;	Brown-out Reset Voltage
  2572                           ;	BORV = 190, BOR set to 1.9V nominal
  2573                           ;	Low-Power Brown-out Reset
  2574                           ;	nLPBOR = OFF, Low-Power Brown-out Reset disabled
  2575   300002                     	org	3145730
  2576   300002  58                 	db	88
  2577                           
  2578                           ;Config register CONFIG2H @ 0x300003
  2579                           ;	Watchdog Timer Enable bits
  2580                           ;	WDTEN = OFF, WDT disabled in hardware (SWDTEN ignored)
  2581                           ;	Watchdog Timer Postscaler
  2582                           ;	WDTPS = 32768, 1:32768
  2583   300003                     	org	3145731
  2584   300003  3C                 	db	60
  2585                           
  2586                           ; Padding undefined space
  2587   300004                     	org	3145732
  2588   300004  FF                 	db	255
  2589                           
  2590                           ;Config register CONFIG3H @ 0x300005
  2591                           ;	CCP2 MUX bit
  2592                           ;	CCP2MX = RC1, CCP2 input/output is multiplexed with RC1
  2593                           ;	PORTB A/D Enable bit
  2594                           ;	PBADEN = OFF, PORTB<5:0> pins are configured as digital I/O on Reset
  2595                           ;	Timer3 Clock Input MUX bit
  2596                           ;	T3CMX = RC0, T3CKI function is on RC0
  2597                           ;	SDO Output MUX bit
  2598                           ;	SDOMX = RB3, SDO function is on RB3
  2599                           ;	Master Clear Reset Pin Enable
  2600                           ;	MCLRE = ON, MCLR pin enabled; RE3 input disabled
  2601   300005                     	org	3145733
  2602   300005  D1                 	db	209
  2603                           
  2604                           ;Config register CONFIG4L @ 0x300006
  2605                           ;	Stack Full/Underflow Reset
  2606                           ;	STVREN = ON, Stack full/underflow will cause Reset
  2607                           ;	Single-Supply ICSP Enable bit
  2608                           ;	LVP = OFF, Single-Supply ICSP disabled
  2609                           ;	Dedicated In-Circuit Debug/Programming Port Enable
  2610                           ;	ICPRT = OFF, ICPORT disabled
  2611                           ;	Extended Instruction Set Enable bit
  2612                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled
  2613                           ;	Background Debugger Enable bit
  2614                           ;	DEBUG = 0x1, unprogrammed default
  2615   300006                     	org	3145734
  2616   300006  81                 	db	129
  2617                           
  2618                           ; Padding undefined space
  2619   300007                     	org	3145735
  2620   300007  FF                 	db	255
  2621                           
  2622                           ;Config register CONFIG5L @ 0x300008
  2623                           ;	Block 0 Code Protect
  2624                           ;	CP0 = OFF, Block 0 is not code-protected
  2625                           ;	Block 1 Code Protect
  2626                           ;	CP1 = OFF, Block 1 is not code-protected
  2627                           ;	Block 2 Code Protect
  2628                           ;	CP2 = OFF, Block 2 is not code-protected
  2629                           ;	Block 3 Code Protect
  2630                           ;	CP3 = OFF, Block 3 is not code-protected
  2631   300008                     	org	3145736
  2632   300008  0F                 	db	15
  2633                           
  2634                           ;Config register CONFIG5H @ 0x300009
  2635                           ;	Boot Block Code Protect
  2636                           ;	CPB = OFF, Boot block is not code-protected
  2637                           ;	Data EEPROM Code Protect
  2638                           ;	CPD = OFF, Data EEPROM is not code-protected
  2639   300009                     	org	3145737
  2640   300009  C0                 	db	192
  2641                           
  2642                           ;Config register CONFIG6L @ 0x30000A
  2643                           ;	Block 0 Write Protect
  2644                           ;	WRT0 = OFF, Block 0 (0800-1FFFh) is not write-protected
  2645                           ;	Block 1 Write Protect
  2646                           ;	WRT1 = OFF, Block 1 (2000-3FFFh) is not write-protected
  2647                           ;	Block 2 Write Protect
  2648                           ;	WRT2 = OFF, Block 2 (04000-5FFFh) is not write-protected
  2649                           ;	Block 3 Write Protect
  2650                           ;	WRT3 = OFF, Block 3 (06000-7FFFh) is not write-protected
  2651   30000A                     	org	3145738
  2652   30000A  0F                 	db	15
  2653                           
  2654                           ;Config register CONFIG6H @ 0x30000B
  2655                           ;	Configuration Registers Write Protect
  2656                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) are not write-protected
  2657                           ;	Boot Block Write Protect
  2658                           ;	WRTB = OFF, Boot block (0000-7FFh) is not write-protected
  2659                           ;	Data EEPROM Write Protect
  2660                           ;	WRTD = OFF, Data EEPROM is not write-protected
  2661   30000B                     	org	3145739
  2662   30000B  E0                 	db	224
  2663                           
  2664                           ;Config register CONFIG7L @ 0x30000C
  2665                           ;	Block 0 Table Read Protect
  2666                           ;	EBTR0 = OFF, Block 0 is not protected from table reads executed in other blocks
  2667                           ;	Block 1 Table Read Protect
  2668                           ;	EBTR1 = OFF, Block 1 is not protected from table reads executed in other blocks
  2669                           ;	Block 2 Table Read Protect
  2670                           ;	EBTR2 = OFF, Block 2 is not protected from table reads executed in other blocks
  2671                           ;	Block 3 Table Read Protect
  2672                           ;	EBTR3 = OFF, Block 3 is not protected from table reads executed in other blocks
  2673   30000C                     	org	3145740
  2674   30000C  0F                 	db	15
  2675                           
  2676                           ;Config register CONFIG7H @ 0x30000D
  2677                           ;	Boot Block Table Read Protect
  2678                           ;	EBTRB = OFF, Boot block is not protected from table reads executed in other blocks
  2679   30000D                     	org	3145741
  2680   30000D  40                 	db	64
  2681                           tosu	equ	0xFFF
  2682                           tosh	equ	0xFFE
  2683                           tosl	equ	0xFFD
  2684                           stkptr	equ	0xFFC
  2685                           pclatu	equ	0xFFB
  2686                           pclath	equ	0xFFA
  2687                           pcl	equ	0xFF9
  2688                           tblptru	equ	0xFF8
  2689                           tblptrh	equ	0xFF7
  2690                           tblptrl	equ	0xFF6
  2691                           tablat	equ	0xFF5
  2692                           prodh	equ	0xFF4
  2693                           prodl	equ	0xFF3
  2694                           indf0	equ	0xFEF
  2695                           postinc0	equ	0xFEE
  2696                           postdec0	equ	0xFED
  2697                           preinc0	equ	0xFEC
  2698                           plusw0	equ	0xFEB
  2699                           fsr0h	equ	0xFEA
  2700                           fsr0l	equ	0xFE9
  2701                           wreg	equ	0xFE8
  2702                           indf1	equ	0xFE7
  2703                           postinc1	equ	0xFE6
  2704                           postdec1	equ	0xFE5
  2705                           preinc1	equ	0xFE4
  2706                           plusw1	equ	0xFE3
  2707                           fsr1h	equ	0xFE2
  2708                           fsr1l	equ	0xFE1
  2709                           bsr	equ	0xFE0
  2710                           indf2	equ	0xFDF
  2711                           postinc2	equ	0xFDE
  2712                           postdec2	equ	0xFDD
  2713                           preinc2	equ	0xFDC
  2714                           plusw2	equ	0xFDB
  2715                           fsr2h	equ	0xFDA
  2716                           fsr2l	equ	0xFD9
  2717                           status	equ	0xFD8

Data Sizes:
    Strings     32
    Constant    0
    Data        0
    BSS         7
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     28      35
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    strlen@s	PTR const unsigned char  size(2) Largest target is 13
		 -> STR_3(CODE[13]), STR_2(CODE[9]), STR_1(CODE[10]), 

    strlen@a	PTR const unsigned char  size(2) Largest target is 13
		 -> STR_3(CODE[13]), STR_2(CODE[9]), STR_1(CODE[10]), 

    ESCRIBE_MENSAJE2@cadena	PTR const unsigned char  size(2) Largest target is 13
		 -> STR_3(CODE[13]), STR_2(CODE[9]), STR_1(CODE[10]), 


Critical Paths under _main in COMRAM

    _main->_convierte
    _convierte->___lwdiv
    ___lwdiv->___lwmod
    _configuro->_LCD_INIT
    _LCD_INIT->_CURSOR_ONOFF
    _LCD_INIT->_LCD_CONFIG
    _LCD_CONFIG->_ENVIA_LCD_CMD
    _CURSOR_ONOFF->_ENVIA_LCD_CMD
    _CURSOR_HOME->_ENVIA_LCD_CMD
    _BORRAR_LCD->_ENVIA_LCD_CMD
    _POS_CURSOR->_ENVIA_LCD_CMD
    _ENVIA_LCD_CMD->_ENVIA_NIBBLE
    _ENVIA_LCD_CMD->_LEER_LCD
    _ESCRIBE_MENSAJE2->_strlen
    _ENVIA_CHAR->_ENVIA_NIBBLE
    _ENVIA_CHAR->_LEER_LCD

Critical Paths under _INT_CCP2 in COMRAM

    _INT_CCP2->i2_ESCRIBE_MENSAJE2
    i2_POS_CURSOR->i2_ENVIA_LCD_CMD
    i2_ENVIA_LCD_CMD->i2_ENVIA_NIBBLE
    i2_ENVIA_LCD_CMD->i2_LEER_LCD
    i2_ESCRIBE_MENSAJE2->i2_strlen
    i2_ENVIA_CHAR->i2_ENVIA_NIBBLE
    i2_ENVIA_CHAR->i2_LEER_LCD

Critical Paths under _main in BANK0

    None.

Critical Paths under _INT_CCP2 in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INT_CCP2 in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INT_CCP2 in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INT_CCP2 in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INT_CCP2 in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INT_CCP2 in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INT_CCP2 in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INT_CCP2 in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    3380
                         _ENVIA_CHAR
                   _ESCRIBE_MENSAJE2
                         _POS_CURSOR
                          _configuro
                          _convierte
 ---------------------------------------------------------------------------------
 (1) _convierte                                            2     0      2    1723
                                             26 COMRAM     2     0      2
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     767
                                             14 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     770
                                             19 COMRAM     7     3      4
                            ___lwmod (ARG)
 ---------------------------------------------------------------------------------
 (1) _configuro                                            0     0      0     525
                           _LCD_INIT
 ---------------------------------------------------------------------------------
 (2) _LCD_INIT                                             1     1      0     525
                                             18 COMRAM     1     1      0
                         _BORRAR_LCD
                        _CURSOR_HOME
                       _CURSOR_ONOFF
                         _LCD_CONFIG
 ---------------------------------------------------------------------------------
 (3) _LCD_CONFIG                                           1     1      0     135
                                             17 COMRAM     1     1      0
                      _ENVIA_LCD_CMD
                       _ENVIA_NIBBLE
 ---------------------------------------------------------------------------------
 (3) _CURSOR_ONOFF                                         1     1      0     150
                                             17 COMRAM     1     1      0
                      _ENVIA_LCD_CMD
 ---------------------------------------------------------------------------------
 (3) _CURSOR_HOME                                          0     0      0     120
                      _ENVIA_LCD_CMD
 ---------------------------------------------------------------------------------
 (3) _BORRAR_LCD                                           0     0      0     120
                      _ENVIA_LCD_CMD
 ---------------------------------------------------------------------------------
 (1) _POS_CURSOR                                           2     1      1     410
                                             17 COMRAM     2     1      1
                      _ENVIA_LCD_CMD
 ---------------------------------------------------------------------------------
 (4) _ENVIA_LCD_CMD                                        2     2      0     120
                                             15 COMRAM     2     2      0
                       _ENVIA_NIBBLE
                           _LEER_LCD
 ---------------------------------------------------------------------------------
 (1) _ESCRIBE_MENSAJE2                                     6     4      2     602
                                             18 COMRAM     6     4      2
                         _ENVIA_CHAR
                             _strlen
 ---------------------------------------------------------------------------------
 (2) _strlen                                               4     2      2     166
                                             14 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (2) _ENVIA_CHAR                                           2     2      0     120
                                             15 COMRAM     2     2      0
                       _ENVIA_NIBBLE
                           _LEER_LCD
 ---------------------------------------------------------------------------------
 (5) _LEER_LCD                                             1     1      0      45
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _ENVIA_NIBBLE                                         1     1      0      15
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _INT_CCP2                                             4     4      0     736
                                             10 COMRAM     4     4      0
                 i2_ESCRIBE_MENSAJE2
                       i2_POS_CURSOR
 ---------------------------------------------------------------------------------
 (7) i2_POS_CURSOR                                         2     1      1     297
                                              3 COMRAM     2     1      1
                    i2_ENVIA_LCD_CMD
 ---------------------------------------------------------------------------------
 (8) i2_ENVIA_LCD_CMD                                      2     2      0     183
                                              1 COMRAM     2     2      0
                     i2_ENVIA_NIBBLE
                         i2_LEER_LCD
 ---------------------------------------------------------------------------------
 (7) i2_ESCRIBE_MENSAJE2                                   6     4      2     439
                                              4 COMRAM     6     4      2
                       i2_ENVIA_CHAR
                           i2_strlen
 ---------------------------------------------------------------------------------
 (8) i2_strlen                                             4     2      2     116
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (8) i2_ENVIA_CHAR                                         2     2      0     183
                                              1 COMRAM     2     2      0
                     i2_ENVIA_NIBBLE
                         i2_LEER_LCD
 ---------------------------------------------------------------------------------
 (9) i2_LEER_LCD                                           1     1      0      70
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (9) i2_ENVIA_NIBBLE                                       1     1      0      23
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ENVIA_CHAR
     _ENVIA_NIBBLE
     _LEER_LCD
   _ESCRIBE_MENSAJE2
     _ENVIA_CHAR
     _strlen
   _POS_CURSOR
     _ENVIA_LCD_CMD
       _ENVIA_NIBBLE
       _LEER_LCD
   _configuro
     _LCD_INIT
       _BORRAR_LCD
         _ENVIA_LCD_CMD
       _CURSOR_HOME
         _ENVIA_LCD_CMD
       _CURSOR_ONOFF
         _ENVIA_LCD_CMD
       _LCD_CONFIG
         _ENVIA_LCD_CMD
         _ENVIA_NIBBLE
   _convierte
     ___lwdiv
       ___lwmod (ARG)
     ___lwmod

 _INT_CCP2 (ROOT)
   i2_ESCRIBE_MENSAJE2
     i2_ENVIA_CHAR
       i2_ENVIA_NIBBLE
       i2_LEER_LCD
     i2_strlen
   i2_POS_CURSOR
     i2_ENVIA_LCD_CMD
       i2_ENVIA_NIBBLE
       i2_LEER_LCD

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      33        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     1C      23       1       37.2%
BITBIGSFRllh        24      0       0      29        0.0%
BITBIGSFRhhlh       1F      0       0      22        0.0%
BITBIGSFRhhhl       1E      0       0      21        0.0%
BITBIGSFRhhllhh      F      0       0      23        0.0%
BITBIGSFRhhhh        D      0       0      20        0.0%
BITBIGSFRhhllhl      8      0       0      24        0.0%
BITBIGSFRlh          8      0       0      28        0.0%
BITBIGSFRllll        6      0       0      31        0.0%
BITBIGSFRlllh        4      0       0      30        0.0%
BITBIGSFRhll         3      0       0      27        0.0%
BITBIGSFRhlh         2      0       0      26        0.0%
BITBIGSFRhhlll       1      0       0      25        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      23      32        0.0%
DATA                 0      0      23       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.41 build 20230208172133 
Symbol Table                                                                                   Tue Jun 13 22:23:18 2023

                        l26 0C1E                          l71 0D6A                          l39 0E90  
                        l80 0E6C                          l56 0E32                          l74 0E98  
                        l83 0D36                          l68 0B9A                          l77 0B50  
                        l87 0982                          l89 09BC                          l97 0E02  
                        u10 09BC                          u11 09B8                          u20 0E16  
                        u21 0E12                          u30 0E2C                          u31 0E28  
             ENVIA_CHAR@aux 0011                         l146 0D02                         l149 08D6  
                       l900 0D1A                         l910 0D30                         l902 0D1C  
                       l663 094A                         l904 0D1E                         l912 0E8A  
                       l920 0E2C                         l656 0942                         l673 0AFE  
                       l850 0954                         l842 0C58                         l906 0D24  
                       l922 0E92                         l914 0E06                         l930 0B18  
                       l666 0AF6                         l860 096C                         l852 0956  
                       l844 094C                         l908 0D2A                         l916 0E16  
                       l940 0B3E                         l932 0B26                         l924 0B00  
                       l870 098C                         l862 096E                         l854 095E  
                       l846 0950                         l918 0E1C                         l942 0B44  
                       l934 0B2C                         l926 0B04                         l872 0990  
                       l880 09AA                         l864 0976                         l856 0962  
                       l848 0952                         l944 0B4A                         l936 0B32  
                       l928 0B0A                         l882 0E54                         l874 099A  
                       l866 0978                         l858 0964                         l890 0D06  
                       l938 0B38                         l884 0E60                         l876 09A4  
                       l868 0984                         l892 0D08                         l886 0E62  
                       l894 0D0C                         l888 0E6A                         l992 0D3A  
                       l896 0D10                         l994 0D3C                         l898 0D18  
                       l996 0D40                         l998 0D44                         u300 0AAE  
                       u301 0AAA                         u310 0ACC                         u311 0AC8  
                       u320 0AE2                         u321 0ADE                         u260 0C4C  
                       u340 0BF8                         u261 0C48                         u341 0BF4  
                       u350 0C16                         u270 08F2                         u351 0C12  
                       u407 0DDA                         u271 08EE                         u360 0B9A  
                       u280 0910                         u361 0B96                         u417 0DEC  
                       u281 090C                         u290 092C                         u507 0994  
                       u427 0B10                         u291 0928                         u517 099E  
                       u437 0B20                         u527 0E64                         u447 0D12  
                       u457 0D46                         u467 0958                         u477 0966  
                       u487 0970                         u497 0986                 LEER_LCD@aux 000F  
                       wreg 0FE8            ??i2_ENVIA_NIBBLE 0001                ?_CURSOR_HOME 0001  
            ??_ENVIA_NIBBLE 000F              ENVIA_CHAR@dato 0010                        l1000 0D4C  
                      l1010 0D5E                        l1002 0D4E                        l1012 0D64  
                      l1004 0D50                        l1006 0D52                        l1008 0D58  
                      l1024 0DD4                        l1026 0DE2                        l1028 0DE6  
                      l1300 08D8                        l1150 0CF0                        l1142 0CCE  
                      l1310 0910                        l1302 08E0                        l1400 0B52  
                      l1152 0CF2                        l1144 0CDC                        l1320 093C  
                      l1312 0916                        l1304 08F2                        l1410 0B88  
                      l1402 0B62                        l1154 0CFC                        l1146 0CE6  
                      l1314 092C                        l1306 08FA                        l1330 0ACC  
                      l1322 0A9C                        l1404 0B62                        l1156 0CFE  
                      l1148 0CEE                        l1316 0934                        l1308 0902  
                      l1332 0AE2                        l1324 0AAE                        l1412 0822  
                      l1406 0B6A                        l1318 0936                        l1334 0AEA  
                      l1326 0AB6                        l1408 0B86                        l1336 0AF0  
                      l1328 0ABE                        l1440 0A54                        l1290 0C20  
                      l1442 0A60                        l1434 0A30                        l1292 0C2C  
                      l1436 0A3E                        l1294 0C30                        l1438 0A4A  
                      l1296 0C4C                        l1392 0BE8                        l1394 0BF8  
                      l1396 0C04                        l1398 0C16                        STR_1 080E  
                      STR_2 0818                        STR_3 0801                        _LATD 0F8C  
                      i2l26 0C92                        i2l71 0DD2                        i2l80 0E88  
                      i2l83 0D9E                        i2l68 0BE4                        i2l87 09F4  
                      i2l89 0A2E                        _TMR3 0FB2                 ?i2_LEER_LCD 0001  
                      _main 0A30                        btemp 0024           ??i2_ENVIA_LCD_CMD 0002  
                      start 0046               ?_CURSOR_ONOFF 0001                ___param_bank 0000  
           ??_ENVIA_LCD_CMD 0010            __end_of_LCD_INIT 0E04            __end_of_LEER_LCD 09BE  
                     ?_main 0001            __end_of_INT_CCP2 0046                       _CCPR2 0F90  
                     _T3CON 0FB1             __end_of___lwdiv 094C             __end_of___lwmod 0B00  
                     i2l162 0032                       i2l842 0CCC                       _PORTD 0F83  
                     _TRISD 0F95                       _count 001D                 ?_POS_CURSOR 0012  
                     tablat 0FF5                       ttemp5 0025                       ttemp6 0028  
                     ttemp7 002C                       status 0FD8                       wtemp8 0025  
            ??_CURSOR_ONOFF 0012            __end_ofi2_strlen 0CCE             __initialization 0E34  
              __end_of_main 0A9C    i2ESCRIBE_MENSAJE2@cadena 0005                      ??_main 001D  
             __activetblptr 0001                      _ANSELD 0F5E                      i2l1250 0E86  
                    i2l1244 0E70                      i2l1260 09C8                      i2l1252 09BE  
                    i2l1340 0DA4                      i2l1420 0C8A                      i2l1246 0E7C  
                    i2l1270 09E0                      i2l1262 09D0                      i2l1254 09C2  
                    i2l1350 0DB8                      i2l1342 0DA8                      i2l1430 0BD0  
                    i2l1422 0B9C                      i2l1414 0C5C                      i2l1248 0E7E  
                    i2l1280 0A02                      i2l1272 09E8                      i2l1264 09D4  
                    i2l1256 09C4                      i2l1352 0DBA                      i2l1344 0DAC  
                    i2l1432 0BD2                      i2l1424 0BAC                      i2l1360 0D6E  
                    i2l1416 0C6C                      i2l1282 0A0C                      i2l1274 09EA  
                    i2l1266 09D6                      i2l1258 09C6                      i2l1354 0DC0  
                    i2l1346 0DB4                      i2l1338 0DA2                      i2l1426 0BAC  
                    i2l1370 0D82                      i2l1362 0D70                      i2l1418 0C78  
                    i2l1284 0A16                      i2l1276 09F6                      i2l1268 09DE  
                    i2l1356 0DC6                      i2l1348 0DB6                      i2l1428 0BB4  
                    i2l1380 0D98                      i2l1372 0D84                      i2l1364 0D74  
                    i2l1444 001A                      i2l1278 09FE                      i2l1358 0DCC  
                    i2l1382 0C94                      i2l1374 0D86                      i2l1366 0D78  
                    i2l1446 001C                      i2l1288 0A1C                      i2l1384 0CA0  
                    i2l1376 0D8C                      i2l1368 0D80                      i2l1448 0026  
                    i2l1386 0CA4                      i2l1378 0D92                      i2l1388 0CC0  
                    _OSCCON 0FD3         i2ESCRIBE_MENSAJE2@i 000A               ?i2_ENVIA_CHAR 0001  
                    _decena 0020        __end_of_ENVIA_NIBBLE 0E6E                   ??___lwdiv 0018  
                 ??___lwmod 0013                      _millar 0022                      clear_0 0E3A  
                    isa$std 0001                      _unidad 001F                      _strlen 0C20  
              __mediumconst 0000                      tblptrh 0FF7                      tblptrl 0FF6  
                    tblptru 0FF8                ??_BORRAR_LCD 0012                   ?_LCD_INIT 0001  
                 ?_LEER_LCD 0001                  __accesstop 0060     __end_of__initialization 0E40  
              ??_LCD_CONFIG 0012              ??i2_ENVIA_CHAR 0002               ___rparam_used 0001  
              ??_ENVIA_CHAR 0010                   ?_INT_CCP2 0001              __pcstackCOMRAM 0001  
        __end_of_BORRAR_LCD 0E9A         i2ENVIA_LCD_CMD@dato 0002            _ESCRIBE_MENSAJE2 0B52  
          ENVIA_LCD_CMD@aux 0011        __end_of_CURSOR_ONOFF 0E34          __end_of_LCD_CONFIG 0B52  
        __end_of_ENVIA_CHAR 0D6C             i2_ENVIA_LCD_CMD 0D6C                   ?i2_strlen 0001  
             ?i2_POS_CURSOR 0004                  ??_LCD_INIT 0013                ??i2_LEER_LCD 0001  
                ??_LEER_LCD 000F            ENVIA_NIBBLE@dato 000F                  ??_INT_CCP2 000B  
                   _CCP2CON 0F97  __end_ofi2_ESCRIBE_MENSAJE2 0BE6                     ?_strlen 000F  
        __end_ofi2_LEER_LCD 0A30                     i2u25_40 0A2E                     i2u33_40 0CC0  
                   i2u25_41 0A2A                     i2u33_41 0CBC                     i2u60_47 0A10  
                   i2u37_40 0C6C                     i2u37_41 0C68                     i2u61_47 0E80  
                   i2u53_47 0D7A                     i2u38_40 0C8A                     i2u38_41 0C86  
                   i2u54_47 0DAE                     i2u39_40 0BE4                     i2u39_41 0BE0  
                   i2u55_47 09CA                     i2u56_47 09D8                     i2u57_47 09E2  
                   i2u58_47 09F8                     i2u59_47 0A06                  ??i2_strlen 0003  
            ??i2_POS_CURSOR 0005                ??_POS_CURSOR 0013                     __Hparam 0000  
                   __Lparam 0000           __end_of_configuro 0D04                     ___lwdiv 08D8  
                   ___lwmod 0A9C                __psmallconst 0800       __end_of_ENVIA_LCD_CMD 0D38  
         __end_of_convierte 08D8                     _dec_mil 0023                     __pcinit 0E34  
        __end_of_POS_CURSOR 0C20                     __ramtop 0800                     _centena 0021  
                   __ptext0 0A30                     __ptext1 0822                     __ptext2 0A9C  
                   __ptext3 08D8                     __ptext4 0CCE                     __ptext5 0DD4  
                   __ptext6 0B00                     __ptext7 0E04                     __ptext8 0E8A  
                   __ptext9 0E92     __end_ofi2_ENVIA_LCD_CMD 0DA0        __end_ofi2_ENVIA_CHAR 0DD4  
                 _T3CONbits 0FB1             i2ENVIA_CHAR@aux 0003                _ENVIA_NIBBLE 0E52  
      end_of_initialization 0E40                     postinc0 0FEE                     strlen@a 0011  
                   strlen@s 000F           ESCRIBE_MENSAJE2@i 0018                   _TRISCbits 0F94  
  __end_of_ESCRIBE_MENSAJE2 0B9C                _CURSOR_ONOFF 0E04          CURSOR_ONOFF@estado 0012  
      __end_ofi2_POS_CURSOR 0C94            ?i2_ENVIA_LCD_CMD 0001              __end_of_strlen 0C5A  
             ??_CURSOR_HOME 0012         start_initialization 0E34                   i2strlen@a 0003  
                 i2strlen@s 0001           ENVIA_LCD_CMD@dato 0010            i2POS_CURSOR@fila 0005  
               _CCPTMRSbits 0F59                    ??_strlen 0011                 __pbssCOMRAM 001D  
             i2LEER_LCD@aux 0001          i2_ESCRIBE_MENSAJE2 0B9C          i2ENVIA_LCD_CMD@aux 0003  
       __end_of_CURSOR_HOME 0E92              i2_ENVIA_NIBBLE 0E6E         ?i2_ESCRIBE_MENSAJE2 0005  
              i2_ENVIA_CHAR 0DA0            ___lwdiv@dividend 0014          i2ENVIA_NIBBLE@dato 0001  
                 __pintcode 0008                    ?___lwdiv 0014                    ?___lwmod 000F  
                 _configuro 0CCE        ??i2_ESCRIBE_MENSAJE2 0007                 __smallconst 0800  
                 _convierte 0822             convierte@numero 001B         i2POS_CURSOR@columna 0004  
          ___lwdiv@quotient 0018      __end_ofi2_ENVIA_NIBBLE 0E8A                    _LCD_INIT 0DD4  
                  _LEER_LCD 094C                    _LATDbits 0F8C                    _PIE2bits 0FA0  
                  _INT_CCP2 0008                    _PIR2bits 0FA1              POS_CURSOR@fila 0013  
                ?_configuro 0001      ESCRIBE_MENSAJE2@cadena 0013                  ?_convierte 001B  
               _CURSOR_HOME 0E8A       i2ESCRIBE_MENSAJE2@tam 0009                    i2_strlen 0C94  
              i2_POS_CURSOR 0C5A             ?i2_ENVIA_NIBBLE 0001                    __Hrparam 0000  
         ?_ESCRIBE_MENSAJE2 0013                    __Lrparam 0000                __Lsmallconst 0800  
        ??_ESCRIBE_MENSAJE2 0015             ___lwdiv@divisor 0016             ___lwdiv@counter 001A  
                  __ptext10 0BE6                    __ptext11 0D04                    __ptext20 0B9C  
                  __ptext12 0B52                    __ptext21 0C94                    __ptext13 0C20  
                  __ptext22 0DA0                    __ptext14 0D38                    __ptext23 09BE  
                  __ptext15 094C                    __ptext24 0E6E                    __ptext16 0E52  
                  __ptext18 0C5A                    __ptext19 0D6C                  _BORRAR_LCD 0E92  
                _LCD_CONFIG 0B00                  _ENVIA_CHAR 0D38                    isa$xinst 0000  
                  int$flags 0024            i2ENVIA_CHAR@dato 0002               _ENVIA_LCD_CMD 0D04  
               ??_configuro 0014                 ??_convierte 001D                  _INTCONbits 0FF2  
                  intlevel2 0000                  i2_LEER_LCD 09BE            ___lwmod@dividend 000F  
            ?_ENVIA_LCD_CMD 0001             ___lwmod@divisor 0011             ___lwmod@counter 0013  
       ESCRIBE_MENSAJE2@tam 0017                 ?_BORRAR_LCD 0001               ?_ENVIA_NIBBLE 0001  
                _POS_CURSOR 0BE6                 ?_LCD_CONFIG 0001                 ?_ENVIA_CHAR 0001  
         POS_CURSOR@columna 0012  
