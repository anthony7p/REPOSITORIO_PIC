

Microchip MPLAB XC8 Assembler V2.41 build 20230208172133 
                                                                                               Tue Jun 13 17:34:50 2023

Microchip MPLAB XC8 C Compiler v2.41 (Free license) build 20230208172133 Og1 
     1                           	processor	18F45K50
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1
    16                           	psect	text7,global,reloc=2,class=CODE,delta=1
    17                           	psect	text8,global,reloc=2,class=CODE,delta=1
    18                           	psect	text9,global,reloc=2,class=CODE,delta=1
    19                           	psect	text10,global,reloc=2,class=CODE,delta=1
    20                           	psect	text11,global,reloc=2,class=CODE,delta=1
    21                           	psect	text12,global,reloc=2,class=CODE,delta=1
    22                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=2
    23                           	psect	text14,global,reloc=2,class=CODE,delta=1
    24                           	psect	text15,global,reloc=2,class=CODE,delta=1
    25                           	psect	text16,global,reloc=2,class=CODE,delta=1
    26                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    27                           	psect	text18,global,reloc=2,class=CODE,delta=1
    28                           	psect	text19,global,reloc=2,class=CODE,delta=1
    29                           	psect	text20,global,reloc=2,class=CODE,delta=1
    30                           	psect	text21,global,reloc=2,class=CODE,delta=1
    31                           	psect	text22,global,reloc=2,class=CODE,delta=1
    32                           	psect	text23,global,reloc=2,class=CODE,delta=1
    33                           	psect	text24,global,reloc=2,class=CODE,delta=1
    34                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    35                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    36                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    37                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    38                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    39   000000                     
    40                           ; Generated 06/04/2022 GMT
    41                           ; 
    42                           ; Copyright Â© 2022, Microchip Technology Inc. and its subsidiaries ("Microchip")
    43                           ; All rights reserved.
    44                           ; 
    45                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    46                           ; 
    47                           ; Redistribution and use in source and binary forms, with or without modification, are
    48                           ; permitted provided that the following conditions are met:
    49                           ; 
    50                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    51                           ;        conditions and the following disclaimer.
    52                           ; 
    53                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    54                           ;        of conditions and the following disclaimer in the documentation and/or other
    55                           ;        materials provided with the distribution. Publication is not required when
    56                           ;        this file is used in an embedded application.
    57                           ; 
    58                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    59                           ;        software without specific prior written permission.
    60                           ; 
    61                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    62                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    63                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    64                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    65                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    66                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    67                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    68                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    69                           ; 
    70                           ; 
    71                           ; Code-generator required, PIC18F45K50 Definitions
    72                           ; 
    73                           ; SFR Addresses
    74   000000                     _TMR3L	set	4018
    75   000000                     _TMR3H	set	4019
    76   000000                     _TMR3	set	4018
    77   000000                     _T3CONbits	set	4017
    78   000000                     _LATD	set	3980
    79   000000                     _CCPTMRSbits	set	3929
    80   000000                     _ANSELD	set	3934
    81   000000                     _PORTD	set	3971
    82   000000                     _LATDbits	set	3980
    83   000000                     _CCPR2L	set	3984
    84   000000                     _CCPR2H	set	3985
    85   000000                     _TRISCbits	set	3988
    86   000000                     _TRISD	set	3989
    87   000000                     _CCP2CON	set	3991
    88   000000                     _T3CON	set	4017
    89   000000                     _OSCCON	set	4051
    90   000000                     _INTCONbits	set	4082
    91   000000                     _PIE2bits	set	4000
    92   000000                     _PIR2bits	set	4001
    93                           
    94                           	psect	smallconst
    95   000800                     __psmallconst:
    96                           	callstack 0
    97   000800  00                 	db	0
    98   000801                     STR_3:
    99   000801  59                 	db	89	;'Y'
   100   000802  41                 	db	65	;'A'
   101   000803  20                 	db	32
   102   000804  48                 	db	72	;'H'
   103   000805  41                 	db	65	;'A'
   104   000806  59                 	db	89	;'Y'
   105   000807  20                 	db	32
   106   000808  4D                 	db	77	;'M'
   107   000809  41                 	db	65	;'A'
   108   00080A  54                 	db	84	;'T'
   109   00080B  43                 	db	67	;'C'
   110   00080C  48                 	db	72	;'H'
   111   00080D  21                 	db	33
   112   00080E  21                 	db	33
   113   00080F  00                 	db	0
   114   000810                     STR_1:
   115   000810  45                 	db	69	;'E'
   116   000811  53                 	db	83	;'S'
   117   000812  50                 	db	80	;'P'
   118   000813  45                 	db	69	;'E'
   119   000814  52                 	db	82	;'R'
   120   000815  41                 	db	65	;'A'
   121   000816  2E                 	db	46
   122   000817  2E                 	db	46
   123   000818  2E                 	db	46
   124   000819  00                 	db	0
   125   00081A                     STR_2:
   126   00081A  43                 	db	67	;'C'
   127   00081B  55                 	db	85	;'U'
   128   00081C  45                 	db	69	;'E'
   129   00081D  4E                 	db	78	;'N'
   130   00081E  54                 	db	84	;'T'
   131   00081F  41                 	db	65	;'A'
   132   000820  3A                 	db	58	;':'
   133   000821  20                 	db	32
   134   000822  00                 	db	0
   135   000823  00                 	db	0	; dummy byte at the end
   136   000000                     
   137                           ; #config settings
   138                           
   139                           	psect	cinit
   140   000E2C                     __pcinit:
   141                           	callstack 0
   142   000E2C                     start_initialization:
   143                           	callstack 0
   144   000E2C                     __initialization:
   145                           	callstack 0
   146                           
   147                           ; Clear objects allocated to COMRAM (5 bytes)
   148   000E2C  6A21               	clrf	(__pbssCOMRAM+4)& (0+255),c
   149   000E2E  6A20               	clrf	(__pbssCOMRAM+3)& (0+255),c
   150   000E30  6A1F               	clrf	(__pbssCOMRAM+2)& (0+255),c
   151   000E32  6A1E               	clrf	(__pbssCOMRAM+1)& (0+255),c
   152   000E34  6A1D               	clrf	__pbssCOMRAM& (0+255),c
   153   000E36                     end_of_initialization:
   154                           	callstack 0
   155   000E36                     __end_of__initialization:
   156                           	callstack 0
   157   000E36  9022               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   158   000E38  9222               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   159   000E3A  0E00               	movlw	low (__Lsmallconst shr (0+16))
   160   000E3C  6EF8               	movwf	tblptru,c
   161   000E3E  0E08               	movlw	high __Lsmallconst
   162   000E40  6EF7               	movwf	tblptrh,c
   163   000E42  0100               	movlb	0
   164   000E44  EF4B  F005         	goto	_main	;jump to C main() function
   165                           
   166                           	psect	bssCOMRAM
   167   00001D                     __pbssCOMRAM:
   168                           	callstack 0
   169   00001D                     _unidad:
   170                           	callstack 0
   171   00001D                     	ds	1
   172   00001E                     _decena:
   173                           	callstack 0
   174   00001E                     	ds	1
   175   00001F                     _centena:
   176                           	callstack 0
   177   00001F                     	ds	1
   178   000020                     _millar:
   179                           	callstack 0
   180   000020                     	ds	1
   181   000021                     _dec_mil:
   182                           	callstack 0
   183   000021                     	ds	1
   184                           
   185                           	psect	cstackCOMRAM
   186   000001                     __pcstackCOMRAM:
   187                           	callstack 0
   188   000001                     ?i2_strlen:
   189                           	callstack 0
   190   000001                     i2ENVIA_NIBBLE@dato:
   191                           	callstack 0
   192   000001                     i2LEER_LCD@aux:
   193                           	callstack 0
   194   000001                     i2strlen@s:
   195                           	callstack 0
   196                           
   197                           ; 2 bytes @ 0x0
   198   000001                     	ds	1
   199   000002                     i2ENVIA_CHAR@dato:
   200                           	callstack 0
   201   000002                     i2ENVIA_LCD_CMD@dato:
   202                           	callstack 0
   203                           
   204                           ; 1 bytes @ 0x1
   205   000002                     	ds	1
   206   000003                     i2ENVIA_CHAR@aux:
   207                           	callstack 0
   208   000003                     i2ENVIA_LCD_CMD@aux:
   209                           	callstack 0
   210   000003                     i2strlen@a:
   211                           	callstack 0
   212                           
   213                           ; 2 bytes @ 0x2
   214   000003                     	ds	1
   215   000004                     i2POS_CURSOR@columna:
   216                           	callstack 0
   217                           
   218                           ; 1 bytes @ 0x3
   219   000004                     	ds	1
   220   000005                     i2POS_CURSOR@fila:
   221                           	callstack 0
   222   000005                     i2ESCRIBE_MENSAJE2@cadena:
   223                           	callstack 0
   224                           
   225                           ; 2 bytes @ 0x4
   226   000005                     	ds	2
   227   000007                     ??i2_ESCRIBE_MENSAJE2:
   228                           
   229                           ; 1 bytes @ 0x6
   230   000007                     	ds	2
   231   000009                     i2ESCRIBE_MENSAJE2@tam:
   232                           	callstack 0
   233                           
   234                           ; 1 bytes @ 0x8
   235   000009                     	ds	1
   236   00000A                     i2ESCRIBE_MENSAJE2@i:
   237                           	callstack 0
   238                           
   239                           ; 1 bytes @ 0x9
   240   00000A                     	ds	1
   241   00000B                     ??_INT_CCP2:
   242                           
   243                           ; 1 bytes @ 0xA
   244   00000B                     	ds	4
   245   00000F                     ?_strlen:
   246                           	callstack 0
   247   00000F                     ?___lwmod:
   248                           	callstack 0
   249   00000F                     ENVIA_NIBBLE@dato:
   250                           	callstack 0
   251   00000F                     LEER_LCD@aux:
   252                           	callstack 0
   253   00000F                     ___lwmod@dividend:
   254                           	callstack 0
   255   00000F                     strlen@s:
   256                           	callstack 0
   257                           
   258                           ; 2 bytes @ 0xE
   259   00000F                     	ds	1
   260   000010                     ENVIA_CHAR@dato:
   261                           	callstack 0
   262   000010                     ENVIA_LCD_CMD@dato:
   263                           	callstack 0
   264                           
   265                           ; 1 bytes @ 0xF
   266   000010                     	ds	1
   267   000011                     ENVIA_CHAR@aux:
   268                           	callstack 0
   269   000011                     ENVIA_LCD_CMD@aux:
   270                           	callstack 0
   271   000011                     ___lwmod@divisor:
   272                           	callstack 0
   273   000011                     strlen@a:
   274                           	callstack 0
   275                           
   276                           ; 2 bytes @ 0x10
   277   000011                     	ds	1
   278   000012                     ??_LCD_CONFIG:
   279   000012                     POS_CURSOR@columna:
   280                           	callstack 0
   281   000012                     CURSOR_ONOFF@estado:
   282                           	callstack 0
   283                           
   284                           ; 1 bytes @ 0x11
   285   000012                     	ds	1
   286   000013                     ??_LCD_INIT:
   287   000013                     POS_CURSOR@fila:
   288                           	callstack 0
   289   000013                     ___lwmod@counter:
   290                           	callstack 0
   291   000013                     ESCRIBE_MENSAJE2@cadena:
   292                           	callstack 0
   293                           
   294                           ; 2 bytes @ 0x12
   295   000013                     	ds	1
   296   000014                     ?___lwdiv:
   297                           	callstack 0
   298   000014                     ___lwdiv@dividend:
   299                           	callstack 0
   300                           
   301                           ; 2 bytes @ 0x13
   302   000014                     	ds	1
   303   000015                     ??_ESCRIBE_MENSAJE2:
   304                           
   305                           ; 1 bytes @ 0x14
   306   000015                     	ds	1
   307   000016                     ___lwdiv@divisor:
   308                           	callstack 0
   309                           
   310                           ; 2 bytes @ 0x15
   311   000016                     	ds	1
   312   000017                     ESCRIBE_MENSAJE2@tam:
   313                           	callstack 0
   314                           
   315                           ; 1 bytes @ 0x16
   316   000017                     	ds	1
   317   000018                     ESCRIBE_MENSAJE2@i:
   318                           	callstack 0
   319   000018                     ___lwdiv@quotient:
   320                           	callstack 0
   321                           
   322                           ; 2 bytes @ 0x17
   323   000018                     	ds	2
   324   00001A                     ___lwdiv@counter:
   325                           	callstack 0
   326                           
   327                           ; 1 bytes @ 0x19
   328   00001A                     	ds	1
   329   00001B                     convierte@numero:
   330                           	callstack 0
   331                           
   332                           ; 2 bytes @ 0x1A
   333   00001B                     	ds	2
   334   00001D                     
   335                           ; 1 bytes @ 0x1C
   336 ;;
   337 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   338 ;;
   339 ;; *************** function _main *****************
   340 ;; Defined at:
   341 ;;		line 53 in file "CPP_compare.c"
   342 ;; Parameters:    Size  Location     Type
   343 ;;		None
   344 ;; Auto vars:     Size  Location     Type
   345 ;;		None
   346 ;; Return value:  Size  Location     Type
   347 ;;                  1    wreg      void 
   348 ;; Registers used:
   349 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   350 ;; Tracked objects:
   351 ;;		On entry : 0/0
   352 ;;		On exit  : 0/0
   353 ;;		Unchanged: 0/0
   354 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   355 ;;      Params:         0       0       0       0       0       0       0       0       0
   356 ;;      Locals:         0       0       0       0       0       0       0       0       0
   357 ;;      Temps:          0       0       0       0       0       0       0       0       0
   358 ;;      Totals:         0       0       0       0       0       0       0       0       0
   359 ;;Total ram usage:        0 bytes
   360 ;; Hardware stack levels required when called: 9
   361 ;; This function calls:
   362 ;;		_ENVIA_CHAR
   363 ;;		_ESCRIBE_MENSAJE2
   364 ;;		_POS_CURSOR
   365 ;;		_configuro
   366 ;;		_convierte
   367 ;; This function is called by:
   368 ;;		Startup code after reset
   369 ;; This function uses a non-reentrant model
   370 ;;
   371                           
   372                           	psect	text0
   373   000A96                     __ptext0:
   374                           	callstack 0
   375   000A96                     _main:
   376                           	callstack 22
   377   000A96                     
   378                           ;CPP_compare.c: 54:     configuro();
   379   000A96  EC63  F006         	call	_configuro	;wreg free
   380   000A9A                     
   381                           ;CPP_compare.c: 55:     ESCRIBE_MENSAJE2("ESPERA...");
   382   000A9A  0E10               	movlw	low STR_1
   383   000A9C  6E13               	movwf	ESCRIBE_MENSAJE2@cadena^0,c
   384   000A9E  0E08               	movlw	high STR_1
   385   000AA0  6E14               	movwf	(ESCRIBE_MENSAJE2@cadena+1)^0,c
   386   000AA2  ECA5  F005         	call	_ESCRIBE_MENSAJE2	;wreg free
   387   000AA6                     l1444:
   388                           
   389                           ;CPP_compare.c: 58:         POS_CURSOR(2,0);
   390   000AA6  0E00               	movlw	0
   391   000AA8  6E12               	movwf	POS_CURSOR@columna^0,c
   392   000AAA  0E02               	movlw	2
   393   000AAC  ECEF  F005         	call	_POS_CURSOR
   394   000AB0                     
   395                           ;CPP_compare.c: 59:         convierte(TMR3);
   396   000AB0  CFB2 F01B          	movff	4018,convierte@numero	;volatile
   397   000AB4  CFB3 F01C          	movff	4019,convierte@numero+1	;volatile
   398   000AB8  EC12  F004         	call	_convierte	;wreg free
   399   000ABC                     
   400                           ;CPP_compare.c: 60:         ESCRIBE_MENSAJE2("CUENTA: ");
   401   000ABC  0E1A               	movlw	low STR_2
   402   000ABE  6E13               	movwf	ESCRIBE_MENSAJE2@cadena^0,c
   403   000AC0  0E08               	movlw	high STR_2
   404   000AC2  6E14               	movwf	(ESCRIBE_MENSAJE2@cadena+1)^0,c
   405   000AC4  ECA5  F005         	call	_ESCRIBE_MENSAJE2	;wreg free
   406                           
   407                           ;CPP_compare.c: 61:         ENVIA_CHAR(dec_mil + 0x30);
   408   000AC8  5021               	movf	_dec_mil^0,w,c
   409   000ACA  0F30               	addlw	48
   410   000ACC  EC98  F006         	call	_ENVIA_CHAR
   411                           
   412                           ;CPP_compare.c: 62:         ENVIA_CHAR(millar + 0x30);
   413   000AD0  5020               	movf	_millar^0,w,c
   414   000AD2  0F30               	addlw	48
   415   000AD4  EC98  F006         	call	_ENVIA_CHAR
   416                           
   417                           ;CPP_compare.c: 63:         ENVIA_CHAR(centena + 0x30);
   418   000AD8  501F               	movf	_centena^0,w,c
   419   000ADA  0F30               	addlw	48
   420   000ADC  EC98  F006         	call	_ENVIA_CHAR
   421                           
   422                           ;CPP_compare.c: 64:         ENVIA_CHAR(decena + 0x30);
   423   000AE0  501E               	movf	_decena^0,w,c
   424   000AE2  0F30               	addlw	48
   425   000AE4  EC98  F006         	call	_ENVIA_CHAR
   426                           
   427                           ;CPP_compare.c: 65:         ENVIA_CHAR(unidad + 0x30);
   428   000AE8  501D               	movf	_unidad^0,w,c
   429   000AEA  0F30               	addlw	48
   430   000AEC  EC98  F006         	call	_ENVIA_CHAR
   431   000AF0  EF53  F005         	goto	l1444
   432   000AF4  EF23  F000         	goto	start
   433   000AF8                     __end_of_main:
   434                           	callstack 0
   435                           
   436 ;; *************** function _convierte *****************
   437 ;; Defined at:
   438 ;;		line 45 in file "CPP_compare.c"
   439 ;; Parameters:    Size  Location     Type
   440 ;;  numero          2   26[COMRAM] unsigned int 
   441 ;; Auto vars:     Size  Location     Type
   442 ;;		None
   443 ;; Return value:  Size  Location     Type
   444 ;;                  1    wreg      void 
   445 ;; Registers used:
   446 ;;		wreg, status,2, status,0, cstack
   447 ;; Tracked objects:
   448 ;;		On entry : 0/0
   449 ;;		On exit  : 0/0
   450 ;;		Unchanged: 0/0
   451 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   452 ;;      Params:         2       0       0       0       0       0       0       0       0
   453 ;;      Locals:         0       0       0       0       0       0       0       0       0
   454 ;;      Temps:          0       0       0       0       0       0       0       0       0
   455 ;;      Totals:         2       0       0       0       0       0       0       0       0
   456 ;;Total ram usage:        2 bytes
   457 ;; Hardware stack levels used: 1
   458 ;; Hardware stack levels required when called: 5
   459 ;; This function calls:
   460 ;;		___lwdiv
   461 ;;		___lwmod
   462 ;; This function is called by:
   463 ;;		_main
   464 ;; This function uses a non-reentrant model
   465 ;;
   466                           
   467                           	psect	text1
   468   000824                     __ptext1:
   469                           	callstack 0
   470   000824                     _convierte:
   471                           	callstack 25
   472   000824                     
   473                           ;CPP_compare.c: 46:     dec_mil = numero / 10000;
   474   000824  C01B  F014         	movff	convierte@numero,___lwdiv@dividend
   475   000828  C01C  F015         	movff	convierte@numero+1,___lwdiv@dividend+1
   476   00082C  0E27               	movlw	39
   477   00082E  6E17               	movwf	(___lwdiv@divisor+1)^0,c
   478   000830  0E10               	movlw	16
   479   000832  6E16               	movwf	___lwdiv@divisor^0,c
   480   000834  EC6D  F004         	call	___lwdiv	;wreg free
   481   000838  5014               	movf	?___lwdiv^0,w,c
   482   00083A  6E21               	movwf	_dec_mil^0,c
   483                           
   484                           ;CPP_compare.c: 47:     millar = (numero % 10000)/1000;
   485   00083C  0E27               	movlw	39
   486   00083E  6E12               	movwf	(___lwmod@divisor+1)^0,c
   487   000840  0E10               	movlw	16
   488   000842  6E11               	movwf	___lwmod@divisor^0,c
   489   000844  C01B  F00F         	movff	convierte@numero,___lwmod@dividend
   490   000848  C01C  F010         	movff	convierte@numero+1,___lwmod@dividend+1
   491   00084C  EC19  F005         	call	___lwmod	;wreg free
   492   000850  C00F  F014         	movff	?___lwmod,___lwdiv@dividend
   493   000854  C010  F015         	movff	?___lwmod+1,___lwdiv@dividend+1
   494   000858  0E03               	movlw	3
   495   00085A  6E17               	movwf	(___lwdiv@divisor+1)^0,c
   496   00085C  0EE8               	movlw	232
   497   00085E  6E16               	movwf	___lwdiv@divisor^0,c
   498   000860  EC6D  F004         	call	___lwdiv	;wreg free
   499   000864  5014               	movf	?___lwdiv^0,w,c
   500   000866  6E20               	movwf	_millar^0,c
   501                           
   502                           ;CPP_compare.c: 48:     centena = (numero % 1000)/100;
   503   000868  0E03               	movlw	3
   504   00086A  6E12               	movwf	(___lwmod@divisor+1)^0,c
   505   00086C  0EE8               	movlw	232
   506   00086E  6E11               	movwf	___lwmod@divisor^0,c
   507   000870  C01B  F00F         	movff	convierte@numero,___lwmod@dividend
   508   000874  C01C  F010         	movff	convierte@numero+1,___lwmod@dividend+1
   509   000878  EC19  F005         	call	___lwmod	;wreg free
   510   00087C  C00F  F014         	movff	?___lwmod,___lwdiv@dividend
   511   000880  C010  F015         	movff	?___lwmod+1,___lwdiv@dividend+1
   512   000884  0E00               	movlw	0
   513   000886  6E17               	movwf	(___lwdiv@divisor+1)^0,c
   514   000888  0E64               	movlw	100
   515   00088A  6E16               	movwf	___lwdiv@divisor^0,c
   516   00088C  EC6D  F004         	call	___lwdiv	;wreg free
   517   000890  5014               	movf	?___lwdiv^0,w,c
   518   000892  6E1F               	movwf	_centena^0,c
   519                           
   520                           ;CPP_compare.c: 49:     decena = (numero % 100)/10;
   521   000894  0E00               	movlw	0
   522   000896  6E12               	movwf	(___lwmod@divisor+1)^0,c
   523   000898  0E64               	movlw	100
   524   00089A  6E11               	movwf	___lwmod@divisor^0,c
   525   00089C  C01B  F00F         	movff	convierte@numero,___lwmod@dividend
   526   0008A0  C01C  F010         	movff	convierte@numero+1,___lwmod@dividend+1
   527   0008A4  EC19  F005         	call	___lwmod	;wreg free
   528   0008A8  C00F  F014         	movff	?___lwmod,___lwdiv@dividend
   529   0008AC  C010  F015         	movff	?___lwmod+1,___lwdiv@dividend+1
   530   0008B0  0E00               	movlw	0
   531   0008B2  6E17               	movwf	(___lwdiv@divisor+1)^0,c
   532   0008B4  0E0A               	movlw	10
   533   0008B6  6E16               	movwf	___lwdiv@divisor^0,c
   534   0008B8  EC6D  F004         	call	___lwdiv	;wreg free
   535   0008BC  5014               	movf	?___lwdiv^0,w,c
   536   0008BE  6E1E               	movwf	_decena^0,c
   537                           
   538                           ;CPP_compare.c: 50:     unidad = numero % 10;
   539   0008C0  C01B  F00F         	movff	convierte@numero,___lwmod@dividend
   540   0008C4  C01C  F010         	movff	convierte@numero+1,___lwmod@dividend+1
   541   0008C8  0E00               	movlw	0
   542   0008CA  6E12               	movwf	(___lwmod@divisor+1)^0,c
   543   0008CC  0E0A               	movlw	10
   544   0008CE  6E11               	movwf	___lwmod@divisor^0,c
   545   0008D0  EC19  F005         	call	___lwmod	;wreg free
   546   0008D4  500F               	movf	?___lwmod^0,w,c
   547   0008D6  6E1D               	movwf	_unidad^0,c
   548   0008D8  0012               	return		;funcret
   549   0008DA                     __end_of_convierte:
   550                           	callstack 0
   551                           
   552 ;; *************** function ___lwmod *****************
   553 ;; Defined at:
   554 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\lwmod.c"
   555 ;; Parameters:    Size  Location     Type
   556 ;;  dividend        2   14[COMRAM] unsigned int 
   557 ;;  divisor         2   16[COMRAM] unsigned int 
   558 ;; Auto vars:     Size  Location     Type
   559 ;;  counter         1   18[COMRAM] unsigned char 
   560 ;; Return value:  Size  Location     Type
   561 ;;                  2   14[COMRAM] unsigned int 
   562 ;; Registers used:
   563 ;;		wreg, status,2, status,0
   564 ;; Tracked objects:
   565 ;;		On entry : 0/0
   566 ;;		On exit  : 0/0
   567 ;;		Unchanged: 0/0
   568 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   569 ;;      Params:         4       0       0       0       0       0       0       0       0
   570 ;;      Locals:         1       0       0       0       0       0       0       0       0
   571 ;;      Temps:          0       0       0       0       0       0       0       0       0
   572 ;;      Totals:         5       0       0       0       0       0       0       0       0
   573 ;;Total ram usage:        5 bytes
   574 ;; Hardware stack levels used: 1
   575 ;; Hardware stack levels required when called: 4
   576 ;; This function calls:
   577 ;;		Nothing
   578 ;; This function is called by:
   579 ;;		_convierte
   580 ;; This function uses a non-reentrant model
   581 ;;
   582                           
   583                           	psect	text2
   584   000A32                     __ptext2:
   585                           	callstack 0
   586   000A32                     ___lwmod:
   587                           	callstack 25
   588   000A32  5011               	movf	___lwmod@divisor^0,w,c
   589   000A34  1012               	iorwf	(___lwmod@divisor+1)^0,w,c
   590   000A36  B4D8               	btfsc	status,2,c
   591   000A38  EF20  F005         	goto	u301
   592   000A3C  EF22  F005         	goto	u300
   593   000A40                     u301:
   594   000A40  EF46  F005         	goto	l670
   595   000A44                     u300:
   596   000A44  0E01               	movlw	1
   597   000A46  6E13               	movwf	___lwmod@counter^0,c
   598   000A48  EF2A  F005         	goto	l1334
   599   000A4C                     l1332:
   600   000A4C  90D8               	bcf	status,0,c
   601   000A4E  3611               	rlcf	___lwmod@divisor^0,f,c
   602   000A50  3612               	rlcf	(___lwmod@divisor+1)^0,f,c
   603   000A52  2A13               	incf	___lwmod@counter^0,f,c
   604   000A54                     l1334:
   605   000A54  AE12               	btfss	(___lwmod@divisor+1)^0,7,c
   606   000A56  EF2F  F005         	goto	u311
   607   000A5A  EF31  F005         	goto	u310
   608   000A5E                     u311:
   609   000A5E  EF26  F005         	goto	l1332
   610   000A62                     u310:
   611   000A62                     l1336:
   612   000A62  5011               	movf	___lwmod@divisor^0,w,c
   613   000A64  5C0F               	subwf	___lwmod@dividend^0,w,c
   614   000A66  5012               	movf	(___lwmod@divisor+1)^0,w,c
   615   000A68  5810               	subwfb	(___lwmod@dividend+1)^0,w,c
   616   000A6A  A0D8               	btfss	status,0,c
   617   000A6C  EF3A  F005         	goto	u321
   618   000A70  EF3C  F005         	goto	u320
   619   000A74                     u321:
   620   000A74  EF40  F005         	goto	l1340
   621   000A78                     u320:
   622   000A78  5011               	movf	___lwmod@divisor^0,w,c
   623   000A7A  5E0F               	subwf	___lwmod@dividend^0,f,c
   624   000A7C  5012               	movf	(___lwmod@divisor+1)^0,w,c
   625   000A7E  5A10               	subwfb	(___lwmod@dividend+1)^0,f,c
   626   000A80                     l1340:
   627   000A80  90D8               	bcf	status,0,c
   628   000A82  3212               	rrcf	(___lwmod@divisor+1)^0,f,c
   629   000A84  3211               	rrcf	___lwmod@divisor^0,f,c
   630   000A86  2E13               	decfsz	___lwmod@counter^0,f,c
   631   000A88  EF31  F005         	goto	l1336
   632   000A8C                     l670:
   633   000A8C  C00F  F00F         	movff	___lwmod@dividend,?___lwmod
   634   000A90  C010  F010         	movff	___lwmod@dividend+1,?___lwmod+1
   635   000A94  0012               	return		;funcret
   636   000A96                     __end_of___lwmod:
   637                           	callstack 0
   638                           
   639 ;; *************** function ___lwdiv *****************
   640 ;; Defined at:
   641 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\lwdiv.c"
   642 ;; Parameters:    Size  Location     Type
   643 ;;  dividend        2   19[COMRAM] unsigned int 
   644 ;;  divisor         2   21[COMRAM] unsigned int 
   645 ;; Auto vars:     Size  Location     Type
   646 ;;  quotient        2   23[COMRAM] unsigned int 
   647 ;;  counter         1   25[COMRAM] unsigned char 
   648 ;; Return value:  Size  Location     Type
   649 ;;                  2   19[COMRAM] unsigned int 
   650 ;; Registers used:
   651 ;;		wreg, status,2, status,0
   652 ;; Tracked objects:
   653 ;;		On entry : 0/0
   654 ;;		On exit  : 0/0
   655 ;;		Unchanged: 0/0
   656 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   657 ;;      Params:         4       0       0       0       0       0       0       0       0
   658 ;;      Locals:         3       0       0       0       0       0       0       0       0
   659 ;;      Temps:          0       0       0       0       0       0       0       0       0
   660 ;;      Totals:         7       0       0       0       0       0       0       0       0
   661 ;;Total ram usage:        7 bytes
   662 ;; Hardware stack levels used: 1
   663 ;; Hardware stack levels required when called: 4
   664 ;; This function calls:
   665 ;;		Nothing
   666 ;; This function is called by:
   667 ;;		_convierte
   668 ;; This function uses a non-reentrant model
   669 ;;
   670                           
   671                           	psect	text3
   672   0008DA                     __ptext3:
   673                           	callstack 0
   674   0008DA                     ___lwdiv:
   675                           	callstack 25
   676   0008DA  0E00               	movlw	0
   677   0008DC  6E19               	movwf	(___lwdiv@quotient+1)^0,c
   678   0008DE  0E00               	movlw	0
   679   0008E0  6E18               	movwf	___lwdiv@quotient^0,c
   680   0008E2  5016               	movf	___lwdiv@divisor^0,w,c
   681   0008E4  1017               	iorwf	(___lwdiv@divisor+1)^0,w,c
   682   0008E6  B4D8               	btfsc	status,2,c
   683   0008E8  EF78  F004         	goto	u271
   684   0008EC  EF7A  F004         	goto	u270
   685   0008F0                     u271:
   686   0008F0  EFA2  F004         	goto	l660
   687   0008F4                     u270:
   688   0008F4  0E01               	movlw	1
   689   0008F6  6E1A               	movwf	___lwdiv@counter^0,c
   690   0008F8  EF82  F004         	goto	l1314
   691   0008FC                     l1312:
   692   0008FC  90D8               	bcf	status,0,c
   693   0008FE  3616               	rlcf	___lwdiv@divisor^0,f,c
   694   000900  3617               	rlcf	(___lwdiv@divisor+1)^0,f,c
   695   000902  2A1A               	incf	___lwdiv@counter^0,f,c
   696   000904                     l1314:
   697   000904  AE17               	btfss	(___lwdiv@divisor+1)^0,7,c
   698   000906  EF87  F004         	goto	u281
   699   00090A  EF89  F004         	goto	u280
   700   00090E                     u281:
   701   00090E  EF7E  F004         	goto	l1312
   702   000912                     u280:
   703   000912                     l1316:
   704   000912  90D8               	bcf	status,0,c
   705   000914  3618               	rlcf	___lwdiv@quotient^0,f,c
   706   000916  3619               	rlcf	(___lwdiv@quotient+1)^0,f,c
   707   000918  5016               	movf	___lwdiv@divisor^0,w,c
   708   00091A  5C14               	subwf	___lwdiv@dividend^0,w,c
   709   00091C  5017               	movf	(___lwdiv@divisor+1)^0,w,c
   710   00091E  5815               	subwfb	(___lwdiv@dividend+1)^0,w,c
   711   000920  A0D8               	btfss	status,0,c
   712   000922  EF95  F004         	goto	u291
   713   000926  EF97  F004         	goto	u290
   714   00092A                     u291:
   715   00092A  EF9C  F004         	goto	l1324
   716   00092E                     u290:
   717   00092E  5016               	movf	___lwdiv@divisor^0,w,c
   718   000930  5E14               	subwf	___lwdiv@dividend^0,f,c
   719   000932  5017               	movf	(___lwdiv@divisor+1)^0,w,c
   720   000934  5A15               	subwfb	(___lwdiv@dividend+1)^0,f,c
   721   000936  8018               	bsf	___lwdiv@quotient^0,0,c
   722   000938                     l1324:
   723   000938  90D8               	bcf	status,0,c
   724   00093A  3217               	rrcf	(___lwdiv@divisor+1)^0,f,c
   725   00093C  3216               	rrcf	___lwdiv@divisor^0,f,c
   726   00093E  2E1A               	decfsz	___lwdiv@counter^0,f,c
   727   000940  EF89  F004         	goto	l1316
   728   000944                     l660:
   729   000944  C018  F014         	movff	___lwdiv@quotient,?___lwdiv
   730   000948  C019  F015         	movff	___lwdiv@quotient+1,?___lwdiv+1
   731   00094C  0012               	return		;funcret
   732   00094E                     __end_of___lwdiv:
   733                           	callstack 0
   734                           
   735 ;; *************** function _configuro *****************
   736 ;; Defined at:
   737 ;;		line 16 in file "CPP_compare.c"
   738 ;; Parameters:    Size  Location     Type
   739 ;;		None
   740 ;; Auto vars:     Size  Location     Type
   741 ;;		None
   742 ;; Return value:  Size  Location     Type
   743 ;;                  1    wreg      void 
   744 ;; Registers used:
   745 ;;		wreg, status,2, status,0, cstack
   746 ;; Tracked objects:
   747 ;;		On entry : 0/0
   748 ;;		On exit  : 0/0
   749 ;;		Unchanged: 0/0
   750 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   751 ;;      Params:         0       0       0       0       0       0       0       0       0
   752 ;;      Locals:         0       0       0       0       0       0       0       0       0
   753 ;;      Temps:          0       0       0       0       0       0       0       0       0
   754 ;;      Totals:         0       0       0       0       0       0       0       0       0
   755 ;;Total ram usage:        0 bytes
   756 ;; Hardware stack levels used: 1
   757 ;; Hardware stack levels required when called: 8
   758 ;; This function calls:
   759 ;;		_LCD_INIT
   760 ;; This function is called by:
   761 ;;		_main
   762 ;; This function uses a non-reentrant model
   763 ;;
   764                           
   765                           	psect	text4
   766   000CC6                     __ptext4:
   767                           	callstack 0
   768   000CC6                     _configuro:
   769                           	callstack 22
   770   000CC6                     
   771                           ;CPP_compare.c: 17:     OSCCON = 0X52;
   772   000CC6  0E52               	movlw	82
   773   000CC8  6ED3               	movwf	211,c	;volatile
   774                           
   775                           ;CPP_compare.c: 18:     TRISD = 0;
   776   000CCA  0E00               	movlw	0
   777   000CCC  6E95               	movwf	149,c	;volatile
   778                           
   779                           ;CPP_compare.c: 19:     ANSELD = 0;
   780   000CCE  0E00               	movlw	0
   781   000CD0  010F               	movlb	15	; () banked
   782   000CD2  6F5E               	movwf	94,b	;volatile
   783   000CD4                     
   784                           ; BSR set to: 15
   785                           ;CPP_compare.c: 22:     TRISCbits.RC1 = 0;
   786   000CD4  9294               	bcf	148,1,c	;volatile
   787                           
   788                           ;CPP_compare.c: 25:     T3CON = 0X30;
   789   000CD6  0E30               	movlw	48
   790   000CD8  6EB1               	movwf	177,c	;volatile
   791                           
   792                           ;CPP_compare.c: 28:     CCP2CON = 0X02;
   793   000CDA  0E02               	movlw	2
   794   000CDC  6E97               	movwf	151,c	;volatile
   795   000CDE                     
   796                           ; BSR set to: 15
   797                           ;CPP_compare.c: 29:     CCPTMRSbits.C2TSEL = 1;
   798   000CDE  8759               	bsf	89,3,b	;volatile
   799                           
   800                           ;CPP_compare.c: 30:     CCPR2H = 0x00;
   801   000CE0  0E00               	movlw	0
   802   000CE2  6E91               	movwf	145,c	;volatile
   803   000CE4                     
   804                           ; BSR set to: 15
   805                           ;CPP_compare.c: 31:     CCPR2L = 0XFF;
   806   000CE4  6890               	setf	144,c	;volatile
   807   000CE6                     
   808                           ; BSR set to: 15
   809                           ;CPP_compare.c: 34:     INTCONbits.GIE = 1;
   810   000CE6  8EF2               	bsf	242,7,c	;volatile
   811   000CE8                     
   812                           ; BSR set to: 15
   813                           ;CPP_compare.c: 35:     INTCONbits.PEIE = 1;
   814   000CE8  8CF2               	bsf	242,6,c	;volatile
   815   000CEA                     
   816                           ; BSR set to: 15
   817                           ;CPP_compare.c: 36:     PIE2bits.CCP2IE = 1;
   818   000CEA  80A0               	bsf	160,0,c	;volatile
   819                           
   820                           ;CPP_compare.c: 37:     TMR3H = 0X00;
   821   000CEC  0E00               	movlw	0
   822   000CEE  6EB3               	movwf	179,c	;volatile
   823                           
   824                           ;CPP_compare.c: 38:     TMR3L = 0X00;
   825   000CF0  0E00               	movlw	0
   826   000CF2  6EB2               	movwf	178,c	;volatile
   827   000CF4                     
   828                           ; BSR set to: 15
   829                           ;CPP_compare.c: 40:     T3CONbits.TMR3ON = 1;
   830   000CF4  80B1               	bsf	177,0,c	;volatile
   831   000CF6                     
   832                           ; BSR set to: 15
   833                           ;CPP_compare.c: 42:     LCD_INIT();
   834   000CF6  ECE6  F006         	call	_LCD_INIT	;wreg free
   835   000CFA  0012               	return		;funcret
   836   000CFC                     __end_of_configuro:
   837                           	callstack 0
   838                           
   839 ;; *************** function _LCD_INIT *****************
   840 ;; Defined at:
   841 ;;		line 184 in file "LCD.c"
   842 ;; Parameters:    Size  Location     Type
   843 ;;		None
   844 ;; Auto vars:     Size  Location     Type
   845 ;;		None
   846 ;; Return value:  Size  Location     Type
   847 ;;                  1    wreg      void 
   848 ;; Registers used:
   849 ;;		wreg, status,2, status,0, cstack
   850 ;; Tracked objects:
   851 ;;		On entry : 0/0
   852 ;;		On exit  : 0/0
   853 ;;		Unchanged: 0/0
   854 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   855 ;;      Params:         0       0       0       0       0       0       0       0       0
   856 ;;      Locals:         0       0       0       0       0       0       0       0       0
   857 ;;      Temps:          1       0       0       0       0       0       0       0       0
   858 ;;      Totals:         1       0       0       0       0       0       0       0       0
   859 ;;Total ram usage:        1 bytes
   860 ;; Hardware stack levels used: 1
   861 ;; Hardware stack levels required when called: 7
   862 ;; This function calls:
   863 ;;		_BORRAR_LCD
   864 ;;		_CURSOR_HOME
   865 ;;		_CURSOR_ONOFF
   866 ;;		_LCD_CONFIG
   867 ;; This function is called by:
   868 ;;		_configuro
   869 ;; This function uses a non-reentrant model
   870 ;;
   871                           
   872                           	psect	text5
   873   000DCC                     __ptext5:
   874                           	callstack 0
   875   000DCC                     _LCD_INIT:
   876                           	callstack 22
   877   000DCC                     
   878                           ;LCD.c: 185:     _delay((unsigned long)((15)*(4000000UL/4000.0)));
   879   000DCC  0E14               	movlw	20
   880   000DCE  6E13               	movwf	??_LCD_INIT^0,c
   881   000DD0  0E7A               	movlw	122
   882   000DD2                     u407:
   883   000DD2  2EE8               	decfsz	wreg,f,c
   884   000DD4  D7FE               	bra	u407
   885   000DD6  2E13               	decfsz	??_LCD_INIT^0,f,c
   886   000DD8  D7FC               	bra	u407
   887   000DDA                     
   888                           ;LCD.c: 186:     LCD_CONFIG();
   889   000DDA  EC7C  F005         	call	_LCD_CONFIG	;wreg free
   890   000DDE                     
   891                           ;LCD.c: 187:     _delay((unsigned long)((15)*(4000000UL/4000.0)));
   892   000DDE  0E14               	movlw	20
   893   000DE0  6E13               	movwf	??_LCD_INIT^0,c
   894   000DE2  0E7A               	movlw	122
   895   000DE4                     u417:
   896   000DE4  2EE8               	decfsz	wreg,f,c
   897   000DE6  D7FE               	bra	u417
   898   000DE8  2E13               	decfsz	??_LCD_INIT^0,f,c
   899   000DEA  D7FC               	bra	u417
   900                           
   901                           ;LCD.c: 188:     BORRAR_LCD();
   902   000DEC  EC44  F007         	call	_BORRAR_LCD	;wreg free
   903                           
   904                           ;LCD.c: 189:     CURSOR_HOME();
   905   000DF0  EC40  F007         	call	_CURSOR_HOME	;wreg free
   906                           
   907                           ;LCD.c: 190:     CURSOR_ONOFF(1);
   908   000DF4  0E01               	movlw	1
   909   000DF6  ECFE  F006         	call	_CURSOR_ONOFF
   910   000DFA  0012               	return		;funcret
   911   000DFC                     __end_of_LCD_INIT:
   912                           	callstack 0
   913                           
   914 ;; *************** function _LCD_CONFIG *****************
   915 ;; Defined at:
   916 ;;		line 101 in file "LCD.c"
   917 ;; Parameters:    Size  Location     Type
   918 ;;		None
   919 ;; Auto vars:     Size  Location     Type
   920 ;;		None
   921 ;; Return value:  Size  Location     Type
   922 ;;                  1    wreg      void 
   923 ;; Registers used:
   924 ;;		wreg, status,2, status,0, cstack
   925 ;; Tracked objects:
   926 ;;		On entry : 0/0
   927 ;;		On exit  : 0/0
   928 ;;		Unchanged: 0/0
   929 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   930 ;;      Params:         0       0       0       0       0       0       0       0       0
   931 ;;      Locals:         0       0       0       0       0       0       0       0       0
   932 ;;      Temps:          1       0       0       0       0       0       0       0       0
   933 ;;      Totals:         1       0       0       0       0       0       0       0       0
   934 ;;Total ram usage:        1 bytes
   935 ;; Hardware stack levels used: 1
   936 ;; Hardware stack levels required when called: 6
   937 ;; This function calls:
   938 ;;		_ENVIA_LCD_CMD
   939 ;;		_ENVIA_NIBBLE
   940 ;; This function is called by:
   941 ;;		_LCD_INIT
   942 ;; This function uses a non-reentrant model
   943 ;;
   944                           
   945                           	psect	text6
   946   000AF8                     __ptext6:
   947                           	callstack 0
   948   000AF8                     _LCD_CONFIG:
   949                           	callstack 22
   950   000AF8                     
   951                           ;LCD.c: 103:  LATDbits.LATD0 = 0;
   952   000AF8  908C               	bcf	140,0,c	;volatile
   953                           
   954                           ;LCD.c: 104:  LATDbits.LATD1 = 0;
   955   000AFA  928C               	bcf	140,1,c	;volatile
   956   000AFC                     
   957                           ;LCD.c: 105:  ENVIA_NIBBLE(0x30);
   958   000AFC  0E30               	movlw	48
   959   000AFE  EC24  F007         	call	_ENVIA_NIBBLE
   960   000B02                     
   961                           ;LCD.c: 106:     _delay((unsigned long)((2)*(4000000UL/4000.0)));
   962   000B02  0E03               	movlw	3
   963   000B04  6E12               	movwf	??_LCD_CONFIG^0,c
   964   000B06  0E98               	movlw	152
   965   000B08                     u427:
   966   000B08  2EE8               	decfsz	wreg,f,c
   967   000B0A  D7FE               	bra	u427
   968   000B0C  2E12               	decfsz	??_LCD_CONFIG^0,f,c
   969   000B0E  D7FC               	bra	u427
   970   000B10                     
   971                           ;LCD.c: 107:  ENVIA_NIBBLE(0x30);
   972   000B10  0E30               	movlw	48
   973   000B12  EC24  F007         	call	_ENVIA_NIBBLE
   974                           
   975                           ;LCD.c: 108:     _delay((unsigned long)((100)*(4000000UL/4000000.0)));
   976   000B16  0E21               	movlw	33
   977   000B18                     u437:
   978   000B18  2EE8               	decfsz	wreg,f,c
   979   000B1A  D7FE               	bra	u437
   980   000B1C  F000               	nop	
   981   000B1E                     
   982                           ;LCD.c: 109:     ENVIA_NIBBLE(0x30);
   983   000B1E  0E30               	movlw	48
   984   000B20  EC24  F007         	call	_ENVIA_NIBBLE
   985   000B24                     
   986                           ;LCD.c: 110:  ENVIA_NIBBLE(0x20);
   987   000B24  0E20               	movlw	32
   988   000B26  EC24  F007         	call	_ENVIA_NIBBLE
   989   000B2A                     
   990                           ;LCD.c: 111:  ENVIA_LCD_CMD(0x01);
   991   000B2A  0E01               	movlw	1
   992   000B2C  EC7E  F006         	call	_ENVIA_LCD_CMD
   993   000B30                     
   994                           ;LCD.c: 112:  ENVIA_LCD_CMD(0x28);
   995   000B30  0E28               	movlw	40
   996   000B32  EC7E  F006         	call	_ENVIA_LCD_CMD
   997   000B36                     
   998                           ;LCD.c: 113:  ENVIA_LCD_CMD(0x0F);
   999   000B36  0E0F               	movlw	15
  1000   000B38  EC7E  F006         	call	_ENVIA_LCD_CMD
  1001   000B3C                     
  1002                           ;LCD.c: 114:  ENVIA_LCD_CMD(0x06);
  1003   000B3C  0E06               	movlw	6
  1004   000B3E  EC7E  F006         	call	_ENVIA_LCD_CMD
  1005   000B42                     
  1006                           ;LCD.c: 115:  ENVIA_LCD_CMD(0x01);
  1007   000B42  0E01               	movlw	1
  1008   000B44  EC7E  F006         	call	_ENVIA_LCD_CMD
  1009   000B48  0012               	return		;funcret
  1010   000B4A                     __end_of_LCD_CONFIG:
  1011                           	callstack 0
  1012                           
  1013 ;; *************** function _CURSOR_ONOFF *****************
  1014 ;; Defined at:
  1015 ;;		line 54 in file "LCD.c"
  1016 ;; Parameters:    Size  Location     Type
  1017 ;;  estado          1    wreg     unsigned char 
  1018 ;; Auto vars:     Size  Location     Type
  1019 ;;  estado          1   17[COMRAM] unsigned char 
  1020 ;; Return value:  Size  Location     Type
  1021 ;;                  1    wreg      void 
  1022 ;; Registers used:
  1023 ;;		wreg, status,2, status,0, cstack
  1024 ;; Tracked objects:
  1025 ;;		On entry : 0/0
  1026 ;;		On exit  : 0/0
  1027 ;;		Unchanged: 0/0
  1028 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1029 ;;      Params:         0       0       0       0       0       0       0       0       0
  1030 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1031 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1032 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1033 ;;Total ram usage:        1 bytes
  1034 ;; Hardware stack levels used: 1
  1035 ;; Hardware stack levels required when called: 6
  1036 ;; This function calls:
  1037 ;;		_ENVIA_LCD_CMD
  1038 ;; This function is called by:
  1039 ;;		_LCD_INIT
  1040 ;; This function uses a non-reentrant model
  1041 ;;
  1042                           
  1043                           	psect	text7
  1044   000DFC                     __ptext7:
  1045                           	callstack 0
  1046   000DFC                     _CURSOR_ONOFF:
  1047                           	callstack 22
  1048                           
  1049                           ;incstack = 0
  1050                           ;CURSOR_ONOFF@estado stored from wreg
  1051   000DFC  6E12               	movwf	CURSOR_ONOFF@estado^0,c
  1052   000DFE                     
  1053                           ;LCD.c: 54: void CURSOR_ONOFF(unsigned char estado);LCD.c: 55: {;LCD.c: 56:  if(estado =
      +                          = 0) ENVIA_LCD_CMD(0x0E);
  1054   000DFE  5012               	movf	CURSOR_ONOFF@estado^0,w,c
  1055   000E00  A4D8               	btfss	status,2,c
  1056   000E02  EF05  F007         	goto	u21
  1057   000E06  EF07  F007         	goto	u20
  1058   000E0A                     u21:
  1059   000E0A  EF0A  F007         	goto	l922
  1060   000E0E                     u20:
  1061   000E0E  0E0E               	movlw	14
  1062   000E10  EC7E  F006         	call	_ENVIA_LCD_CMD
  1063   000E14                     l922:
  1064                           
  1065                           ;LCD.c: 57:  if(estado == 1) ENVIA_LCD_CMD(0x0C);
  1066   000E14  0412               	decf	CURSOR_ONOFF@estado^0,w,c
  1067   000E16  A4D8               	btfss	status,2,c
  1068   000E18  EF10  F007         	goto	u31
  1069   000E1C  EF12  F007         	goto	u30
  1070   000E20                     u31:
  1071   000E20  EF15  F007         	goto	l56
  1072   000E24                     u30:
  1073   000E24  0E0C               	movlw	12
  1074   000E26  EC7E  F006         	call	_ENVIA_LCD_CMD
  1075   000E2A                     l56:
  1076   000E2A  0012               	return		;funcret
  1077   000E2C                     __end_of_CURSOR_ONOFF:
  1078                           	callstack 0
  1079                           
  1080 ;; *************** function _CURSOR_HOME *****************
  1081 ;; Defined at:
  1082 ;;		line 29 in file "LCD.c"
  1083 ;; Parameters:    Size  Location     Type
  1084 ;;		None
  1085 ;; Auto vars:     Size  Location     Type
  1086 ;;		None
  1087 ;; Return value:  Size  Location     Type
  1088 ;;                  1    wreg      void 
  1089 ;; Registers used:
  1090 ;;		wreg, status,2, status,0, cstack
  1091 ;; Tracked objects:
  1092 ;;		On entry : 0/0
  1093 ;;		On exit  : 0/0
  1094 ;;		Unchanged: 0/0
  1095 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1096 ;;      Params:         0       0       0       0       0       0       0       0       0
  1097 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1098 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1099 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1100 ;;Total ram usage:        0 bytes
  1101 ;; Hardware stack levels used: 1
  1102 ;; Hardware stack levels required when called: 6
  1103 ;; This function calls:
  1104 ;;		_ENVIA_LCD_CMD
  1105 ;; This function is called by:
  1106 ;;		_LCD_INIT
  1107 ;; This function uses a non-reentrant model
  1108 ;;
  1109                           
  1110                           	psect	text8
  1111   000E80                     __ptext8:
  1112                           	callstack 0
  1113   000E80                     _CURSOR_HOME:
  1114                           	callstack 22
  1115   000E80                     
  1116                           ;LCD.c: 31:  ENVIA_LCD_CMD(0x02);
  1117   000E80  0E02               	movlw	2
  1118   000E82  EC7E  F006         	call	_ENVIA_LCD_CMD
  1119   000E86  0012               	return		;funcret
  1120   000E88                     __end_of_CURSOR_HOME:
  1121                           	callstack 0
  1122                           
  1123 ;; *************** function _BORRAR_LCD *****************
  1124 ;; Defined at:
  1125 ;;		line 96 in file "LCD.c"
  1126 ;; Parameters:    Size  Location     Type
  1127 ;;		None
  1128 ;; Auto vars:     Size  Location     Type
  1129 ;;		None
  1130 ;; Return value:  Size  Location     Type
  1131 ;;                  1    wreg      void 
  1132 ;; Registers used:
  1133 ;;		wreg, status,2, status,0, cstack
  1134 ;; Tracked objects:
  1135 ;;		On entry : 0/0
  1136 ;;		On exit  : 0/0
  1137 ;;		Unchanged: 0/0
  1138 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1139 ;;      Params:         0       0       0       0       0       0       0       0       0
  1140 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1141 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1142 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1143 ;;Total ram usage:        0 bytes
  1144 ;; Hardware stack levels used: 1
  1145 ;; Hardware stack levels required when called: 6
  1146 ;; This function calls:
  1147 ;;		_ENVIA_LCD_CMD
  1148 ;; This function is called by:
  1149 ;;		_LCD_INIT
  1150 ;; This function uses a non-reentrant model
  1151 ;;
  1152                           
  1153                           	psect	text9
  1154   000E88                     __ptext9:
  1155                           	callstack 0
  1156   000E88                     _BORRAR_LCD:
  1157                           	callstack 22
  1158   000E88                     
  1159                           ;LCD.c: 98:  ENVIA_LCD_CMD(0x01);
  1160   000E88  0E01               	movlw	1
  1161   000E8A  EC7E  F006         	call	_ENVIA_LCD_CMD
  1162   000E8E  0012               	return		;funcret
  1163   000E90                     __end_of_BORRAR_LCD:
  1164                           	callstack 0
  1165                           
  1166 ;; *************** function _POS_CURSOR *****************
  1167 ;; Defined at:
  1168 ;;		line 5 in file "LCD.c"
  1169 ;; Parameters:    Size  Location     Type
  1170 ;;  fila            1    wreg     unsigned char 
  1171 ;;  columna         1   17[COMRAM] unsigned char 
  1172 ;; Auto vars:     Size  Location     Type
  1173 ;;  fila            1   18[COMRAM] unsigned char 
  1174 ;; Return value:  Size  Location     Type
  1175 ;;                  1    wreg      void 
  1176 ;; Registers used:
  1177 ;;		wreg, status,2, status,0, cstack
  1178 ;; Tracked objects:
  1179 ;;		On entry : 0/0
  1180 ;;		On exit  : 0/0
  1181 ;;		Unchanged: 0/0
  1182 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1183 ;;      Params:         1       0       0       0       0       0       0       0       0
  1184 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1185 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1186 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1187 ;;Total ram usage:        2 bytes
  1188 ;; Hardware stack levels used: 1
  1189 ;; Hardware stack levels required when called: 6
  1190 ;; This function calls:
  1191 ;;		_ENVIA_LCD_CMD
  1192 ;; This function is called by:
  1193 ;;		_main
  1194 ;; This function uses a non-reentrant model
  1195 ;;
  1196                           
  1197                           	psect	text10
  1198   000BDE                     __ptext10:
  1199                           	callstack 0
  1200   000BDE                     _POS_CURSOR:
  1201                           	callstack 24
  1202                           
  1203                           ;incstack = 0
  1204                           ;POS_CURSOR@fila stored from wreg
  1205   000BDE  6E13               	movwf	POS_CURSOR@fila^0,c
  1206   000BE0                     
  1207                           ;LCD.c: 5: void POS_CURSOR(unsigned char fila,unsigned char columna);LCD.c: 6: {;LCD.c: 
      +                          7:  if(fila == 1)
  1208   000BE0  0413               	decf	POS_CURSOR@fila^0,w,c
  1209   000BE2  A4D8               	btfss	status,2,c
  1210   000BE4  EFF6  F005         	goto	u341
  1211   000BE8  EFF8  F005         	goto	u340
  1212   000BEC                     u341:
  1213   000BEC  EFFE  F005         	goto	l1402
  1214   000BF0                     u340:
  1215   000BF0                     
  1216                           ;LCD.c: 8:  {;LCD.c: 9:   ENVIA_LCD_CMD(0x80+columna);
  1217   000BF0  5012               	movf	POS_CURSOR@columna^0,w,c
  1218   000BF2  0F80               	addlw	128
  1219   000BF4  EC7E  F006         	call	_ENVIA_LCD_CMD
  1220                           
  1221                           ;LCD.c: 10:  }
  1222   000BF8  EF0B  F006         	goto	l26
  1223   000BFC                     l1402:
  1224   000BFC  0E02               	movlw	2
  1225   000BFE  1813               	xorwf	POS_CURSOR@fila^0,w,c
  1226   000C00  A4D8               	btfss	status,2,c
  1227   000C02  EF05  F006         	goto	u351
  1228   000C06  EF07  F006         	goto	u350
  1229   000C0A                     u351:
  1230   000C0A  EF0B  F006         	goto	l26
  1231   000C0E                     u350:
  1232   000C0E                     
  1233                           ;LCD.c: 12:  {;LCD.c: 13:   ENVIA_LCD_CMD(0xC0+columna);
  1234   000C0E  5012               	movf	POS_CURSOR@columna^0,w,c
  1235   000C10  0FC0               	addlw	192
  1236   000C12  EC7E  F006         	call	_ENVIA_LCD_CMD
  1237   000C16                     l26:
  1238   000C16  0012               	return		;funcret
  1239   000C18                     __end_of_POS_CURSOR:
  1240                           	callstack 0
  1241                           
  1242 ;; *************** function _ENVIA_LCD_CMD *****************
  1243 ;; Defined at:
  1244 ;;		line 128 in file "LCD.c"
  1245 ;; Parameters:    Size  Location     Type
  1246 ;;  dato            1    wreg     unsigned char 
  1247 ;; Auto vars:     Size  Location     Type
  1248 ;;  dato            1   15[COMRAM] unsigned char 
  1249 ;;  aux             1   16[COMRAM] unsigned char 
  1250 ;; Return value:  Size  Location     Type
  1251 ;;                  1    wreg      void 
  1252 ;; Registers used:
  1253 ;;		wreg, status,2, status,0, cstack
  1254 ;; Tracked objects:
  1255 ;;		On entry : 0/0
  1256 ;;		On exit  : 0/0
  1257 ;;		Unchanged: 0/0
  1258 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1259 ;;      Params:         0       0       0       0       0       0       0       0       0
  1260 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1261 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1262 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1263 ;;Total ram usage:        2 bytes
  1264 ;; Hardware stack levels used: 1
  1265 ;; Hardware stack levels required when called: 5
  1266 ;; This function calls:
  1267 ;;		_ENVIA_NIBBLE
  1268 ;;		_LEER_LCD
  1269 ;; This function is called by:
  1270 ;;		_POS_CURSOR
  1271 ;;		_CURSOR_HOME
  1272 ;;		_CURSOR_ONOFF
  1273 ;;		_BORRAR_LCD
  1274 ;;		_LCD_CONFIG
  1275 ;;		_BLINK_CURSOR
  1276 ;;		_DISPLAY_ONOFF
  1277 ;;		_CURSOR_SHIFTLEFT
  1278 ;;		_CURSOR_SHIFTRIGHT
  1279 ;;		_DISPLAY_SHIFTLEFT
  1280 ;;		_DISPLAY_SHIFTRIGHT
  1281 ;;		_GENERACARACTER
  1282 ;; This function uses a non-reentrant model
  1283 ;;
  1284                           
  1285                           	psect	text11
  1286   000CFC                     __ptext11:
  1287                           	callstack 0
  1288   000CFC                     _ENVIA_LCD_CMD:
  1289                           	callstack 22
  1290                           
  1291                           ;incstack = 0
  1292                           ;ENVIA_LCD_CMD@dato stored from wreg
  1293   000CFC  6E10               	movwf	ENVIA_LCD_CMD@dato^0,c
  1294   000CFE                     
  1295                           ;LCD.c: 128: void ENVIA_LCD_CMD(unsigned char dato);LCD.c: 129: {;LCD.c: 130:  unsigned 
      +                          char aux;;LCD.c: 131:  LATDbits.LATD0 = 0;
  1296   000CFE  908C               	bcf	140,0,c	;volatile
  1297   000D00                     
  1298                           ;LCD.c: 132:  LEER_LCD();
  1299   000D00  ECA7  F004         	call	_LEER_LCD	;wreg free
  1300   000D04                     
  1301                           ;LCD.c: 133:  TRISD = 0b00000000;
  1302   000D04  0E00               	movlw	0
  1303   000D06  6E95               	movwf	149,c	;volatile
  1304   000D08                     
  1305                           ;LCD.c: 134:     _delay((unsigned long)((100)*(4000000UL/4000000.0)));
  1306   000D08  0E21               	movlw	33
  1307   000D0A                     u447:
  1308   000D0A  2EE8               	decfsz	wreg,f,c
  1309   000D0C  D7FE               	bra	u447
  1310   000D0E  F000               	nop	
  1311   000D10                     
  1312                           ;LCD.c: 135:     LATDbits.LATD1 = 0;
  1313   000D10  928C               	bcf	140,1,c	;volatile
  1314   000D12                     
  1315                           ;LCD.c: 136:  LATDbits.LATD2 = 0;
  1316   000D12  948C               	bcf	140,2,c	;volatile
  1317   000D14                     
  1318                           ;LCD.c: 137:  LATDbits.LATD0 = 0;
  1319   000D14  908C               	bcf	140,0,c	;volatile
  1320   000D16                     
  1321                           ;LCD.c: 138:  aux = dato & 0xF0;
  1322   000D16  5010               	movf	ENVIA_LCD_CMD@dato^0,w,c
  1323   000D18  0BF0               	andlw	240
  1324   000D1A  6E11               	movwf	ENVIA_LCD_CMD@aux^0,c
  1325   000D1C                     
  1326                           ;LCD.c: 139:  ENVIA_NIBBLE(aux);
  1327   000D1C  5011               	movf	ENVIA_LCD_CMD@aux^0,w,c
  1328   000D1E  EC24  F007         	call	_ENVIA_NIBBLE
  1329   000D22                     
  1330                           ;LCD.c: 140:  aux = dato<<4;
  1331   000D22  3810               	swapf	ENVIA_LCD_CMD@dato^0,w,c
  1332   000D24  0BF0               	andlw	240
  1333   000D26  6E11               	movwf	ENVIA_LCD_CMD@aux^0,c
  1334   000D28                     
  1335                           ;LCD.c: 141:  ENVIA_NIBBLE(aux);
  1336   000D28  5011               	movf	ENVIA_LCD_CMD@aux^0,w,c
  1337   000D2A  EC24  F007         	call	_ENVIA_NIBBLE
  1338   000D2E  0012               	return		;funcret
  1339   000D30                     __end_of_ENVIA_LCD_CMD:
  1340                           	callstack 0
  1341                           
  1342 ;; *************** function _ESCRIBE_MENSAJE2 *****************
  1343 ;; Defined at:
  1344 ;;		line 69 in file "LCD.c"
  1345 ;; Parameters:    Size  Location     Type
  1346 ;;  cadena          2   18[COMRAM] PTR const unsigned char 
  1347 ;;		 -> STR_3(15), STR_2(9), STR_1(10), 
  1348 ;; Auto vars:     Size  Location     Type
  1349 ;;  i               1   23[COMRAM] unsigned char 
  1350 ;;  tam             1   22[COMRAM] unsigned char 
  1351 ;; Return value:  Size  Location     Type
  1352 ;;                  1    wreg      void 
  1353 ;; Registers used:
  1354 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1355 ;; Tracked objects:
  1356 ;;		On entry : 0/0
  1357 ;;		On exit  : 0/0
  1358 ;;		Unchanged: 0/0
  1359 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1360 ;;      Params:         2       0       0       0       0       0       0       0       0
  1361 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1362 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1363 ;;      Totals:         6       0       0       0       0       0       0       0       0
  1364 ;;Total ram usage:        6 bytes
  1365 ;; Hardware stack levels used: 1
  1366 ;; Hardware stack levels required when called: 6
  1367 ;; This function calls:
  1368 ;;		_ENVIA_CHAR
  1369 ;;		_strlen
  1370 ;; This function is called by:
  1371 ;;		_main
  1372 ;; This function uses a non-reentrant model
  1373 ;;
  1374                           
  1375                           	psect	text12
  1376   000B4A                     __ptext12:
  1377                           	callstack 0
  1378   000B4A                     _ESCRIBE_MENSAJE2:
  1379                           	callstack 24
  1380   000B4A                     
  1381                           ;LCD.c: 69: void ESCRIBE_MENSAJE2(const char *cadena);LCD.c: 70: {;LCD.c: 71:     unsign
      +                          ed char tam;;LCD.c: 72:     tam = strlen(cadena);
  1382   000B4A  C013  F00F         	movff	ESCRIBE_MENSAJE2@cadena,strlen@s
  1383   000B4E  C014  F010         	movff	ESCRIBE_MENSAJE2@cadena+1,strlen@s+1
  1384   000B52  EC0C  F006         	call	_strlen	;wreg free
  1385   000B56  500F               	movf	?_strlen^0,w,c
  1386   000B58  6E17               	movwf	ESCRIBE_MENSAJE2@tam^0,c
  1387   000B5A                     
  1388                           ;LCD.c: 74:  for(i = 0; i<tam; i++)
  1389   000B5A  0E00               	movlw	0
  1390   000B5C  6E18               	movwf	ESCRIBE_MENSAJE2@i^0,c
  1391   000B5E  EFC0  F005         	goto	l1416
  1392   000B62                     l1412:
  1393                           
  1394                           ;LCD.c: 75:  {;LCD.c: 76:   ENVIA_CHAR(cadena[i]);
  1395   000B62  5018               	movf	ESCRIBE_MENSAJE2@i^0,w,c
  1396   000B64  2413               	addwf	ESCRIBE_MENSAJE2@cadena^0,w,c
  1397   000B66  6E15               	movwf	??_ESCRIBE_MENSAJE2^0,c
  1398   000B68  0E00               	movlw	0
  1399   000B6A  2014               	addwfc	(ESCRIBE_MENSAJE2@cadena+1)^0,w,c
  1400   000B6C  6E16               	movwf	(??_ESCRIBE_MENSAJE2+1)^0,c
  1401   000B6E  C015  FFF6         	movff	??_ESCRIBE_MENSAJE2,tblptrl
  1402   000B72  C016  FFF7         	movff	??_ESCRIBE_MENSAJE2+1,tblptrh
  1403   000B76                     	if	0	;tblptru may be non-zero
  1404   000B76                     	endif
  1405   000B76                     	if	0	;tblptru may be non-zero
  1406   000B76                     	endif
  1407   000B76  0008               	tblrd		*
  1408   000B78  50F5               	movf	tablat,w,c
  1409   000B7A  EC98  F006         	call	_ENVIA_CHAR
  1410   000B7E                     
  1411                           ;LCD.c: 77:  }
  1412   000B7E  2A18               	incf	ESCRIBE_MENSAJE2@i^0,f,c
  1413   000B80                     l1416:
  1414   000B80  5017               	movf	ESCRIBE_MENSAJE2@tam^0,w,c
  1415   000B82  5C18               	subwf	ESCRIBE_MENSAJE2@i^0,w,c
  1416   000B84  A0D8               	btfss	status,0,c
  1417   000B86  EFC7  F005         	goto	u361
  1418   000B8A  EFC9  F005         	goto	u360
  1419   000B8E                     u361:
  1420   000B8E  EFB1  F005         	goto	l1412
  1421   000B92                     u360:
  1422   000B92  0012               	return		;funcret
  1423   000B94                     __end_of_ESCRIBE_MENSAJE2:
  1424                           	callstack 0
  1425                           
  1426 ;; *************** function _strlen *****************
  1427 ;; Defined at:
  1428 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\strlen.c"
  1429 ;; Parameters:    Size  Location     Type
  1430 ;;  s               2   14[COMRAM] PTR const unsigned char 
  1431 ;;		 -> STR_3(15), STR_2(9), STR_1(10), 
  1432 ;; Auto vars:     Size  Location     Type
  1433 ;;  a               2   16[COMRAM] PTR const unsigned char 
  1434 ;;		 -> STR_3(15), STR_2(9), STR_1(10), 
  1435 ;; Return value:  Size  Location     Type
  1436 ;;                  2   14[COMRAM] unsigned int 
  1437 ;; Registers used:
  1438 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
  1439 ;; Tracked objects:
  1440 ;;		On entry : 0/0
  1441 ;;		On exit  : 0/0
  1442 ;;		Unchanged: 0/0
  1443 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1444 ;;      Params:         2       0       0       0       0       0       0       0       0
  1445 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1446 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1447 ;;      Totals:         4       0       0       0       0       0       0       0       0
  1448 ;;Total ram usage:        4 bytes
  1449 ;; Hardware stack levels used: 1
  1450 ;; Hardware stack levels required when called: 4
  1451 ;; This function calls:
  1452 ;;		Nothing
  1453 ;; This function is called by:
  1454 ;;		_ESCRIBE_MENSAJE2
  1455 ;; This function uses a non-reentrant model
  1456 ;;
  1457                           
  1458                           	psect	text13
  1459   000C18                     __ptext13:
  1460                           	callstack 0
  1461   000C18                     _strlen:
  1462                           	callstack 25
  1463   000C18  C00F  F011         	movff	strlen@s,strlen@a
  1464   000C1C  C010  F012         	movff	strlen@s+1,strlen@a+1
  1465   000C20  EF14  F006         	goto	l1300
  1466   000C24                     l1298:
  1467   000C24  4A0F               	infsnz	strlen@s^0,f,c
  1468   000C26  2A10               	incf	(strlen@s+1)^0,f,c
  1469   000C28                     l1300:
  1470   000C28  C00F  FFF6         	movff	strlen@s,tblptrl
  1471   000C2C  C010  FFF7         	movff	strlen@s+1,tblptrh
  1472   000C30                     	if	0	;tblptru may be non-zero
  1473   000C30                     	endif
  1474   000C30                     	if	0	;tblptru may be non-zero
  1475   000C30                     	endif
  1476   000C30  0008               	tblrd		*
  1477   000C32  50F5               	movf	tablat,w,c
  1478   000C34  0900               	iorlw	0
  1479   000C36  A4D8               	btfss	status,2,c
  1480   000C38  EF20  F006         	goto	u261
  1481   000C3C  EF22  F006         	goto	u260
  1482   000C40                     u261:
  1483   000C40  EF12  F006         	goto	l1298
  1484   000C44                     u260:
  1485   000C44  5011               	movf	strlen@a^0,w,c
  1486   000C46  5C0F               	subwf	strlen@s^0,w,c
  1487   000C48  6E0F               	movwf	?_strlen^0,c
  1488   000C4A  5012               	movf	(strlen@a+1)^0,w,c
  1489   000C4C  5810               	subwfb	(strlen@s+1)^0,w,c
  1490   000C4E  6E10               	movwf	(?_strlen+1)^0,c
  1491   000C50  0012               	return		;funcret
  1492   000C52                     __end_of_strlen:
  1493                           	callstack 0
  1494                           
  1495 ;; *************** function _ENVIA_CHAR *****************
  1496 ;; Defined at:
  1497 ;;		line 80 in file "LCD.c"
  1498 ;; Parameters:    Size  Location     Type
  1499 ;;  dato            1    wreg     unsigned char 
  1500 ;; Auto vars:     Size  Location     Type
  1501 ;;  dato            1   15[COMRAM] unsigned char 
  1502 ;;  aux             1   16[COMRAM] unsigned char 
  1503 ;; Return value:  Size  Location     Type
  1504 ;;                  1    wreg      void 
  1505 ;; Registers used:
  1506 ;;		wreg, status,2, status,0, cstack
  1507 ;; Tracked objects:
  1508 ;;		On entry : 0/0
  1509 ;;		On exit  : 0/0
  1510 ;;		Unchanged: 0/0
  1511 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1512 ;;      Params:         0       0       0       0       0       0       0       0       0
  1513 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1514 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1515 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1516 ;;Total ram usage:        2 bytes
  1517 ;; Hardware stack levels used: 1
  1518 ;; Hardware stack levels required when called: 5
  1519 ;; This function calls:
  1520 ;;		_ENVIA_NIBBLE
  1521 ;;		_LEER_LCD
  1522 ;; This function is called by:
  1523 ;;		_ESCRIBE_MENSAJE2
  1524 ;;		_main
  1525 ;;		_ESCRIBE_MENSAJE
  1526 ;;		_GENERACARACTER
  1527 ;; This function uses a non-reentrant model
  1528 ;;
  1529                           
  1530                           	psect	text14
  1531   000D30                     __ptext14:
  1532                           	callstack 0
  1533   000D30                     _ENVIA_CHAR:
  1534                           	callstack 24
  1535                           
  1536                           ;incstack = 0
  1537                           ;ENVIA_CHAR@dato stored from wreg
  1538   000D30  6E10               	movwf	ENVIA_CHAR@dato^0,c
  1539   000D32                     
  1540                           ;LCD.c: 80: void ENVIA_CHAR(unsigned char dato);LCD.c: 81: {;LCD.c: 82:  unsigned char a
      +                          ux;;LCD.c: 83:  LATDbits.LATD0 = 1;
  1541   000D32  808C               	bsf	140,0,c	;volatile
  1542   000D34                     
  1543                           ;LCD.c: 84:  LEER_LCD();
  1544   000D34  ECA7  F004         	call	_LEER_LCD	;wreg free
  1545   000D38                     
  1546                           ;LCD.c: 85:  TRISD = 0x00;
  1547   000D38  0E00               	movlw	0
  1548   000D3A  6E95               	movwf	149,c	;volatile
  1549   000D3C                     
  1550                           ;LCD.c: 86:     _delay((unsigned long)((100)*(4000000UL/4000000.0)));
  1551   000D3C  0E21               	movlw	33
  1552   000D3E                     u457:
  1553   000D3E  2EE8               	decfsz	wreg,f,c
  1554   000D40  D7FE               	bra	u457
  1555   000D42  F000               	nop	
  1556   000D44                     
  1557                           ;LCD.c: 87:  LATDbits.LATD1 = 0;
  1558   000D44  928C               	bcf	140,1,c	;volatile
  1559   000D46                     
  1560                           ;LCD.c: 88:  LATDbits.LATD2 = 0;
  1561   000D46  948C               	bcf	140,2,c	;volatile
  1562   000D48                     
  1563                           ;LCD.c: 89:  LATDbits.LATD0 = 1;
  1564   000D48  808C               	bsf	140,0,c	;volatile
  1565   000D4A                     
  1566                           ;LCD.c: 90:  aux = dato & 0xF0;
  1567   000D4A  5010               	movf	ENVIA_CHAR@dato^0,w,c
  1568   000D4C  0BF0               	andlw	240
  1569   000D4E  6E11               	movwf	ENVIA_CHAR@aux^0,c
  1570   000D50                     
  1571                           ;LCD.c: 91:  ENVIA_NIBBLE(aux);
  1572   000D50  5011               	movf	ENVIA_CHAR@aux^0,w,c
  1573   000D52  EC24  F007         	call	_ENVIA_NIBBLE
  1574   000D56                     
  1575                           ;LCD.c: 92:  aux = dato << 4;
  1576   000D56  3810               	swapf	ENVIA_CHAR@dato^0,w,c
  1577   000D58  0BF0               	andlw	240
  1578   000D5A  6E11               	movwf	ENVIA_CHAR@aux^0,c
  1579   000D5C                     
  1580                           ;LCD.c: 93:  ENVIA_NIBBLE(aux);
  1581   000D5C  5011               	movf	ENVIA_CHAR@aux^0,w,c
  1582   000D5E  EC24  F007         	call	_ENVIA_NIBBLE
  1583   000D62  0012               	return		;funcret
  1584   000D64                     __end_of_ENVIA_CHAR:
  1585                           	callstack 0
  1586                           
  1587 ;; *************** function _LEER_LCD *****************
  1588 ;; Defined at:
  1589 ;;		line 144 in file "LCD.c"
  1590 ;; Parameters:    Size  Location     Type
  1591 ;;		None
  1592 ;; Auto vars:     Size  Location     Type
  1593 ;;  aux             1   14[COMRAM] unsigned char 
  1594 ;; Return value:  Size  Location     Type
  1595 ;;                  1    wreg      void 
  1596 ;; Registers used:
  1597 ;;		wreg, status,2, status,0
  1598 ;; Tracked objects:
  1599 ;;		On entry : 0/0
  1600 ;;		On exit  : 0/0
  1601 ;;		Unchanged: 0/0
  1602 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1603 ;;      Params:         0       0       0       0       0       0       0       0       0
  1604 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1605 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1606 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1607 ;;Total ram usage:        1 bytes
  1608 ;; Hardware stack levels used: 1
  1609 ;; Hardware stack levels required when called: 4
  1610 ;; This function calls:
  1611 ;;		Nothing
  1612 ;; This function is called by:
  1613 ;;		_ENVIA_CHAR
  1614 ;;		_ENVIA_LCD_CMD
  1615 ;; This function uses a non-reentrant model
  1616 ;;
  1617                           
  1618                           	psect	text15
  1619   00094E                     __ptext15:
  1620                           	callstack 0
  1621   00094E                     _LEER_LCD:
  1622                           	callstack 22
  1623   00094E                     
  1624                           ;LCD.c: 146:  unsigned char aux;;LCD.c: 147:  TRISD = 0xF8;
  1625   00094E  0EF8               	movlw	248
  1626   000950  6E95               	movwf	149,c	;volatile
  1627   000952                     
  1628                           ;LCD.c: 148:  LATDbits.LATD0 = 0;
  1629   000952  908C               	bcf	140,0,c	;volatile
  1630   000954                     
  1631                           ;LCD.c: 149:  LATDbits.LATD1 = 1;
  1632   000954  828C               	bsf	140,1,c	;volatile
  1633   000956                     
  1634                           ;LCD.c: 150:  LATDbits.LATD2 = 1;
  1635   000956  848C               	bsf	140,2,c	;volatile
  1636   000958                     
  1637                           ;LCD.c: 151:     _delay((unsigned long)((100)*(4000000UL/4000000.0)));
  1638   000958  0E21               	movlw	33
  1639   00095A                     u467:
  1640   00095A  2EE8               	decfsz	wreg,f,c
  1641   00095C  D7FE               	bra	u467
  1642   00095E  F000               	nop	
  1643   000960                     
  1644                           ;LCD.c: 152:  aux = PORTD;
  1645   000960  CF83 F00F          	movff	3971,LEER_LCD@aux	;volatile
  1646   000964                     
  1647                           ;LCD.c: 153:  LATDbits.LATD2 = 0;
  1648   000964  948C               	bcf	140,2,c	;volatile
  1649   000966                     
  1650                           ;LCD.c: 154:     _delay((unsigned long)((100)*(4000000UL/4000000.0)));
  1651   000966  0E21               	movlw	33
  1652   000968                     u477:
  1653   000968  2EE8               	decfsz	wreg,f,c
  1654   00096A  D7FE               	bra	u477
  1655   00096C  F000               	nop	
  1656   00096E                     
  1657                           ;LCD.c: 155:  LATDbits.LATD2 = 1;
  1658   00096E  848C               	bsf	140,2,c	;volatile
  1659   000970                     
  1660                           ;LCD.c: 156:     _delay((unsigned long)((100)*(4000000UL/4000000.0)));
  1661   000970  0E21               	movlw	33
  1662   000972                     u487:
  1663   000972  2EE8               	decfsz	wreg,f,c
  1664   000974  D7FE               	bra	u487
  1665   000976  F000               	nop	
  1666   000978                     
  1667                           ;LCD.c: 157:  LATDbits.LATD2 = 0;
  1668   000978  948C               	bcf	140,2,c	;volatile
  1669   00097A                     l870:
  1670                           
  1671                           ;LCD.c: 158:  aux = aux & 0x80;
  1672   00097A  500F               	movf	LEER_LCD@aux^0,w,c
  1673   00097C  0B80               	andlw	128
  1674   00097E  6E0F               	movwf	LEER_LCD@aux^0,c
  1675                           
  1676                           ;LCD.c: 159:  while(aux == 0x80)
  1677   000980  EFD6  F004         	goto	l884
  1678   000984                     l87:
  1679                           
  1680                           ;LCD.c: 160:         {;LCD.c: 161:             LATDbits.LATD2 = 1;
  1681   000984  848C               	bsf	140,2,c	;volatile
  1682   000986                     
  1683                           ;LCD.c: 162:             _delay((unsigned long)((100)*(4000000UL/4000000.0)));
  1684   000986  0E21               	movlw	33
  1685   000988                     u497:
  1686   000988  2EE8               	decfsz	wreg,f,c
  1687   00098A  D7FE               	bra	u497
  1688   00098C  F000               	nop	
  1689   00098E                     
  1690                           ;LCD.c: 163:             aux = PORTD;
  1691   00098E  CF83 F00F          	movff	3971,LEER_LCD@aux	;volatile
  1692   000992                     
  1693                           ;LCD.c: 164:             LATDbits.LATD2 = 0;
  1694   000992  948C               	bcf	140,2,c	;volatile
  1695                           
  1696                           ;LCD.c: 165:             _delay((unsigned long)((100)*(4000000UL/4000000.0)));
  1697   000994  0E21               	movlw	33
  1698   000996                     u507:
  1699   000996  2EE8               	decfsz	wreg,f,c
  1700   000998  D7FE               	bra	u507
  1701   00099A  F000               	nop	
  1702   00099C                     
  1703                           ;LCD.c: 166:             LATDbits.LATD2 = 1;
  1704   00099C  848C               	bsf	140,2,c	;volatile
  1705                           
  1706                           ;LCD.c: 167:             _delay((unsigned long)((100)*(4000000UL/4000000.0)));
  1707   00099E  0E21               	movlw	33
  1708   0009A0                     u517:
  1709   0009A0  2EE8               	decfsz	wreg,f,c
  1710   0009A2  D7FE               	bra	u517
  1711   0009A4  F000               	nop	
  1712   0009A6                     
  1713                           ;LCD.c: 168:             LATDbits.LATD2 = 0;
  1714   0009A6  948C               	bcf	140,2,c	;volatile
  1715   0009A8  EFBD  F004         	goto	l870
  1716   0009AC                     l884:
  1717                           
  1718                           ;LCD.c: 159:  while(aux == 0x80)
  1719   0009AC  0E80               	movlw	128
  1720   0009AE  180F               	xorwf	LEER_LCD@aux^0,w,c
  1721   0009B0  B4D8               	btfsc	status,2,c
  1722   0009B2  EFDD  F004         	goto	u11
  1723   0009B6  EFDF  F004         	goto	u10
  1724   0009BA                     u11:
  1725   0009BA  EFC2  F004         	goto	l87
  1726   0009BE                     u10:
  1727   0009BE  0012               	return		;funcret
  1728   0009C0                     __end_of_LEER_LCD:
  1729                           	callstack 0
  1730                           
  1731 ;; *************** function _ENVIA_NIBBLE *****************
  1732 ;; Defined at:
  1733 ;;		line 118 in file "LCD.c"
  1734 ;; Parameters:    Size  Location     Type
  1735 ;;  dato            1    wreg     unsigned char 
  1736 ;; Auto vars:     Size  Location     Type
  1737 ;;  dato            1   14[COMRAM] unsigned char 
  1738 ;; Return value:  Size  Location     Type
  1739 ;;                  1    wreg      void 
  1740 ;; Registers used:
  1741 ;;		wreg, status,2, status,0
  1742 ;; Tracked objects:
  1743 ;;		On entry : 0/0
  1744 ;;		On exit  : 0/0
  1745 ;;		Unchanged: 0/0
  1746 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1747 ;;      Params:         0       0       0       0       0       0       0       0       0
  1748 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1749 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1750 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1751 ;;Total ram usage:        1 bytes
  1752 ;; Hardware stack levels used: 1
  1753 ;; Hardware stack levels required when called: 4
  1754 ;; This function calls:
  1755 ;;		Nothing
  1756 ;; This function is called by:
  1757 ;;		_ENVIA_CHAR
  1758 ;;		_LCD_CONFIG
  1759 ;;		_ENVIA_LCD_CMD
  1760 ;; This function uses a non-reentrant model
  1761 ;;
  1762                           
  1763                           	psect	text16
  1764   000E48                     __ptext16:
  1765                           	callstack 0
  1766   000E48                     _ENVIA_NIBBLE:
  1767                           	callstack 23
  1768                           
  1769                           ;incstack = 0
  1770                           ;ENVIA_NIBBLE@dato stored from wreg
  1771   000E48  6E0F               	movwf	ENVIA_NIBBLE@dato^0,c
  1772   000E4A                     
  1773                           ;LCD.c: 118: void ENVIA_NIBBLE(unsigned char dato);LCD.c: 119: {;LCD.c: 120:  LATD &= 0x
      +                          0F;
  1774   000E4A  0E0F               	movlw	15
  1775   000E4C  168C               	andwf	140,f,c	;volatile
  1776                           
  1777                           ;LCD.c: 121:  dato &= 0xF0;
  1778   000E4E  0EF0               	movlw	240
  1779   000E50  160F               	andwf	ENVIA_NIBBLE@dato^0,f,c
  1780                           
  1781                           ;LCD.c: 122:  LATD|= dato;
  1782   000E52  500F               	movf	ENVIA_NIBBLE@dato^0,w,c	;volatile
  1783   000E54  128C               	iorwf	140,f,c	;volatile
  1784   000E56                     
  1785                           ;LCD.c: 123:  LATDbits.LATD2 = 1;
  1786   000E56  848C               	bsf	140,2,c	;volatile
  1787   000E58                     
  1788                           ;LCD.c: 124:     _delay((unsigned long)((100)*(4000000UL/4000000.0)));
  1789   000E58  0E21               	movlw	33
  1790   000E5A                     u527:
  1791   000E5A  2EE8               	decfsz	wreg,f,c
  1792   000E5C  D7FE               	bra	u527
  1793   000E5E  F000               	nop	
  1794   000E60                     
  1795                           ;LCD.c: 125:  LATDbits.LATD2 = 0;
  1796   000E60  948C               	bcf	140,2,c	;volatile
  1797   000E62  0012               	return		;funcret
  1798   000E64                     __end_of_ENVIA_NIBBLE:
  1799                           	callstack 0
  1800                           
  1801 ;; *************** function _INT_CCP2 *****************
  1802 ;; Defined at:
  1803 ;;		line 71 in file "CPP_compare.c"
  1804 ;; Parameters:    Size  Location     Type
  1805 ;;		None
  1806 ;; Auto vars:     Size  Location     Type
  1807 ;;		None
  1808 ;; Return value:  Size  Location     Type
  1809 ;;                  1    wreg      void 
  1810 ;; Registers used:
  1811 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1812 ;; Tracked objects:
  1813 ;;		On entry : 0/0
  1814 ;;		On exit  : 0/0
  1815 ;;		Unchanged: 0/0
  1816 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1817 ;;      Params:         0       0       0       0       0       0       0       0       0
  1818 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1819 ;;      Temps:          4       0       0       0       0       0       0       0       0
  1820 ;;      Totals:         4       0       0       0       0       0       0       0       0
  1821 ;;Total ram usage:        4 bytes
  1822 ;; Hardware stack levels used: 1
  1823 ;; Hardware stack levels required when called: 3
  1824 ;; This function calls:
  1825 ;;		i2_ESCRIBE_MENSAJE2
  1826 ;;		i2_POS_CURSOR
  1827 ;; This function is called by:
  1828 ;;		Interrupt level 2
  1829 ;; This function uses a non-reentrant model
  1830 ;;
  1831                           
  1832                           	psect	intcode
  1833   000008                     __pintcode:
  1834                           	callstack 0
  1835   000008                     _INT_CCP2:
  1836                           	callstack 22
  1837                           
  1838                           ;incstack = 0
  1839   000008  8222               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  1840   00000A  CFF6 F00B          	movff	tblptrl,??_INT_CCP2
  1841   00000E  CFF7 F00C          	movff	tblptrh,??_INT_CCP2+1
  1842   000012  CFF8 F00D          	movff	tblptru,??_INT_CCP2+2
  1843   000016  CFF5 F00E          	movff	tablat,??_INT_CCP2+3
  1844   00001A                     
  1845                           ;CPP_compare.c: 72:     PIR2bits.CCP2IF = 0;
  1846   00001A  90A1               	bcf	161,0,c	;volatile
  1847   00001C                     
  1848                           ;CPP_compare.c: 73:     POS_CURSOR(1,0);
  1849   00001C  0E00               	movlw	0
  1850   00001E  6E04               	movwf	i2POS_CURSOR@columna^0,c
  1851   000020  0E01               	movlw	1
  1852   000022  EC29  F006         	call	i2_POS_CURSOR
  1853   000026                     
  1854                           ;CPP_compare.c: 74:     ESCRIBE_MENSAJE2("YA HAY MATCH!!");
  1855   000026  0E01               	movlw	low STR_3
  1856   000028  6E05               	movwf	i2ESCRIBE_MENSAJE2@cadena^0,c
  1857   00002A  0E08               	movlw	high STR_3
  1858   00002C  6E06               	movwf	(i2ESCRIBE_MENSAJE2@cadena+1)^0,c
  1859   00002E  ECCA  F005         	call	i2_ESCRIBE_MENSAJE2	;wreg free
  1860   000032  C00E  FFF5         	movff	??_INT_CCP2+3,tablat
  1861   000036  C00D  FFF8         	movff	??_INT_CCP2+2,tblptru
  1862   00003A  C00C  FFF7         	movff	??_INT_CCP2+1,tblptrh
  1863   00003E  C00B  FFF6         	movff	??_INT_CCP2,tblptrl
  1864   000042  9222               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1865   000044  0011               	retfie		f
  1866   000046                     __end_of_INT_CCP2:
  1867                           	callstack 0
  1868                           
  1869 ;; *************** function i2_POS_CURSOR *****************
  1870 ;; Defined at:
  1871 ;;		line 5 in file "LCD.c"
  1872 ;; Parameters:    Size  Location     Type
  1873 ;;  fila            1    wreg     unsigned char 
  1874 ;;  columna         1    3[COMRAM] unsigned char 
  1875 ;; Auto vars:     Size  Location     Type
  1876 ;;  fila            1    4[COMRAM] unsigned char 
  1877 ;; Return value:  Size  Location     Type
  1878 ;;                  1    wreg      void 
  1879 ;; Registers used:
  1880 ;;		wreg, status,2, status,0, cstack
  1881 ;; Tracked objects:
  1882 ;;		On entry : 0/0
  1883 ;;		On exit  : 0/0
  1884 ;;		Unchanged: 0/0
  1885 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1886 ;;      Params:         1       0       0       0       0       0       0       0       0
  1887 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1888 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1889 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1890 ;;Total ram usage:        2 bytes
  1891 ;; Hardware stack levels used: 1
  1892 ;; Hardware stack levels required when called: 2
  1893 ;; This function calls:
  1894 ;;		i2_ENVIA_LCD_CMD
  1895 ;; This function is called by:
  1896 ;;		_INT_CCP2
  1897 ;; This function uses a non-reentrant model
  1898 ;;
  1899                           
  1900                           	psect	text18
  1901   000C52                     __ptext18:
  1902                           	callstack 0
  1903   000C52                     i2_POS_CURSOR:
  1904                           	callstack 22
  1905                           
  1906                           ;incstack = 0
  1907                           ;i2POS_CURSOR@fila stored from wreg
  1908   000C52  6E05               	movwf	i2POS_CURSOR@fila^0,c
  1909   000C54                     
  1910                           ;LCD.c: 5: void POS_CURSOR(unsigned char fila,unsigned char columna);LCD.c: 6: {;LCD.c: 
      +                          7:  if(fila == 1)
  1911   000C54  0405               	decf	i2POS_CURSOR@fila^0,w,c
  1912   000C56  A4D8               	btfss	status,2,c
  1913   000C58  EF30  F006         	goto	i2u37_41
  1914   000C5C  EF32  F006         	goto	i2u37_40
  1915   000C60                     i2u37_41:
  1916   000C60  EF38  F006         	goto	i2l1424
  1917   000C64                     i2u37_40:
  1918   000C64                     
  1919                           ;LCD.c: 8:  {;LCD.c: 9:   ENVIA_LCD_CMD(0x80+columna);
  1920   000C64  5004               	movf	i2POS_CURSOR@columna^0,w,c
  1921   000C66  0F80               	addlw	128
  1922   000C68  ECB2  F006         	call	i2_ENVIA_LCD_CMD
  1923                           
  1924                           ;LCD.c: 10:  }
  1925   000C6C  EF45  F006         	goto	i2l26
  1926   000C70                     i2l1424:
  1927   000C70  0E02               	movlw	2
  1928   000C72  1805               	xorwf	i2POS_CURSOR@fila^0,w,c
  1929   000C74  A4D8               	btfss	status,2,c
  1930   000C76  EF3F  F006         	goto	i2u38_41
  1931   000C7A  EF41  F006         	goto	i2u38_40
  1932   000C7E                     i2u38_41:
  1933   000C7E  EF45  F006         	goto	i2l26
  1934   000C82                     i2u38_40:
  1935   000C82                     
  1936                           ;LCD.c: 12:  {;LCD.c: 13:   ENVIA_LCD_CMD(0xC0+columna);
  1937   000C82  5004               	movf	i2POS_CURSOR@columna^0,w,c
  1938   000C84  0FC0               	addlw	192
  1939   000C86  ECB2  F006         	call	i2_ENVIA_LCD_CMD
  1940   000C8A                     i2l26:
  1941   000C8A  0012               	return		;funcret
  1942   000C8C                     __end_ofi2_POS_CURSOR:
  1943                           	callstack 0
  1944                           
  1945 ;; *************** function i2_ENVIA_LCD_CMD *****************
  1946 ;; Defined at:
  1947 ;;		line 128 in file "LCD.c"
  1948 ;; Parameters:    Size  Location     Type
  1949 ;;  dato            1    wreg     unsigned char 
  1950 ;; Auto vars:     Size  Location     Type
  1951 ;;  dato            1    1[COMRAM] unsigned char 
  1952 ;;  aux             1    2[COMRAM] unsigned char 
  1953 ;; Return value:  Size  Location     Type
  1954 ;;                  1    wreg      void 
  1955 ;; Registers used:
  1956 ;;		wreg, status,2, status,0, cstack
  1957 ;; Tracked objects:
  1958 ;;		On entry : 0/0
  1959 ;;		On exit  : 0/0
  1960 ;;		Unchanged: 0/0
  1961 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1962 ;;      Params:         0       0       0       0       0       0       0       0       0
  1963 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1964 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1965 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1966 ;;Total ram usage:        2 bytes
  1967 ;; Hardware stack levels used: 1
  1968 ;; Hardware stack levels required when called: 1
  1969 ;; This function calls:
  1970 ;;		i2_ENVIA_NIBBLE
  1971 ;;		i2_LEER_LCD
  1972 ;; This function is called by:
  1973 ;;		i2_POS_CURSOR
  1974 ;; This function uses a non-reentrant model
  1975 ;;
  1976                           
  1977                           	psect	text19
  1978   000D64                     __ptext19:
  1979                           	callstack 0
  1980   000D64                     i2_ENVIA_LCD_CMD:
  1981                           	callstack 22
  1982                           
  1983                           ;incstack = 0
  1984                           ;i2ENVIA_LCD_CMD@dato stored from wreg
  1985   000D64  6E02               	movwf	i2ENVIA_LCD_CMD@dato^0,c
  1986   000D66                     
  1987                           ;LCD.c: 128: void ENVIA_LCD_CMD(unsigned char dato);LCD.c: 129: {;LCD.c: 130:  unsigned 
      +                          char aux;;LCD.c: 131:  LATDbits.LATD0 = 0;
  1988   000D66  908C               	bcf	140,0,c	;volatile
  1989   000D68                     
  1990                           ;LCD.c: 132:  LEER_LCD();
  1991   000D68  ECE0  F004         	call	i2_LEER_LCD	;wreg free
  1992   000D6C                     
  1993                           ;LCD.c: 133:  TRISD = 0b00000000;
  1994   000D6C  0E00               	movlw	0
  1995   000D6E  6E95               	movwf	149,c	;volatile
  1996   000D70                     
  1997                           ;LCD.c: 134:     _delay((unsigned long)((100)*(4000000UL/4000000.0)));
  1998   000D70  0E21               	movlw	33
  1999   000D72                     i2u53_47:
  2000   000D72  2EE8               	decfsz	wreg,f,c
  2001   000D74  D7FE               	bra	i2u53_47
  2002   000D76  F000               	nop	
  2003   000D78                     
  2004                           ;LCD.c: 135:     LATDbits.LATD1 = 0;
  2005   000D78  928C               	bcf	140,1,c	;volatile
  2006   000D7A                     
  2007                           ;LCD.c: 136:  LATDbits.LATD2 = 0;
  2008   000D7A  948C               	bcf	140,2,c	;volatile
  2009   000D7C                     
  2010                           ;LCD.c: 137:  LATDbits.LATD0 = 0;
  2011   000D7C  908C               	bcf	140,0,c	;volatile
  2012   000D7E                     
  2013                           ;LCD.c: 138:  aux = dato & 0xF0;
  2014   000D7E  5002               	movf	i2ENVIA_LCD_CMD@dato^0,w,c
  2015   000D80  0BF0               	andlw	240
  2016   000D82  6E03               	movwf	i2ENVIA_LCD_CMD@aux^0,c
  2017   000D84                     
  2018                           ;LCD.c: 139:  ENVIA_NIBBLE(aux);
  2019   000D84  5003               	movf	i2ENVIA_LCD_CMD@aux^0,w,c
  2020   000D86  EC32  F007         	call	i2_ENVIA_NIBBLE
  2021   000D8A                     
  2022                           ;LCD.c: 140:  aux = dato<<4;
  2023   000D8A  3802               	swapf	i2ENVIA_LCD_CMD@dato^0,w,c
  2024   000D8C  0BF0               	andlw	240
  2025   000D8E  6E03               	movwf	i2ENVIA_LCD_CMD@aux^0,c
  2026   000D90                     
  2027                           ;LCD.c: 141:  ENVIA_NIBBLE(aux);
  2028   000D90  5003               	movf	i2ENVIA_LCD_CMD@aux^0,w,c
  2029   000D92  EC32  F007         	call	i2_ENVIA_NIBBLE
  2030   000D96  0012               	return		;funcret
  2031   000D98                     __end_ofi2_ENVIA_LCD_CMD:
  2032                           	callstack 0
  2033                           
  2034 ;; *************** function i2_ESCRIBE_MENSAJE2 *****************
  2035 ;; Defined at:
  2036 ;;		line 69 in file "LCD.c"
  2037 ;; Parameters:    Size  Location     Type
  2038 ;;  cadena          2    4[COMRAM] PTR const unsigned char 
  2039 ;;		 -> STR_3(15), STR_2(9), STR_1(10), 
  2040 ;; Auto vars:     Size  Location     Type
  2041 ;;  i               1    9[COMRAM] unsigned char 
  2042 ;;  tam             1    8[COMRAM] unsigned char 
  2043 ;; Return value:  Size  Location     Type
  2044 ;;                  1    wreg      void 
  2045 ;; Registers used:
  2046 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2047 ;; Tracked objects:
  2048 ;;		On entry : 0/0
  2049 ;;		On exit  : 0/0
  2050 ;;		Unchanged: 0/0
  2051 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2052 ;;      Params:         2       0       0       0       0       0       0       0       0
  2053 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2054 ;;      Temps:          2       0       0       0       0       0       0       0       0
  2055 ;;      Totals:         6       0       0       0       0       0       0       0       0
  2056 ;;Total ram usage:        6 bytes
  2057 ;; Hardware stack levels used: 1
  2058 ;; Hardware stack levels required when called: 2
  2059 ;; This function calls:
  2060 ;;		i2_ENVIA_CHAR
  2061 ;;		i2_strlen
  2062 ;; This function is called by:
  2063 ;;		_INT_CCP2
  2064 ;; This function uses a non-reentrant model
  2065 ;;
  2066                           
  2067                           	psect	text20
  2068   000B94                     __ptext20:
  2069                           	callstack 0
  2070   000B94                     i2_ESCRIBE_MENSAJE2:
  2071                           	callstack 22
  2072   000B94                     
  2073                           ;LCD.c: 69: void ESCRIBE_MENSAJE2(const char *cadena);LCD.c: 70: {;LCD.c: 71:     unsign
      +                          ed char tam;;LCD.c: 72:     tam = strlen(cadena);
  2074   000B94  C005  F001         	movff	i2ESCRIBE_MENSAJE2@cadena,i2strlen@s
  2075   000B98  C006  F002         	movff	i2ESCRIBE_MENSAJE2@cadena+1,i2strlen@s+1
  2076   000B9C  EC46  F006         	call	i2_strlen	;wreg free
  2077   000BA0  5001               	movf	?i2_strlen^0,w,c
  2078   000BA2  6E09               	movwf	i2ESCRIBE_MENSAJE2@tam^0,c
  2079   000BA4                     
  2080                           ;LCD.c: 74:  for(i = 0; i<tam; i++)
  2081   000BA4  0E00               	movlw	0
  2082   000BA6  6E0A               	movwf	i2ESCRIBE_MENSAJE2@i^0,c
  2083   000BA8  EFE5  F005         	goto	i2l1438
  2084   000BAC                     i2l1434:
  2085                           
  2086                           ;LCD.c: 75:  {;LCD.c: 76:   ENVIA_CHAR(cadena[i]);
  2087   000BAC  500A               	movf	i2ESCRIBE_MENSAJE2@i^0,w,c
  2088   000BAE  2405               	addwf	i2ESCRIBE_MENSAJE2@cadena^0,w,c
  2089   000BB0  6E07               	movwf	??i2_ESCRIBE_MENSAJE2^0,c
  2090   000BB2  0E00               	movlw	0
  2091   000BB4  2006               	addwfc	(i2ESCRIBE_MENSAJE2@cadena+1)^0,w,c
  2092   000BB6  6E08               	movwf	(??i2_ESCRIBE_MENSAJE2+1)^0,c
  2093   000BB8  C007  FFF6         	movff	??i2_ESCRIBE_MENSAJE2,tblptrl
  2094   000BBC  C008  FFF7         	movff	??i2_ESCRIBE_MENSAJE2+1,tblptrh
  2095   000BC0                     	if	0	;tblptru may be non-zero
  2096   000BC0                     	endif
  2097   000BC0                     	if	0	;tblptru may be non-zero
  2098   000BC0                     	endif
  2099   000BC0  0008               	tblrd		*
  2100   000BC2  50F5               	movf	tablat,w,c
  2101   000BC4  ECCC  F006         	call	i2_ENVIA_CHAR
  2102   000BC8                     
  2103                           ;LCD.c: 77:  }
  2104   000BC8  2A0A               	incf	i2ESCRIBE_MENSAJE2@i^0,f,c
  2105   000BCA                     i2l1438:
  2106   000BCA  5009               	movf	i2ESCRIBE_MENSAJE2@tam^0,w,c
  2107   000BCC  5C0A               	subwf	i2ESCRIBE_MENSAJE2@i^0,w,c
  2108   000BCE  A0D8               	btfss	status,0,c
  2109   000BD0  EFEC  F005         	goto	i2u39_41
  2110   000BD4  EFEE  F005         	goto	i2u39_40
  2111   000BD8                     i2u39_41:
  2112   000BD8  EFD6  F005         	goto	i2l1434
  2113   000BDC                     i2u39_40:
  2114   000BDC  0012               	return		;funcret
  2115   000BDE                     __end_ofi2_ESCRIBE_MENSAJE2:
  2116                           	callstack 0
  2117                           
  2118 ;; *************** function i2_strlen *****************
  2119 ;; Defined at:
  2120 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\strlen.c"
  2121 ;; Parameters:    Size  Location     Type
  2122 ;;  s               2    0[COMRAM] PTR const unsigned char 
  2123 ;;		 -> STR_3(15), STR_2(9), STR_1(10), 
  2124 ;; Auto vars:     Size  Location     Type
  2125 ;;  a               2    2[COMRAM] PTR const unsigned char 
  2126 ;;		 -> STR_3(15), STR_2(9), STR_1(10), 
  2127 ;; Return value:  Size  Location     Type
  2128 ;;                  2    0[COMRAM] unsigned int 
  2129 ;; Registers used:
  2130 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
  2131 ;; Tracked objects:
  2132 ;;		On entry : 0/0
  2133 ;;		On exit  : 0/0
  2134 ;;		Unchanged: 0/0
  2135 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2136 ;;      Params:         2       0       0       0       0       0       0       0       0
  2137 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2138 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2139 ;;      Totals:         4       0       0       0       0       0       0       0       0
  2140 ;;Total ram usage:        4 bytes
  2141 ;; Hardware stack levels used: 1
  2142 ;; This function calls:
  2143 ;;		Nothing
  2144 ;; This function is called by:
  2145 ;;		i2_ESCRIBE_MENSAJE2
  2146 ;; This function uses a non-reentrant model
  2147 ;;
  2148                           
  2149                           	psect	text21
  2150   000C8C                     __ptext21:
  2151                           	callstack 0
  2152   000C8C                     i2_strlen:
  2153                           	callstack 23
  2154   000C8C  C001  F003         	movff	i2strlen@s,i2strlen@a
  2155   000C90  C002  F004         	movff	i2strlen@s+1,i2strlen@a+1
  2156   000C94  EF4E  F006         	goto	i2l1392
  2157   000C98                     i2l1390:
  2158   000C98  4A01               	infsnz	i2strlen@s^0,f,c
  2159   000C9A  2A02               	incf	(i2strlen@s+1)^0,f,c
  2160   000C9C                     i2l1392:
  2161   000C9C  C001  FFF6         	movff	i2strlen@s,tblptrl
  2162   000CA0  C002  FFF7         	movff	i2strlen@s+1,tblptrh
  2163   000CA4                     	if	0	;tblptru may be non-zero
  2164   000CA4                     	endif
  2165   000CA4                     	if	0	;tblptru may be non-zero
  2166   000CA4                     	endif
  2167   000CA4  0008               	tblrd		*
  2168   000CA6  50F5               	movf	tablat,w,c
  2169   000CA8  0900               	iorlw	0
  2170   000CAA  A4D8               	btfss	status,2,c
  2171   000CAC  EF5A  F006         	goto	i2u33_41
  2172   000CB0  EF5C  F006         	goto	i2u33_40
  2173   000CB4                     i2u33_41:
  2174   000CB4  EF4C  F006         	goto	i2l1390
  2175   000CB8                     i2u33_40:
  2176   000CB8  5003               	movf	i2strlen@a^0,w,c
  2177   000CBA  5C01               	subwf	i2strlen@s^0,w,c
  2178   000CBC  6E01               	movwf	?i2_strlen^0,c
  2179   000CBE  5004               	movf	(i2strlen@a+1)^0,w,c
  2180   000CC0  5802               	subwfb	(i2strlen@s+1)^0,w,c
  2181   000CC2  6E02               	movwf	(?i2_strlen+1)^0,c
  2182   000CC4  0012               	return		;funcret
  2183   000CC6                     __end_ofi2_strlen:
  2184                           	callstack 0
  2185                           
  2186 ;; *************** function i2_ENVIA_CHAR *****************
  2187 ;; Defined at:
  2188 ;;		line 80 in file "LCD.c"
  2189 ;; Parameters:    Size  Location     Type
  2190 ;;  dato            1    wreg     unsigned char 
  2191 ;; Auto vars:     Size  Location     Type
  2192 ;;  dato            1    1[COMRAM] unsigned char 
  2193 ;;  aux             1    2[COMRAM] unsigned char 
  2194 ;; Return value:  Size  Location     Type
  2195 ;;                  1    wreg      void 
  2196 ;; Registers used:
  2197 ;;		wreg, status,2, status,0, cstack
  2198 ;; Tracked objects:
  2199 ;;		On entry : 0/0
  2200 ;;		On exit  : 0/0
  2201 ;;		Unchanged: 0/0
  2202 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2203 ;;      Params:         0       0       0       0       0       0       0       0       0
  2204 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2205 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2206 ;;      Totals:         2       0       0       0       0       0       0       0       0
  2207 ;;Total ram usage:        2 bytes
  2208 ;; Hardware stack levels used: 1
  2209 ;; Hardware stack levels required when called: 1
  2210 ;; This function calls:
  2211 ;;		i2_ENVIA_NIBBLE
  2212 ;;		i2_LEER_LCD
  2213 ;; This function is called by:
  2214 ;;		i2_ESCRIBE_MENSAJE2
  2215 ;; This function uses a non-reentrant model
  2216 ;;
  2217                           
  2218                           	psect	text22
  2219   000D98                     __ptext22:
  2220                           	callstack 0
  2221   000D98                     i2_ENVIA_CHAR:
  2222                           	callstack 22
  2223                           
  2224                           ;incstack = 0
  2225                           ;i2ENVIA_CHAR@dato stored from wreg
  2226   000D98  6E02               	movwf	i2ENVIA_CHAR@dato^0,c
  2227   000D9A                     
  2228                           ;LCD.c: 80: void ENVIA_CHAR(unsigned char dato);LCD.c: 81: {;LCD.c: 82:  unsigned char a
      +                          ux;;LCD.c: 83:  LATDbits.LATD0 = 1;
  2229   000D9A  808C               	bsf	140,0,c	;volatile
  2230   000D9C                     
  2231                           ;LCD.c: 84:  LEER_LCD();
  2232   000D9C  ECE0  F004         	call	i2_LEER_LCD	;wreg free
  2233   000DA0                     
  2234                           ;LCD.c: 85:  TRISD = 0x00;
  2235   000DA0  0E00               	movlw	0
  2236   000DA2  6E95               	movwf	149,c	;volatile
  2237   000DA4                     
  2238                           ;LCD.c: 86:     _delay((unsigned long)((100)*(4000000UL/4000000.0)));
  2239   000DA4  0E21               	movlw	33
  2240   000DA6                     i2u54_47:
  2241   000DA6  2EE8               	decfsz	wreg,f,c
  2242   000DA8  D7FE               	bra	i2u54_47
  2243   000DAA  F000               	nop	
  2244   000DAC                     
  2245                           ;LCD.c: 87:  LATDbits.LATD1 = 0;
  2246   000DAC  928C               	bcf	140,1,c	;volatile
  2247   000DAE                     
  2248                           ;LCD.c: 88:  LATDbits.LATD2 = 0;
  2249   000DAE  948C               	bcf	140,2,c	;volatile
  2250   000DB0                     
  2251                           ;LCD.c: 89:  LATDbits.LATD0 = 1;
  2252   000DB0  808C               	bsf	140,0,c	;volatile
  2253   000DB2                     
  2254                           ;LCD.c: 90:  aux = dato & 0xF0;
  2255   000DB2  5002               	movf	i2ENVIA_CHAR@dato^0,w,c
  2256   000DB4  0BF0               	andlw	240
  2257   000DB6  6E03               	movwf	i2ENVIA_CHAR@aux^0,c
  2258   000DB8                     
  2259                           ;LCD.c: 91:  ENVIA_NIBBLE(aux);
  2260   000DB8  5003               	movf	i2ENVIA_CHAR@aux^0,w,c
  2261   000DBA  EC32  F007         	call	i2_ENVIA_NIBBLE
  2262   000DBE                     
  2263                           ;LCD.c: 92:  aux = dato << 4;
  2264   000DBE  3802               	swapf	i2ENVIA_CHAR@dato^0,w,c
  2265   000DC0  0BF0               	andlw	240
  2266   000DC2  6E03               	movwf	i2ENVIA_CHAR@aux^0,c
  2267   000DC4                     
  2268                           ;LCD.c: 93:  ENVIA_NIBBLE(aux);
  2269   000DC4  5003               	movf	i2ENVIA_CHAR@aux^0,w,c
  2270   000DC6  EC32  F007         	call	i2_ENVIA_NIBBLE
  2271   000DCA  0012               	return		;funcret
  2272   000DCC                     __end_ofi2_ENVIA_CHAR:
  2273                           	callstack 0
  2274                           
  2275 ;; *************** function i2_LEER_LCD *****************
  2276 ;; Defined at:
  2277 ;;		line 144 in file "LCD.c"
  2278 ;; Parameters:    Size  Location     Type
  2279 ;;		None
  2280 ;; Auto vars:     Size  Location     Type
  2281 ;;  aux             1    0[COMRAM] unsigned char 
  2282 ;; Return value:  Size  Location     Type
  2283 ;;                  1    wreg      void 
  2284 ;; Registers used:
  2285 ;;		wreg, status,2, status,0
  2286 ;; Tracked objects:
  2287 ;;		On entry : 0/0
  2288 ;;		On exit  : 0/0
  2289 ;;		Unchanged: 0/0
  2290 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2291 ;;      Params:         0       0       0       0       0       0       0       0       0
  2292 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2293 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2294 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2295 ;;Total ram usage:        1 bytes
  2296 ;; Hardware stack levels used: 1
  2297 ;; This function calls:
  2298 ;;		Nothing
  2299 ;; This function is called by:
  2300 ;;		i2_ENVIA_CHAR
  2301 ;;		i2_ENVIA_LCD_CMD
  2302 ;; This function uses a non-reentrant model
  2303 ;;
  2304                           
  2305                           	psect	text23
  2306   0009C0                     __ptext23:
  2307                           	callstack 0
  2308   0009C0                     i2_LEER_LCD:
  2309                           	callstack 22
  2310   0009C0                     
  2311                           ;LCD.c: 146:  unsigned char aux;;LCD.c: 147:  TRISD = 0xF8;
  2312   0009C0  0EF8               	movlw	248
  2313   0009C2  6E95               	movwf	149,c	;volatile
  2314   0009C4                     
  2315                           ;LCD.c: 148:  LATDbits.LATD0 = 0;
  2316   0009C4  908C               	bcf	140,0,c	;volatile
  2317   0009C6                     
  2318                           ;LCD.c: 149:  LATDbits.LATD1 = 1;
  2319   0009C6  828C               	bsf	140,1,c	;volatile
  2320   0009C8                     
  2321                           ;LCD.c: 150:  LATDbits.LATD2 = 1;
  2322   0009C8  848C               	bsf	140,2,c	;volatile
  2323   0009CA                     
  2324                           ;LCD.c: 151:     _delay((unsigned long)((100)*(4000000UL/4000000.0)));
  2325   0009CA  0E21               	movlw	33
  2326   0009CC                     i2u55_47:
  2327   0009CC  2EE8               	decfsz	wreg,f,c
  2328   0009CE  D7FE               	bra	i2u55_47
  2329   0009D0  F000               	nop	
  2330   0009D2                     
  2331                           ;LCD.c: 152:  aux = PORTD;
  2332   0009D2  CF83 F001          	movff	3971,i2LEER_LCD@aux	;volatile
  2333   0009D6                     
  2334                           ;LCD.c: 153:  LATDbits.LATD2 = 0;
  2335   0009D6  948C               	bcf	140,2,c	;volatile
  2336   0009D8                     
  2337                           ;LCD.c: 154:     _delay((unsigned long)((100)*(4000000UL/4000000.0)));
  2338   0009D8  0E21               	movlw	33
  2339   0009DA                     i2u56_47:
  2340   0009DA  2EE8               	decfsz	wreg,f,c
  2341   0009DC  D7FE               	bra	i2u56_47
  2342   0009DE  F000               	nop	
  2343   0009E0                     
  2344                           ;LCD.c: 155:  LATDbits.LATD2 = 1;
  2345   0009E0  848C               	bsf	140,2,c	;volatile
  2346   0009E2                     
  2347                           ;LCD.c: 156:     _delay((unsigned long)((100)*(4000000UL/4000000.0)));
  2348   0009E2  0E21               	movlw	33
  2349   0009E4                     i2u57_47:
  2350   0009E4  2EE8               	decfsz	wreg,f,c
  2351   0009E6  D7FE               	bra	i2u57_47
  2352   0009E8  F000               	nop	
  2353   0009EA                     
  2354                           ;LCD.c: 157:  LATDbits.LATD2 = 0;
  2355   0009EA  948C               	bcf	140,2,c	;volatile
  2356   0009EC                     i2l1280:
  2357                           
  2358                           ;LCD.c: 158:  aux = aux & 0x80;
  2359   0009EC  5001               	movf	i2LEER_LCD@aux^0,w,c
  2360   0009EE  0B80               	andlw	128
  2361   0009F0  6E01               	movwf	i2LEER_LCD@aux^0,c
  2362                           
  2363                           ;LCD.c: 159:  while(aux == 0x80)
  2364   0009F2  EF0F  F005         	goto	i2l1294
  2365   0009F6                     i2l87:
  2366                           
  2367                           ;LCD.c: 160:         {;LCD.c: 161:             LATDbits.LATD2 = 1;
  2368   0009F6  848C               	bsf	140,2,c	;volatile
  2369   0009F8                     
  2370                           ;LCD.c: 162:             _delay((unsigned long)((100)*(4000000UL/4000000.0)));
  2371   0009F8  0E21               	movlw	33
  2372   0009FA                     i2u58_47:
  2373   0009FA  2EE8               	decfsz	wreg,f,c
  2374   0009FC  D7FE               	bra	i2u58_47
  2375   0009FE  F000               	nop	
  2376   000A00                     
  2377                           ;LCD.c: 163:             aux = PORTD;
  2378   000A00  CF83 F001          	movff	3971,i2LEER_LCD@aux	;volatile
  2379   000A04                     
  2380                           ;LCD.c: 164:             LATDbits.LATD2 = 0;
  2381   000A04  948C               	bcf	140,2,c	;volatile
  2382                           
  2383                           ;LCD.c: 165:             _delay((unsigned long)((100)*(4000000UL/4000000.0)));
  2384   000A06  0E21               	movlw	33
  2385   000A08                     i2u59_47:
  2386   000A08  2EE8               	decfsz	wreg,f,c
  2387   000A0A  D7FE               	bra	i2u59_47
  2388   000A0C  F000               	nop	
  2389   000A0E                     
  2390                           ;LCD.c: 166:             LATDbits.LATD2 = 1;
  2391   000A0E  848C               	bsf	140,2,c	;volatile
  2392                           
  2393                           ;LCD.c: 167:             _delay((unsigned long)((100)*(4000000UL/4000000.0)));
  2394   000A10  0E21               	movlw	33
  2395   000A12                     i2u60_47:
  2396   000A12  2EE8               	decfsz	wreg,f,c
  2397   000A14  D7FE               	bra	i2u60_47
  2398   000A16  F000               	nop	
  2399   000A18                     
  2400                           ;LCD.c: 168:             LATDbits.LATD2 = 0;
  2401   000A18  948C               	bcf	140,2,c	;volatile
  2402   000A1A  EFF6  F004         	goto	i2l1280
  2403   000A1E                     i2l1294:
  2404                           
  2405                           ;LCD.c: 159:  while(aux == 0x80)
  2406   000A1E  0E80               	movlw	128
  2407   000A20  1801               	xorwf	i2LEER_LCD@aux^0,w,c
  2408   000A22  B4D8               	btfsc	status,2,c
  2409   000A24  EF16  F005         	goto	i2u25_41
  2410   000A28  EF18  F005         	goto	i2u25_40
  2411   000A2C                     i2u25_41:
  2412   000A2C  EFFB  F004         	goto	i2l87
  2413   000A30                     i2u25_40:
  2414   000A30  0012               	return		;funcret
  2415   000A32                     __end_ofi2_LEER_LCD:
  2416                           	callstack 0
  2417                           
  2418 ;; *************** function i2_ENVIA_NIBBLE *****************
  2419 ;; Defined at:
  2420 ;;		line 118 in file "LCD.c"
  2421 ;; Parameters:    Size  Location     Type
  2422 ;;  dato            1    wreg     unsigned char 
  2423 ;; Auto vars:     Size  Location     Type
  2424 ;;  dato            1    0[COMRAM] unsigned char 
  2425 ;; Return value:  Size  Location     Type
  2426 ;;                  1    wreg      void 
  2427 ;; Registers used:
  2428 ;;		wreg, status,2, status,0
  2429 ;; Tracked objects:
  2430 ;;		On entry : 0/0
  2431 ;;		On exit  : 0/0
  2432 ;;		Unchanged: 0/0
  2433 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2434 ;;      Params:         0       0       0       0       0       0       0       0       0
  2435 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2436 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2437 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2438 ;;Total ram usage:        1 bytes
  2439 ;; Hardware stack levels used: 1
  2440 ;; This function calls:
  2441 ;;		Nothing
  2442 ;; This function is called by:
  2443 ;;		i2_ENVIA_CHAR
  2444 ;;		i2_ENVIA_LCD_CMD
  2445 ;; This function uses a non-reentrant model
  2446 ;;
  2447                           
  2448                           	psect	text24
  2449   000E64                     __ptext24:
  2450                           	callstack 0
  2451   000E64                     i2_ENVIA_NIBBLE:
  2452                           	callstack 22
  2453                           
  2454                           ;incstack = 0
  2455                           ;i2ENVIA_NIBBLE@dato stored from wreg
  2456   000E64  6E01               	movwf	i2ENVIA_NIBBLE@dato^0,c
  2457   000E66                     
  2458                           ;LCD.c: 118: void ENVIA_NIBBLE(unsigned char dato);LCD.c: 119: {;LCD.c: 120:  LATD &= 0x
      +                          0F;
  2459   000E66  0E0F               	movlw	15
  2460   000E68  168C               	andwf	140,f,c	;volatile
  2461                           
  2462                           ;LCD.c: 121:  dato &= 0xF0;
  2463   000E6A  0EF0               	movlw	240
  2464   000E6C  1601               	andwf	i2ENVIA_NIBBLE@dato^0,f,c
  2465                           
  2466                           ;LCD.c: 122:  LATD|= dato;
  2467   000E6E  5001               	movf	i2ENVIA_NIBBLE@dato^0,w,c	;volatile
  2468   000E70  128C               	iorwf	140,f,c	;volatile
  2469   000E72                     
  2470                           ;LCD.c: 123:  LATDbits.LATD2 = 1;
  2471   000E72  848C               	bsf	140,2,c	;volatile
  2472   000E74                     
  2473                           ;LCD.c: 124:     _delay((unsigned long)((100)*(4000000UL/4000000.0)));
  2474   000E74  0E21               	movlw	33
  2475   000E76                     i2u61_47:
  2476   000E76  2EE8               	decfsz	wreg,f,c
  2477   000E78  D7FE               	bra	i2u61_47
  2478   000E7A  F000               	nop	
  2479   000E7C                     
  2480                           ;LCD.c: 125:  LATDbits.LATD2 = 0;
  2481   000E7C  948C               	bcf	140,2,c	;volatile
  2482   000E7E  0012               	return		;funcret
  2483   000E80                     __end_ofi2_ENVIA_NIBBLE:
  2484                           	callstack 0
  2485                           
  2486                           	psect	rparam
  2487   000000                     
  2488                           	psect	temp
  2489   000022                     btemp:
  2490                           	callstack 0
  2491   000022                     	ds	1
  2492   000000                     int$flags	set	btemp
  2493   000000                     wtemp8	set	btemp+1
  2494   000000                     ttemp5	set	btemp+1
  2495   000000                     ttemp6	set	btemp+4
  2496   000000                     ttemp7	set	btemp+8
  2497                           
  2498                           	psect	idloc
  2499                           
  2500                           ;Config register IDLOC0 @ 0x200000
  2501                           ;	unspecified, using default values
  2502   200000                     	org	2097152
  2503   200000  FF                 	db	255
  2504                           
  2505                           ;Config register IDLOC1 @ 0x200001
  2506                           ;	unspecified, using default values
  2507   200001                     	org	2097153
  2508   200001  FF                 	db	255
  2509                           
  2510                           ;Config register IDLOC2 @ 0x200002
  2511                           ;	unspecified, using default values
  2512   200002                     	org	2097154
  2513   200002  FF                 	db	255
  2514                           
  2515                           ;Config register IDLOC3 @ 0x200003
  2516                           ;	unspecified, using default values
  2517   200003                     	org	2097155
  2518   200003  FF                 	db	255
  2519                           
  2520                           ;Config register IDLOC4 @ 0x200004
  2521                           ;	unspecified, using default values
  2522   200004                     	org	2097156
  2523   200004  FF                 	db	255
  2524                           
  2525                           ;Config register IDLOC5 @ 0x200005
  2526                           ;	unspecified, using default values
  2527   200005                     	org	2097157
  2528   200005  FF                 	db	255
  2529                           
  2530                           ;Config register IDLOC6 @ 0x200006
  2531                           ;	unspecified, using default values
  2532   200006                     	org	2097158
  2533   200006  FF                 	db	255
  2534                           
  2535                           ;Config register IDLOC7 @ 0x200007
  2536                           ;	unspecified, using default values
  2537   200007                     	org	2097159
  2538   200007  FF                 	db	255
  2539                           
  2540                           	psect	config
  2541                           
  2542                           ;Config register CONFIG1L @ 0x300000
  2543                           ;	PLL Selection
  2544                           ;	PLLSEL = PLL4X, 4x clock multiplier
  2545                           ;	PLL Enable Configuration bit
  2546                           ;	CFGPLLEN = OFF, PLL Disabled (firmware controlled)
  2547                           ;	CPU System Clock Postscaler
  2548                           ;	CPUDIV = NOCLKDIV, CPU uses system clock (no divide)
  2549                           ;	Low Speed USB mode with 48 MHz system clock
  2550                           ;	LS48MHZ = SYS24X4, System clock at 24 MHz, USB clock divider is set to 4
  2551   300000                     	org	3145728
  2552   300000  00                 	db	0
  2553                           
  2554                           ;Config register CONFIG1H @ 0x300001
  2555                           ;	Oscillator Selection
  2556                           ;	FOSC = INTOSCIO, Internal oscillator
  2557                           ;	Primary Oscillator Shutdown
  2558                           ;	PCLKEN = OFF, Primary oscillator shutdown firmware controlled
  2559                           ;	Fail-Safe Clock Monitor
  2560                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
  2561                           ;	Internal/External Oscillator Switchover
  2562                           ;	IESO = OFF, Oscillator Switchover mode disabled
  2563   300001                     	org	3145729
  2564   300001  08                 	db	8
  2565                           
  2566                           ;Config register CONFIG2L @ 0x300002
  2567                           ;	Power-up Timer Enable
  2568                           ;	nPWRTEN = ON, Power up timer enabled
  2569                           ;	Brown-out Reset Enable
  2570                           ;	BOREN = OFF, BOR disabled in hardware (SBOREN is ignored)
  2571                           ;	Brown-out Reset Voltage
  2572                           ;	BORV = 190, BOR set to 1.9V nominal
  2573                           ;	Low-Power Brown-out Reset
  2574                           ;	nLPBOR = OFF, Low-Power Brown-out Reset disabled
  2575   300002                     	org	3145730
  2576   300002  58                 	db	88
  2577                           
  2578                           ;Config register CONFIG2H @ 0x300003
  2579                           ;	Watchdog Timer Enable bits
  2580                           ;	WDTEN = OFF, WDT disabled in hardware (SWDTEN ignored)
  2581                           ;	Watchdog Timer Postscaler
  2582                           ;	WDTPS = 32768, 1:32768
  2583   300003                     	org	3145731
  2584   300003  3C                 	db	60
  2585                           
  2586                           ; Padding undefined space
  2587   300004                     	org	3145732
  2588   300004  FF                 	db	255
  2589                           
  2590                           ;Config register CONFIG3H @ 0x300005
  2591                           ;	CCP2 MUX bit
  2592                           ;	CCP2MX = RC1, CCP2 input/output is multiplexed with RC1
  2593                           ;	PORTB A/D Enable bit
  2594                           ;	PBADEN = OFF, PORTB<5:0> pins are configured as digital I/O on Reset
  2595                           ;	Timer3 Clock Input MUX bit
  2596                           ;	T3CMX = RC0, T3CKI function is on RC0
  2597                           ;	SDO Output MUX bit
  2598                           ;	SDOMX = RB3, SDO function is on RB3
  2599                           ;	Master Clear Reset Pin Enable
  2600                           ;	MCLRE = ON, MCLR pin enabled; RE3 input disabled
  2601   300005                     	org	3145733
  2602   300005  D1                 	db	209
  2603                           
  2604                           ;Config register CONFIG4L @ 0x300006
  2605                           ;	Stack Full/Underflow Reset
  2606                           ;	STVREN = ON, Stack full/underflow will cause Reset
  2607                           ;	Single-Supply ICSP Enable bit
  2608                           ;	LVP = OFF, Single-Supply ICSP disabled
  2609                           ;	Dedicated In-Circuit Debug/Programming Port Enable
  2610                           ;	ICPRT = OFF, ICPORT disabled
  2611                           ;	Extended Instruction Set Enable bit
  2612                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled
  2613                           ;	Background Debugger Enable bit
  2614                           ;	DEBUG = 0x1, unprogrammed default
  2615   300006                     	org	3145734
  2616   300006  81                 	db	129
  2617                           
  2618                           ; Padding undefined space
  2619   300007                     	org	3145735
  2620   300007  FF                 	db	255
  2621                           
  2622                           ;Config register CONFIG5L @ 0x300008
  2623                           ;	Block 0 Code Protect
  2624                           ;	CP0 = OFF, Block 0 is not code-protected
  2625                           ;	Block 1 Code Protect
  2626                           ;	CP1 = OFF, Block 1 is not code-protected
  2627                           ;	Block 2 Code Protect
  2628                           ;	CP2 = OFF, Block 2 is not code-protected
  2629                           ;	Block 3 Code Protect
  2630                           ;	CP3 = OFF, Block 3 is not code-protected
  2631   300008                     	org	3145736
  2632   300008  0F                 	db	15
  2633                           
  2634                           ;Config register CONFIG5H @ 0x300009
  2635                           ;	Boot Block Code Protect
  2636                           ;	CPB = OFF, Boot block is not code-protected
  2637                           ;	Data EEPROM Code Protect
  2638                           ;	CPD = OFF, Data EEPROM is not code-protected
  2639   300009                     	org	3145737
  2640   300009  C0                 	db	192
  2641                           
  2642                           ;Config register CONFIG6L @ 0x30000A
  2643                           ;	Block 0 Write Protect
  2644                           ;	WRT0 = OFF, Block 0 (0800-1FFFh) is not write-protected
  2645                           ;	Block 1 Write Protect
  2646                           ;	WRT1 = OFF, Block 1 (2000-3FFFh) is not write-protected
  2647                           ;	Block 2 Write Protect
  2648                           ;	WRT2 = OFF, Block 2 (04000-5FFFh) is not write-protected
  2649                           ;	Block 3 Write Protect
  2650                           ;	WRT3 = OFF, Block 3 (06000-7FFFh) is not write-protected
  2651   30000A                     	org	3145738
  2652   30000A  0F                 	db	15
  2653                           
  2654                           ;Config register CONFIG6H @ 0x30000B
  2655                           ;	Configuration Registers Write Protect
  2656                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) are not write-protected
  2657                           ;	Boot Block Write Protect
  2658                           ;	WRTB = OFF, Boot block (0000-7FFh) is not write-protected
  2659                           ;	Data EEPROM Write Protect
  2660                           ;	WRTD = OFF, Data EEPROM is not write-protected
  2661   30000B                     	org	3145739
  2662   30000B  E0                 	db	224
  2663                           
  2664                           ;Config register CONFIG7L @ 0x30000C
  2665                           ;	Block 0 Table Read Protect
  2666                           ;	EBTR0 = OFF, Block 0 is not protected from table reads executed in other blocks
  2667                           ;	Block 1 Table Read Protect
  2668                           ;	EBTR1 = OFF, Block 1 is not protected from table reads executed in other blocks
  2669                           ;	Block 2 Table Read Protect
  2670                           ;	EBTR2 = OFF, Block 2 is not protected from table reads executed in other blocks
  2671                           ;	Block 3 Table Read Protect
  2672                           ;	EBTR3 = OFF, Block 3 is not protected from table reads executed in other blocks
  2673   30000C                     	org	3145740
  2674   30000C  0F                 	db	15
  2675                           
  2676                           ;Config register CONFIG7H @ 0x30000D
  2677                           ;	Boot Block Table Read Protect
  2678                           ;	EBTRB = OFF, Boot block is not protected from table reads executed in other blocks
  2679   30000D                     	org	3145741
  2680   30000D  40                 	db	64
  2681                           tosu	equ	0xFFF
  2682                           tosh	equ	0xFFE
  2683                           tosl	equ	0xFFD
  2684                           stkptr	equ	0xFFC
  2685                           pclatu	equ	0xFFB
  2686                           pclath	equ	0xFFA
  2687                           pcl	equ	0xFF9
  2688                           tblptru	equ	0xFF8
  2689                           tblptrh	equ	0xFF7
  2690                           tblptrl	equ	0xFF6
  2691                           tablat	equ	0xFF5
  2692                           prodh	equ	0xFF4
  2693                           prodl	equ	0xFF3
  2694                           indf0	equ	0xFEF
  2695                           postinc0	equ	0xFEE
  2696                           postdec0	equ	0xFED
  2697                           preinc0	equ	0xFEC
  2698                           plusw0	equ	0xFEB
  2699                           fsr0h	equ	0xFEA
  2700                           fsr0l	equ	0xFE9
  2701                           wreg	equ	0xFE8
  2702                           indf1	equ	0xFE7
  2703                           postinc1	equ	0xFE6
  2704                           postdec1	equ	0xFE5
  2705                           preinc1	equ	0xFE4
  2706                           plusw1	equ	0xFE3
  2707                           fsr1h	equ	0xFE2
  2708                           fsr1l	equ	0xFE1
  2709                           bsr	equ	0xFE0
  2710                           indf2	equ	0xFDF
  2711                           postinc2	equ	0xFDE
  2712                           postdec2	equ	0xFDD
  2713                           preinc2	equ	0xFDC
  2714                           plusw2	equ	0xFDB
  2715                           fsr2h	equ	0xFDA
  2716                           fsr2l	equ	0xFD9
  2717                           status	equ	0xFD8

Data Sizes:
    Strings     34
    Constant    0
    Data        0
    BSS         5
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     28      33
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    strlen@s	PTR const unsigned char  size(2) Largest target is 15
		 -> STR_3(CODE[15]), STR_2(CODE[9]), STR_1(CODE[10]), 

    strlen@a	PTR const unsigned char  size(2) Largest target is 15
		 -> STR_3(CODE[15]), STR_2(CODE[9]), STR_1(CODE[10]), 

    ESCRIBE_MENSAJE2@cadena	PTR const unsigned char  size(2) Largest target is 15
		 -> STR_3(CODE[15]), STR_2(CODE[9]), STR_1(CODE[10]), 


Critical Paths under _main in COMRAM

    _main->_convierte
    _convierte->___lwdiv
    ___lwdiv->___lwmod
    _configuro->_LCD_INIT
    _LCD_INIT->_CURSOR_ONOFF
    _LCD_INIT->_LCD_CONFIG
    _LCD_CONFIG->_ENVIA_LCD_CMD
    _CURSOR_ONOFF->_ENVIA_LCD_CMD
    _CURSOR_HOME->_ENVIA_LCD_CMD
    _BORRAR_LCD->_ENVIA_LCD_CMD
    _POS_CURSOR->_ENVIA_LCD_CMD
    _ENVIA_LCD_CMD->_ENVIA_NIBBLE
    _ENVIA_LCD_CMD->_LEER_LCD
    _ESCRIBE_MENSAJE2->_strlen
    _ENVIA_CHAR->_ENVIA_NIBBLE
    _ENVIA_CHAR->_LEER_LCD

Critical Paths under _INT_CCP2 in COMRAM

    _INT_CCP2->i2_ESCRIBE_MENSAJE2
    i2_POS_CURSOR->i2_ENVIA_LCD_CMD
    i2_ENVIA_LCD_CMD->i2_ENVIA_NIBBLE
    i2_ENVIA_LCD_CMD->i2_LEER_LCD
    i2_ESCRIBE_MENSAJE2->i2_strlen
    i2_ENVIA_CHAR->i2_ENVIA_NIBBLE
    i2_ENVIA_CHAR->i2_LEER_LCD

Critical Paths under _main in BANK0

    None.

Critical Paths under _INT_CCP2 in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INT_CCP2 in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INT_CCP2 in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INT_CCP2 in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INT_CCP2 in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INT_CCP2 in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INT_CCP2 in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INT_CCP2 in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    3304
                         _ENVIA_CHAR
                   _ESCRIBE_MENSAJE2
                         _POS_CURSOR
                          _configuro
                          _convierte
 ---------------------------------------------------------------------------------
 (1) _convierte                                            2     0      2    1723
                                             26 COMRAM     2     0      2
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     767
                                             14 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     770
                                             19 COMRAM     7     3      4
                            ___lwmod (ARG)
 ---------------------------------------------------------------------------------
 (1) _configuro                                            0     0      0     525
                           _LCD_INIT
 ---------------------------------------------------------------------------------
 (2) _LCD_INIT                                             1     1      0     525
                                             18 COMRAM     1     1      0
                         _BORRAR_LCD
                        _CURSOR_HOME
                       _CURSOR_ONOFF
                         _LCD_CONFIG
 ---------------------------------------------------------------------------------
 (3) _LCD_CONFIG                                           1     1      0     135
                                             17 COMRAM     1     1      0
                      _ENVIA_LCD_CMD
                       _ENVIA_NIBBLE
 ---------------------------------------------------------------------------------
 (3) _CURSOR_ONOFF                                         1     1      0     150
                                             17 COMRAM     1     1      0
                      _ENVIA_LCD_CMD
 ---------------------------------------------------------------------------------
 (3) _CURSOR_HOME                                          0     0      0     120
                      _ENVIA_LCD_CMD
 ---------------------------------------------------------------------------------
 (3) _BORRAR_LCD                                           0     0      0     120
                      _ENVIA_LCD_CMD
 ---------------------------------------------------------------------------------
 (1) _POS_CURSOR                                           2     1      1     334
                                             17 COMRAM     2     1      1
                      _ENVIA_LCD_CMD
 ---------------------------------------------------------------------------------
 (4) _ENVIA_LCD_CMD                                        2     2      0     120
                                             15 COMRAM     2     2      0
                       _ENVIA_NIBBLE
                           _LEER_LCD
 ---------------------------------------------------------------------------------
 (1) _ESCRIBE_MENSAJE2                                     6     4      2     602
                                             18 COMRAM     6     4      2
                         _ENVIA_CHAR
                             _strlen
 ---------------------------------------------------------------------------------
 (2) _strlen                                               4     2      2     166
                                             14 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (2) _ENVIA_CHAR                                           2     2      0     120
                                             15 COMRAM     2     2      0
                       _ENVIA_NIBBLE
                           _LEER_LCD
 ---------------------------------------------------------------------------------
 (5) _LEER_LCD                                             1     1      0      45
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _ENVIA_NIBBLE                                         1     1      0      15
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _INT_CCP2                                             4     4      0     736
                                             10 COMRAM     4     4      0
                 i2_ESCRIBE_MENSAJE2
                       i2_POS_CURSOR
 ---------------------------------------------------------------------------------
 (7) i2_POS_CURSOR                                         2     1      1     297
                                              3 COMRAM     2     1      1
                    i2_ENVIA_LCD_CMD
 ---------------------------------------------------------------------------------
 (8) i2_ENVIA_LCD_CMD                                      2     2      0     183
                                              1 COMRAM     2     2      0
                     i2_ENVIA_NIBBLE
                         i2_LEER_LCD
 ---------------------------------------------------------------------------------
 (7) i2_ESCRIBE_MENSAJE2                                   6     4      2     439
                                              4 COMRAM     6     4      2
                       i2_ENVIA_CHAR
                           i2_strlen
 ---------------------------------------------------------------------------------
 (8) i2_strlen                                             4     2      2     116
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (8) i2_ENVIA_CHAR                                         2     2      0     183
                                              1 COMRAM     2     2      0
                     i2_ENVIA_NIBBLE
                         i2_LEER_LCD
 ---------------------------------------------------------------------------------
 (9) i2_LEER_LCD                                           1     1      0      70
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (9) i2_ENVIA_NIBBLE                                       1     1      0      23
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ENVIA_CHAR
     _ENVIA_NIBBLE
     _LEER_LCD
   _ESCRIBE_MENSAJE2
     _ENVIA_CHAR
     _strlen
   _POS_CURSOR
     _ENVIA_LCD_CMD
       _ENVIA_NIBBLE
       _LEER_LCD
   _configuro
     _LCD_INIT
       _BORRAR_LCD
         _ENVIA_LCD_CMD
       _CURSOR_HOME
         _ENVIA_LCD_CMD
       _CURSOR_ONOFF
         _ENVIA_LCD_CMD
       _LCD_CONFIG
         _ENVIA_LCD_CMD
         _ENVIA_NIBBLE
   _convierte
     ___lwdiv
       ___lwmod (ARG)
     ___lwmod

 _INT_CCP2 (ROOT)
   i2_ESCRIBE_MENSAJE2
     i2_ENVIA_CHAR
       i2_ENVIA_NIBBLE
       i2_LEER_LCD
     i2_strlen
   i2_POS_CURSOR
     i2_ENVIA_LCD_CMD
       i2_ENVIA_NIBBLE
       i2_LEER_LCD

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      33        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     1C      21       1       35.1%
BITBIGSFRllh        24      0       0      29        0.0%
BITBIGSFRhhlhh      1F      0       0      22        0.0%
BITBIGSFRhhhl       1E      0       0      21        0.0%
BITBIGSFRhhllhh      F      0       0      23        0.0%
BITBIGSFRhhhh        D      0       0      20        0.0%
BITBIGSFRhhllhl      8      0       0      24        0.0%
BITBIGSFRlh          8      0       0      28        0.0%
BITBIGSFRllll        6      0       0      31        0.0%
BITBIGSFRlllh        4      0       0      30        0.0%
BITBIGSFRhll         3      0       0      27        0.0%
BITBIGSFRhlh         2      0       0      26        0.0%
BITBIGSFRhhlll       1      0       0      25        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      21      32        0.0%
DATA                 0      0      21       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.41 build 20230208172133 
Symbol Table                                                                                   Tue Jun 13 17:34:50 2023

                        l26 0C16                          l71 0D62                          l39 0E86  
                        l80 0E62                          l56 0E2A                          l74 0E8E  
                        l83 0D2E                          l68 0B92                          l77 0B48  
                        l87 0984                          l89 09BE                          l97 0DFA  
                        u10 09BE                          u11 09BA                          u20 0E0E  
                        u21 0E0A                          u30 0E24                          u31 0E20  
             ENVIA_CHAR@aux 0011                         l150 0CFA                         l153 08D8  
                       l900 0D08                         l660 0944                         l910 0D1C  
                       l902 0D10                         l670 0A8C                         l912 0D22  
                       l904 0D12                         l920 0E0E                         l850 0952  
                       l914 0D28                         l906 0D14                         l922 0E14  
                       l930 0AFC                         l667 094C                         l860 0964  
                       l852 0954                         l908 0D16                         l916 0E80  
                       l924 0E24                         l940 0B2A                         l932 0B02  
                       l677 0A94                         l870 097A                         l862 0966  
                       l854 0956                         l846 0C50                         l926 0E88  
                       l918 0DFE                         l942 0B30                         l934 0B10  
                       l880 09A6                         l872 0986                         l864 096E  
                       l856 0958                         l848 094E                         l944 0B36  
                       l936 0B1E                         l928 0AF8                         l890 0E58  
                       l874 098E                         l866 0970                         l858 0960  
                       l946 0B3C                         l938 0B24                         l892 0E60  
                       l876 0992                         l884 09AC                         l868 0978  
                       l948 0B42                         l886 0E4A                         l878 099C  
                       l894 0CFE                         l888 0E56                         l896 0D00  
                       l898 0D04                         l996 0D32                         l998 0D34  
                       u300 0A44                         u301 0A40                         u310 0A62  
                       u311 0A5E                         u320 0A78                         u321 0A74  
                       u260 0C44                         u340 0BF0                         u261 0C40  
                       u341 0BEC                         u350 0C0E                         u270 08F4  
                       u351 0C0A                         u407 0DD2                         u271 08F0  
                       u360 0B92                         u280 0912                         u361 0B8E  
                       u417 0DE4                         u281 090E                         u290 092E  
                       u507 0996                         u427 0B08                         u291 092A  
                       u517 09A0                         u437 0B18                         u527 0E5A  
                       u447 0D0A                         u457 0D3E                         u467 095A  
                       u477 0968                         u487 0972                         u497 0988  
               LEER_LCD@aux 000F                         wreg 0FE8            ??i2_ENVIA_NIBBLE 0001  
              ?_CURSOR_HOME 0001              ??_ENVIA_NIBBLE 000F              ENVIA_CHAR@dato 0010  
                      l1000 0D38                        l1010 0D4A                        l1002 0D3C  
                      l1012 0D50                        l1004 0D44                        l1014 0D56  
                      l1006 0D46                        l1030 0DDA                        l1016 0D5C  
                      l1008 0D48                        l1032 0DDE                        l1300 0C28  
                      l1028 0DCC                        l1302 0C44                        l1150 0CDE  
                      l1310 08F4                        l1400 0BF0                        l1160 0CF4  
                      l1152 0CE4                        l1320 092E                        l1312 08FC  
                      l1410 0B5A                        l1402 0BFC                        l1162 0CF6  
                      l1154 0CE6                        l1146 0CC6                        l1322 0936  
                      l1314 0904                        l1306 08DA                        l1330 0A44  
                      l1412 0B62                        l1404 0C0E                        l1156 0CE8  
                      l1148 0CD4                        l1324 0938                        l1316 0912  
                      l1308 08E2                        l1340 0A80                        l1332 0A4C  
                      l1414 0B7E                        l1406 0B4A                        l1158 0CEA  
                      l1326 093E                        l1318 0918                        l1342 0A86  
                      l1334 0A54                        l1416 0B80                        l1408 0B5A  
                      l1336 0A62                        l1328 0A32                        l1440 0A96  
                      l1338 0A78                        l1418 0824                        l1442 0A9A  
                      l1444 0AA6                        l1446 0AB0                        l1296 0C18  
                      l1448 0ABC                        l1298 0C24                        l1398 0BE0  
                      STR_1 0810                        STR_2 081A                        STR_3 0801  
                      _LATD 0F8C                        i2l26 0C8A                        i2l71 0DCA  
                      i2l80 0E7E                        i2l83 0D96                        i2l68 0BDC  
                      i2l87 09F6                        i2l89 0A30                        _TMR3 0FB2  
               ?i2_LEER_LCD 0001                        _main 0A96                        btemp 0022  
         ??i2_ENVIA_LCD_CMD 0002                        start 0046               ?_CURSOR_ONOFF 0001  
              ___param_bank 0000             ??_ENVIA_LCD_CMD 0010            __end_of_LCD_INIT 0DFC  
          __end_of_LEER_LCD 09C0                       ?_main 0001            __end_of_INT_CCP2 0046  
                     _T3CON 0FB1             __end_of___lwdiv 094E             __end_of___lwmod 0A96  
                     i2l166 0032                       i2l846 0CC4                       _TMR3H 0FB3  
                     _TMR3L 0FB2                       _PORTD 0F83                       _TRISD 0F95  
               ?_POS_CURSOR 0012                       tablat 0FF5                       ttemp5 0023  
                     ttemp6 0026                       ttemp7 002A                       status 0FD8  
                     wtemp8 0023              ??_CURSOR_ONOFF 0012            __end_ofi2_strlen 0CC6  
           __initialization 0E2C                __end_of_main 0AF8    i2ESCRIBE_MENSAJE2@cadena 0005  
                    ??_main 001D               __activetblptr 0001                      _CCPR2H 0F91  
                    _CCPR2L 0F90                      _ANSELD 0F5E                      i2l1250 0E66  
                    i2l1252 0E72                      i2l1260 09C4                      i2l1420 0C54  
                    i2l1254 0E74                      i2l1270 09D6                      i2l1262 09C6  
                    i2l1350 0DA4                      i2l1430 0BA4                      i2l1422 0C64  
                    i2l1256 0E7C                      i2l1280 09EC                      i2l1272 09D8  
                    i2l1264 09C8                      i2l1360 0DB8                      i2l1352 0DAC  
                    i2l1344 0D9A                      i2l1432 0BA4                      i2l1424 0C70  
                    i2l1290 0A18                      i2l1282 09F8                      i2l1274 09E0  
                    i2l1266 09CA                      i2l1258 09C0                      i2l1362 0DBE  
                    i2l1354 0DAE                      i2l1346 0D9C                      i2l1434 0BAC  
                    i2l1370 0D6C                      i2l1426 0C82                      i2l1450 001A  
                    i2l1284 0A00                      i2l1276 09E2                      i2l1268 09D2  
                    i2l1364 0DC4                      i2l1356 0DB0                      i2l1348 0DA0  
                    i2l1436 0BC8                      i2l1428 0B94                      i2l1380 0D7E  
                    i2l1372 0D70                      i2l1452 001C                      i2l1286 0A04  
                    i2l1294 0A1E                      i2l1278 09EA                      i2l1358 0DB2  
                    i2l1390 0C98                      i2l1438 0BCA                      i2l1382 0D84  
                    i2l1374 0D78                      i2l1366 0D66                      i2l1454 0026  
                    i2l1288 0A0E                      i2l1392 0C9C                      i2l1384 0D8A  
                    i2l1376 0D7A                      i2l1368 0D68                      i2l1394 0CB8  
                    i2l1386 0D90                      i2l1378 0D7C                      i2l1388 0C8C  
                    _OSCCON 0FD3         i2ESCRIBE_MENSAJE2@i 000A               ?i2_ENVIA_CHAR 0001  
                    _decena 001E        __end_of_ENVIA_NIBBLE 0E64                   ??___lwdiv 0018  
                 ??___lwmod 0013                      _millar 0020                      isa$std 0001  
                    _unidad 001D                      _strlen 0C18                __mediumconst 0000  
                    tblptrh 0FF7                      tblptrl 0FF6                      tblptru 0FF8  
              ??_BORRAR_LCD 0012                   ?_LCD_INIT 0001                   ?_LEER_LCD 0001  
                __accesstop 0060     __end_of__initialization 0E36                ??_LCD_CONFIG 0012  
            ??i2_ENVIA_CHAR 0002               ___rparam_used 0001                ??_ENVIA_CHAR 0010  
                 ?_INT_CCP2 0001              __pcstackCOMRAM 0001          __end_of_BORRAR_LCD 0E90  
       i2ENVIA_LCD_CMD@dato 0002            _ESCRIBE_MENSAJE2 0B4A            ENVIA_LCD_CMD@aux 0011  
      __end_of_CURSOR_ONOFF 0E2C          __end_of_LCD_CONFIG 0B4A          __end_of_ENVIA_CHAR 0D64  
           i2_ENVIA_LCD_CMD 0D64                   ?i2_strlen 0001               ?i2_POS_CURSOR 0004  
                ??_LCD_INIT 0013                ??i2_LEER_LCD 0001                  ??_LEER_LCD 000F  
          ENVIA_NIBBLE@dato 000F                  ??_INT_CCP2 000B                     _CCP2CON 0F97  
__end_ofi2_ESCRIBE_MENSAJE2 0BDE                     ?_strlen 000F          __end_ofi2_LEER_LCD 0A32  
                   i2u25_40 0A30                     i2u33_40 0CB8                     i2u25_41 0A2C  
                   i2u33_41 0CB4                     i2u60_47 0A12                     i2u37_40 0C64  
                   i2u37_41 0C60                     i2u61_47 0E76                     i2u53_47 0D72  
                   i2u38_40 0C82                     i2u38_41 0C7E                     i2u54_47 0DA6  
                   i2u39_40 0BDC                     i2u39_41 0BD8                     i2u55_47 09CC  
                   i2u56_47 09DA                     i2u57_47 09E4                     i2u58_47 09FA  
                   i2u59_47 0A08                  ??i2_strlen 0003              ??i2_POS_CURSOR 0005  
              ??_POS_CURSOR 0013                     __Hparam 0000                     __Lparam 0000  
         __end_of_configuro 0CFC                     ___lwdiv 08DA                     ___lwmod 0A32  
              __psmallconst 0800       __end_of_ENVIA_LCD_CMD 0D30           __end_of_convierte 08DA  
                   _dec_mil 0021                     __pcinit 0E2C          __end_of_POS_CURSOR 0C18  
                   __ramtop 0800                     _centena 001F                     __ptext0 0A96  
                   __ptext1 0824                     __ptext2 0A32                     __ptext3 08DA  
                   __ptext4 0CC6                     __ptext5 0DCC                     __ptext6 0AF8  
                   __ptext7 0DFC                     __ptext8 0E80                     __ptext9 0E88  
   __end_ofi2_ENVIA_LCD_CMD 0D98        __end_ofi2_ENVIA_CHAR 0DCC                   _T3CONbits 0FB1  
           i2ENVIA_CHAR@aux 0003                _ENVIA_NIBBLE 0E48        end_of_initialization 0E36  
                   strlen@a 0011                     strlen@s 000F           ESCRIBE_MENSAJE2@i 0018  
                 _TRISCbits 0F94    __end_of_ESCRIBE_MENSAJE2 0B94                _CURSOR_ONOFF 0DFC  
        CURSOR_ONOFF@estado 0012        __end_ofi2_POS_CURSOR 0C8C            ?i2_ENVIA_LCD_CMD 0001  
            __end_of_strlen 0C52               ??_CURSOR_HOME 0012         start_initialization 0E2C  
                 i2strlen@a 0003                   i2strlen@s 0001           ENVIA_LCD_CMD@dato 0010  
          i2POS_CURSOR@fila 0005                 _CCPTMRSbits 0F59                    ??_strlen 0011  
               __pbssCOMRAM 001D               i2LEER_LCD@aux 0001          i2_ESCRIBE_MENSAJE2 0B94  
        i2ENVIA_LCD_CMD@aux 0003         __end_of_CURSOR_HOME 0E88              i2_ENVIA_NIBBLE 0E64  
       ?i2_ESCRIBE_MENSAJE2 0005                i2_ENVIA_CHAR 0D98            ___lwdiv@dividend 0014  
        i2ENVIA_NIBBLE@dato 0001                   __pintcode 0008                    ?___lwdiv 0014  
                  ?___lwmod 000F                   _configuro 0CC6        ??i2_ESCRIBE_MENSAJE2 0007  
               __smallconst 0800                   _convierte 0824             convierte@numero 001B  
       i2POS_CURSOR@columna 0004            ___lwdiv@quotient 0018      __end_ofi2_ENVIA_NIBBLE 0E80  
                  _LCD_INIT 0DCC                    _LEER_LCD 094E                    _LATDbits 0F8C  
                  _PIE2bits 0FA0                    _INT_CCP2 0008                    _PIR2bits 0FA1  
            POS_CURSOR@fila 0013                  ?_configuro 0001      ESCRIBE_MENSAJE2@cadena 0013  
                ?_convierte 001B                 _CURSOR_HOME 0E80       i2ESCRIBE_MENSAJE2@tam 0009  
                  i2_strlen 0C8C                i2_POS_CURSOR 0C52             ?i2_ENVIA_NIBBLE 0001  
                  __Hrparam 0000           ?_ESCRIBE_MENSAJE2 0013                    __Lrparam 0000  
              __Lsmallconst 0800          ??_ESCRIBE_MENSAJE2 0015             ___lwdiv@divisor 0016  
           ___lwdiv@counter 001A                    __ptext10 0BDE                    __ptext11 0CFC  
                  __ptext20 0B94                    __ptext12 0B4A                    __ptext21 0C8C  
                  __ptext13 0C18                    __ptext22 0D98                    __ptext14 0D30  
                  __ptext23 09C0                    __ptext15 094E                    __ptext24 0E64  
                  __ptext16 0E48                    __ptext18 0C52                    __ptext19 0D64  
                _BORRAR_LCD 0E88                  _LCD_CONFIG 0AF8                  _ENVIA_CHAR 0D30  
                  isa$xinst 0000                    int$flags 0022            i2ENVIA_CHAR@dato 0002  
             _ENVIA_LCD_CMD 0CFC                 ??_configuro 0014                 ??_convierte 001D  
                _INTCONbits 0FF2                    intlevel2 0000                  i2_LEER_LCD 09C0  
          ___lwmod@dividend 000F              ?_ENVIA_LCD_CMD 0001             ___lwmod@divisor 0011  
           ___lwmod@counter 0013         ESCRIBE_MENSAJE2@tam 0017                 ?_BORRAR_LCD 0001  
             ?_ENVIA_NIBBLE 0001                  _POS_CURSOR 0BDE                 ?_LCD_CONFIG 0001  
               ?_ENVIA_CHAR 0001           POS_CURSOR@columna 0012  
