

Microchip MPLAB XC8 Assembler V2.36 build 20220127204148 
                                                                                               Thu Jun 01 17:30:40 2023

Microchip MPLAB XC8 C Compiler v2.36 (Free license) build 20220127204148 Og1 
     1                           	processor	18F45K50
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1
    16                           	psect	text7,global,reloc=2,class=CODE,delta=1
    17                           	psect	text8,global,reloc=2,class=CODE,delta=1
    18                           	psect	text9,global,reloc=2,class=CODE,delta=1
    19                           	psect	text10,global,reloc=2,class=CODE,delta=1
    20                           	psect	text11,global,reloc=2,class=CODE,delta=1
    21                           	psect	text12,global,reloc=2,class=CODE,delta=1
    22                           	psect	text13,global,reloc=2,class=CODE,delta=1
    23                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=2
    24                           	psect	text15,global,reloc=2,class=CODE,delta=1
    25                           	psect	text16,global,reloc=2,class=CODE,delta=1
    26                           	psect	text17,global,reloc=2,class=CODE,delta=1
    27                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    28                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    29                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    30                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    31                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    32                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    33  0000                     
    34                           ; Version 2.35
    35                           ; Generated 05/05/2021 GMT
    36                           ; 
    37                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    38                           ; All rights reserved.
    39                           ; 
    40                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    41                           ; 
    42                           ; Redistribution and use in source and binary forms, with or without modification, are
    43                           ; permitted provided that the following conditions are met:
    44                           ; 
    45                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    46                           ;        conditions and the following disclaimer.
    47                           ; 
    48                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    49                           ;        of conditions and the following disclaimer in the documentation and/or other
    50                           ;        materials provided with the distribution. Publication is not required when
    51                           ;        this file is used in an embedded application.
    52                           ; 
    53                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    54                           ;        software without specific prior written permission.
    55                           ; 
    56                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    57                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    58                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    59                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    60                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    61                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    62                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    63                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    64                           ; 
    65                           ; 
    66                           ; Code-generator required, PIC18F45K50 Definitions
    67                           ; 
    68                           ; SFR Addresses
    69  0000                     _ADRESL	set	4035
    70  0000                     _ADRESH	set	4036
    71  0000                     _LATD	set	3980
    72  0000                     _ANSELAbits	set	3931
    73  0000                     _TRISAbits	set	3986
    74  0000                     _OSCCON	set	4051
    75  0000                     _INTCON2bits	set	4081
    76  0000                     _TRISD	set	3989
    77  0000                     _TRISBbits	set	3987
    78  0000                     _ANSELD	set	3934
    79  0000                     _WPUBbits	set	3973
    80  0000                     _ANSELBbits	set	3932
    81  0000                     _INTCONbits	set	4082
    82  0000                     _LATDbits	set	3980
    83  0000                     _T2CON	set	4026
    84  0000                     _PR2	set	4027
    85  0000                     _PORTD	set	3971
    86  0000                     _CCP1CON	set	4029
    87  0000                     _CCPR1L	set	4030
    88  0000                     _ADCON0bits	set	4034
    89                           
    90                           	psect	smallconst
    91  000800                     __psmallconst:
    92                           	callstack 0
    93  000800  00                 	db	0
    94  000801                     STR_1:
    95  000801  70                 	db	112	;'p'
    96  000802  72                 	db	114	;'r'
    97  000803  69                 	db	105	;'i'
    98  000804  6D                 	db	109	;'m'
    99  000805  65                 	db	101	;'e'
   100  000806  72                 	db	114	;'r'
   101  000807  20                 	db	32
   102  000808  65                 	db	101	;'e'
   103  000809  6A                 	db	106	;'j'
   104  00080A  65                 	db	101	;'e'
   105  00080B  6D                 	db	109	;'m'
   106  00080C  70                 	db	112	;'p'
   107  00080D  6C                 	db	108	;'l'
   108  00080E  6F                 	db	111	;'o'
   109  00080F  00                 	db	0
   110  000810                     STR_2:
   111  000810  4C                 	db	76	;'L'
   112  000811  4D                 	db	77	;'M'
   113  000812  33                 	db	51	;'3'
   114  000813  35                 	db	53	;'5'
   115  000814  3A                 	db	58	;':'
   116  000815  00                 	db	0
   117  000816  00                 	db	0	; dummy byte at the end
   118  0000                     
   119                           ; #config settings
   120                           
   121                           	psect	cinit
   122  000CC6                     __pcinit:
   123                           	callstack 0
   124  000CC6                     start_initialization:
   125                           	callstack 0
   126  000CC6                     __initialization:
   127                           	callstack 0
   128                           
   129                           ; Clear objects allocated to COMRAM (7 bytes)
   130  000CC6  EE00  F013         	lfsr	0,__pbssCOMRAM
   131  000CCA  0E07               	movlw	7
   132  000CCC                     clear_0:
   133  000CCC  6AEE               	clrf	postinc0,c
   134  000CCE  06E8               	decf	wreg,f,c
   135  000CD0  E1FD               	bnz	clear_0
   136  000CD2                     end_of_initialization:
   137                           	callstack 0
   138  000CD2                     __end_of__initialization:
   139                           	callstack 0
   140  000CD2  901A               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   141  000CD4  921A               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   142  000CD6  0E00               	movlw	low (__Lmediumconst shr (0+16))
   143  000CD8  6EF8               	movwf	tblptru,c
   144  000CDA  0100               	movlb	0
   145  000CDC  EF51  F004         	goto	_main	;jump to C main() function
   146                           
   147                           	psect	bssCOMRAM
   148  000013                     __pbssCOMRAM:
   149                           	callstack 0
   150  000013                     _resultado_ADC:
   151                           	callstack 0
   152  000013                     	ds	2
   153  000015                     _unidad:
   154                           	callstack 0
   155  000015                     	ds	1
   156  000016                     _decena:
   157                           	callstack 0
   158  000016                     	ds	1
   159  000017                     _centena:
   160                           	callstack 0
   161  000017                     	ds	1
   162  000018                     _millar:
   163                           	callstack 0
   164  000018                     	ds	1
   165  000019                     _nivel:
   166                           	callstack 0
   167  000019                     	ds	1
   168                           
   169                           	psect	cstackCOMRAM
   170  000001                     __pcstackCOMRAM:
   171                           	callstack 0
   172  000001                     ??_INT0_ISR:
   173  000001                     
   174                           ; 1 bytes @ 0x0
   175  000001                     	ds	2
   176  000003                     ?_strlen:
   177                           	callstack 0
   178  000003                     ?_tomamuestra_ADC:
   179                           	callstack 0
   180  000003                     ?___lwmod:
   181                           	callstack 0
   182  000003                     ENVIA_NIBBLE@dato:
   183                           	callstack 0
   184  000003                     LEER_LCD@aux:
   185                           	callstack 0
   186  000003                     ___lwmod@dividend:
   187                           	callstack 0
   188  000003                     strlen@s:
   189                           	callstack 0
   190                           
   191                           ; 2 bytes @ 0x2
   192  000003                     	ds	1
   193  000004                     ENVIA_CHAR@dato:
   194                           	callstack 0
   195  000004                     ENVIA_LCD_CMD@dato:
   196                           	callstack 0
   197                           
   198                           ; 1 bytes @ 0x3
   199  000004                     	ds	1
   200  000005                     ??_tomamuestra_ADC:
   201  000005                     ENVIA_CHAR@aux:
   202                           	callstack 0
   203  000005                     ENVIA_LCD_CMD@aux:
   204                           	callstack 0
   205  000005                     ___lwmod@divisor:
   206                           	callstack 0
   207  000005                     strlen@a:
   208                           	callstack 0
   209                           
   210                           ; 2 bytes @ 0x4
   211  000005                     	ds	1
   212  000006                     ??_LCD_CONFIG:
   213  000006                     POS_CURSOR@columna:
   214                           	callstack 0
   215  000006                     CURSOR_ONOFF@estado:
   216                           	callstack 0
   217                           
   218                           ; 1 bytes @ 0x5
   219  000006                     	ds	1
   220  000007                     ??_LCD_INIT:
   221  000007                     POS_CURSOR@fila:
   222                           	callstack 0
   223  000007                     ___lwmod@counter:
   224                           	callstack 0
   225  000007                     ESCRIBE_MENSAJE2@cadena:
   226                           	callstack 0
   227                           
   228                           ; 2 bytes @ 0x6
   229  000007                     	ds	1
   230  000008                     ?___lwdiv:
   231                           	callstack 0
   232  000008                     ___lwdiv@dividend:
   233                           	callstack 0
   234                           
   235                           ; 2 bytes @ 0x7
   236  000008                     	ds	1
   237  000009                     ??_ESCRIBE_MENSAJE2:
   238                           
   239                           ; 1 bytes @ 0x8
   240  000009                     	ds	1
   241  00000A                     ___lwdiv@divisor:
   242                           	callstack 0
   243                           
   244                           ; 2 bytes @ 0x9
   245  00000A                     	ds	1
   246  00000B                     ESCRIBE_MENSAJE2@tam:
   247                           	callstack 0
   248                           
   249                           ; 1 bytes @ 0xA
   250  00000B                     	ds	1
   251  00000C                     ESCRIBE_MENSAJE2@i:
   252                           	callstack 0
   253  00000C                     ___lwdiv@quotient:
   254                           	callstack 0
   255                           
   256                           ; 2 bytes @ 0xB
   257  00000C                     	ds	2
   258  00000E                     ___lwdiv@counter:
   259                           	callstack 0
   260                           
   261                           ; 1 bytes @ 0xD
   262  00000E                     	ds	1
   263  00000F                     convierte@numero:
   264                           	callstack 0
   265                           
   266                           ; 2 bytes @ 0xE
   267  00000F                     	ds	2
   268  000011                     _main$1197:
   269                           	callstack 0
   270                           
   271                           ; 2 bytes @ 0x10
   272  000011                     	ds	2
   273                           
   274 ;;
   275 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   276 ;;
   277 ;; *************** function _main *****************
   278 ;; Defined at:
   279 ;;		line 87 in file "main.c"
   280 ;; Parameters:    Size  Location     Type
   281 ;;		None
   282 ;; Auto vars:     Size  Location     Type
   283 ;;		None
   284 ;; Return value:  Size  Location     Type
   285 ;;                  1    wreg      void 
   286 ;; Registers used:
   287 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   288 ;; Tracked objects:
   289 ;;		On entry : 0/0
   290 ;;		On exit  : 0/0
   291 ;;		Unchanged: 0/0
   292 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   293 ;;      Params:         0       0       0       0       0       0       0       0       0
   294 ;;      Locals:         2       0       0       0       0       0       0       0       0
   295 ;;      Temps:          0       0       0       0       0       0       0       0       0
   296 ;;      Totals:         2       0       0       0       0       0       0       0       0
   297 ;;Total ram usage:        2 bytes
   298 ;; Hardware stack levels required when called: 6
   299 ;; This function calls:
   300 ;;		_ENVIA_CHAR
   301 ;;		_ESCRIBE_MENSAJE2
   302 ;;		_POS_CURSOR
   303 ;;		___lwdiv
   304 ;;		_configuro
   305 ;;		_convierte
   306 ;;		_tomamuestra_ADC
   307 ;; This function is called by:
   308 ;;		Startup code after reset
   309 ;; This function uses a non-reentrant model
   310 ;;
   311                           
   312                           	psect	text0
   313  0008A2                     __ptext0:
   314                           	callstack 0
   315  0008A2                     _main:
   316                           	callstack 25
   317  0008A2                     
   318                           ;main.c: 88:     configuro();
   319  0008A2  EC88  F005         	call	_configuro	;wreg free
   320                           
   321                           ;main.c: 89:     POS_CURSOR(1,0);
   322  0008A6  0E00               	movlw	0
   323  0008A8  6E06               	movwf	POS_CURSOR@columna^0,c
   324  0008AA  0E01               	movlw	1
   325  0008AC  ECA5  F005         	call	_POS_CURSOR
   326  0008B0                     
   327                           ;main.c: 90:     ESCRIBE_MENSAJE2("primer ejemplo");
   328  0008B0  0E01               	movlw	low STR_1
   329  0008B2  6E07               	movwf	ESCRIBE_MENSAJE2@cadena^0,c
   330  0008B4  0E08               	movlw	high STR_1
   331  0008B6  6E08               	movwf	(ESCRIBE_MENSAJE2@cadena+1)^0,c
   332  0008B8  EC63  F005         	call	_ESCRIBE_MENSAJE2	;wreg free
   333  0008BC                     l1463:
   334                           
   335                           ;main.c: 92:         convierte(tomamuestra_ADC()/10);
   336  0008BC  EC43  F006         	call	_tomamuestra_ADC	;wreg free
   337  0008C0  C003  F008         	movff	?_tomamuestra_ADC,___lwdiv@dividend
   338  0008C4  C004  F009         	movff	?_tomamuestra_ADC+1,___lwdiv@dividend+1
   339  0008C8  0E00               	movlw	0
   340  0008CA  6E0B               	movwf	(___lwdiv@divisor+1)^0,c
   341  0008CC  0E0A               	movlw	10
   342  0008CE  6E0A               	movwf	___lwdiv@divisor^0,c
   343  0008D0  EC95  F004         	call	___lwdiv	;wreg free
   344  0008D4  C008  F011         	movff	?___lwdiv,_main$1197
   345  0008D8  C009  F012         	movff	?___lwdiv+1,_main$1197+1
   346  0008DC                     
   347                           ;main.c: 92:         convierte(tomamuestra_ADC()/10);
   348  0008DC  C011  F00F         	movff	_main$1197,convierte@numero
   349  0008E0  C012  F010         	movff	_main$1197+1,convierte@numero+1
   350  0008E4  EC0C  F004         	call	_convierte	;wreg free
   351  0008E8                     
   352                           ;main.c: 93:         POS_CURSOR(2,0);
   353  0008E8  0E00               	movlw	0
   354  0008EA  6E06               	movwf	POS_CURSOR@columna^0,c
   355  0008EC  0E02               	movlw	2
   356  0008EE  ECA5  F005         	call	_POS_CURSOR
   357                           
   358                           ;main.c: 94:         ESCRIBE_MENSAJE2("LM35:");
   359  0008F2  0E10               	movlw	low STR_2
   360  0008F4  6E07               	movwf	ESCRIBE_MENSAJE2@cadena^0,c
   361  0008F6  0E08               	movlw	high STR_2
   362  0008F8  6E08               	movwf	(ESCRIBE_MENSAJE2@cadena+1)^0,c
   363  0008FA  EC63  F005         	call	_ESCRIBE_MENSAJE2	;wreg free
   364  0008FE                     
   365                           ;main.c: 95:         ENVIA_CHAR(centena+0x30);
   366  0008FE  5017               	movf	_centena^0,w,c
   367  000900  0F30               	addlw	48
   368  000902  ECF9  F005         	call	_ENVIA_CHAR
   369  000906                     
   370                           ;main.c: 96:         ENVIA_CHAR(decena+0x30);
   371  000906  5016               	movf	_decena^0,w,c
   372  000908  0F30               	addlw	48
   373  00090A  ECF9  F005         	call	_ENVIA_CHAR
   374  00090E                     
   375                           ;main.c: 97:         ENVIA_CHAR(unidad+0x30);
   376  00090E  5015               	movf	_unidad^0,w,c
   377  000910  0F30               	addlw	48
   378  000912  ECF9  F005         	call	_ENVIA_CHAR
   379  000916                     
   380                           ;main.c: 98:         ENVIA_CHAR(0xDF);
   381  000916  0EDF               	movlw	223
   382  000918  ECF9  F005         	call	_ENVIA_CHAR
   383  00091C                     
   384                           ;main.c: 99:         ENVIA_CHAR('C');
   385  00091C  0E43               	movlw	67
   386  00091E  ECF9  F005         	call	_ENVIA_CHAR
   387  000922  EF5E  F004         	goto	l1463
   388  000926  EF5D  F000         	goto	start
   389  00092A                     __end_of_main:
   390                           	callstack 0
   391                           
   392 ;; *************** function _tomamuestra_ADC *****************
   393 ;; Defined at:
   394 ;;		line 46 in file "main.c"
   395 ;; Parameters:    Size  Location     Type
   396 ;;		None
   397 ;; Auto vars:     Size  Location     Type
   398 ;;		None
   399 ;; Return value:  Size  Location     Type
   400 ;;                  2    2[COMRAM] unsigned int 
   401 ;; Registers used:
   402 ;;		wreg, status,2, status,0
   403 ;; Tracked objects:
   404 ;;		On entry : 0/0
   405 ;;		On exit  : 0/0
   406 ;;		Unchanged: 0/0
   407 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   408 ;;      Params:         2       0       0       0       0       0       0       0       0
   409 ;;      Locals:         0       0       0       0       0       0       0       0       0
   410 ;;      Temps:          2       0       0       0       0       0       0       0       0
   411 ;;      Totals:         4       0       0       0       0       0       0       0       0
   412 ;;Total ram usage:        4 bytes
   413 ;; Hardware stack levels used: 1
   414 ;; Hardware stack levels required when called: 1
   415 ;; This function calls:
   416 ;;		Nothing
   417 ;; This function is called by:
   418 ;;		_main
   419 ;; This function uses a non-reentrant model
   420 ;;
   421                           
   422                           	psect	text1
   423  000C86                     __ptext1:
   424                           	callstack 0
   425  000C86                     _tomamuestra_ADC:
   426                           	callstack 29
   427  000C86                     
   428                           ;main.c: 47:     ADCON0bits.GO = 1;
   429  000C86  82C2               	bsf	194,1,c	;volatile
   430  000C88                     l63:
   431  000C88  B2C2               	btfsc	194,1,c	;volatile
   432  000C8A  EF49  F006         	goto	u311
   433  000C8E  EF4B  F006         	goto	u310
   434  000C92                     u311:
   435  000C92  EF44  F006         	goto	l63
   436  000C96                     u310:
   437  000C96                     
   438                           ;main.c: 49:     return((ADRESH << 8) + ADRESL);
   439  000C96  50C4               	movf	196,w,c	;volatile
   440  000C98  6E06               	movwf	(??_tomamuestra_ADC+1)^0,c
   441  000C9A  6A05               	clrf	??_tomamuestra_ADC^0,c
   442  000C9C  50C3               	movf	195,w,c	;volatile
   443  000C9E  2405               	addwf	??_tomamuestra_ADC^0,w,c
   444  000CA0  6E03               	movwf	?_tomamuestra_ADC^0,c
   445  000CA2  0E00               	movlw	0
   446  000CA4  2006               	addwfc	(??_tomamuestra_ADC+1)^0,w,c
   447  000CA6  6E04               	movwf	(?_tomamuestra_ADC+1)^0,c
   448  000CA8  0012               	return		;funcret
   449  000CAA                     __end_of_tomamuestra_ADC:
   450                           	callstack 0
   451                           
   452 ;; *************** function _convierte *****************
   453 ;; Defined at:
   454 ;;		line 40 in file "main.c"
   455 ;; Parameters:    Size  Location     Type
   456 ;;  numero          2   14[COMRAM] unsigned int 
   457 ;; Auto vars:     Size  Location     Type
   458 ;;		None
   459 ;; Return value:  Size  Location     Type
   460 ;;                  1    wreg      void 
   461 ;; Registers used:
   462 ;;		wreg, status,2, status,0, cstack
   463 ;; Tracked objects:
   464 ;;		On entry : 0/0
   465 ;;		On exit  : 0/0
   466 ;;		Unchanged: 0/0
   467 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   468 ;;      Params:         2       0       0       0       0       0       0       0       0
   469 ;;      Locals:         0       0       0       0       0       0       0       0       0
   470 ;;      Temps:          0       0       0       0       0       0       0       0       0
   471 ;;      Totals:         2       0       0       0       0       0       0       0       0
   472 ;;Total ram usage:        2 bytes
   473 ;; Hardware stack levels used: 1
   474 ;; Hardware stack levels required when called: 2
   475 ;; This function calls:
   476 ;;		___lwdiv
   477 ;;		___lwmod
   478 ;; This function is called by:
   479 ;;		_main
   480 ;; This function uses a non-reentrant model
   481 ;;
   482                           
   483                           	psect	text2
   484  000818                     __ptext2:
   485                           	callstack 0
   486  000818                     _convierte:
   487                           	callstack 28
   488  000818                     
   489                           ;main.c: 41:     millar = numero / 1000;
   490  000818  C00F  F008         	movff	convierte@numero,___lwdiv@dividend
   491  00081C  C010  F009         	movff	convierte@numero+1,___lwdiv@dividend+1
   492  000820  0E03               	movlw	3
   493  000822  6E0B               	movwf	(___lwdiv@divisor+1)^0,c
   494  000824  0EE8               	movlw	232
   495  000826  6E0A               	movwf	___lwdiv@divisor^0,c
   496  000828  EC95  F004         	call	___lwdiv	;wreg free
   497  00082C  5008               	movf	?___lwdiv^0,w,c
   498  00082E  6E18               	movwf	_millar^0,c
   499                           
   500                           ;main.c: 42:     centena = (numero % 1000) / 100;
   501  000830  0E03               	movlw	3
   502  000832  6E06               	movwf	(___lwmod@divisor+1)^0,c
   503  000834  0EE8               	movlw	232
   504  000836  6E05               	movwf	___lwmod@divisor^0,c
   505  000838  C00F  F003         	movff	convierte@numero,___lwmod@dividend
   506  00083C  C010  F004         	movff	convierte@numero+1,___lwmod@dividend+1
   507  000840  EC08  F005         	call	___lwmod	;wreg free
   508  000844  C003  F008         	movff	?___lwmod,___lwdiv@dividend
   509  000848  C004  F009         	movff	?___lwmod+1,___lwdiv@dividend+1
   510  00084C  0E00               	movlw	0
   511  00084E  6E0B               	movwf	(___lwdiv@divisor+1)^0,c
   512  000850  0E64               	movlw	100
   513  000852  6E0A               	movwf	___lwdiv@divisor^0,c
   514  000854  EC95  F004         	call	___lwdiv	;wreg free
   515  000858  5008               	movf	?___lwdiv^0,w,c
   516  00085A  6E17               	movwf	_centena^0,c
   517                           
   518                           ;main.c: 43:     decena = ( numero % 100) / 10;
   519  00085C  0E00               	movlw	0
   520  00085E  6E06               	movwf	(___lwmod@divisor+1)^0,c
   521  000860  0E64               	movlw	100
   522  000862  6E05               	movwf	___lwmod@divisor^0,c
   523  000864  C00F  F003         	movff	convierte@numero,___lwmod@dividend
   524  000868  C010  F004         	movff	convierte@numero+1,___lwmod@dividend+1
   525  00086C  EC08  F005         	call	___lwmod	;wreg free
   526  000870  C003  F008         	movff	?___lwmod,___lwdiv@dividend
   527  000874  C004  F009         	movff	?___lwmod+1,___lwdiv@dividend+1
   528  000878  0E00               	movlw	0
   529  00087A  6E0B               	movwf	(___lwdiv@divisor+1)^0,c
   530  00087C  0E0A               	movlw	10
   531  00087E  6E0A               	movwf	___lwdiv@divisor^0,c
   532  000880  EC95  F004         	call	___lwdiv	;wreg free
   533  000884  5008               	movf	?___lwdiv^0,w,c
   534  000886  6E16               	movwf	_decena^0,c
   535                           
   536                           ;main.c: 44:     unidad = numero % 10;
   537  000888  C00F  F003         	movff	convierte@numero,___lwmod@dividend
   538  00088C  C010  F004         	movff	convierte@numero+1,___lwmod@dividend+1
   539  000890  0E00               	movlw	0
   540  000892  6E06               	movwf	(___lwmod@divisor+1)^0,c
   541  000894  0E0A               	movlw	10
   542  000896  6E05               	movwf	___lwmod@divisor^0,c
   543  000898  EC08  F005         	call	___lwmod	;wreg free
   544  00089C  5003               	movf	?___lwmod^0,w,c
   545  00089E  6E15               	movwf	_unidad^0,c
   546  0008A0  0012               	return		;funcret
   547  0008A2                     __end_of_convierte:
   548                           	callstack 0
   549                           
   550 ;; *************** function ___lwmod *****************
   551 ;; Defined at:
   552 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\lwmod.c"
   553 ;; Parameters:    Size  Location     Type
   554 ;;  dividend        2    2[COMRAM] unsigned int 
   555 ;;  divisor         2    4[COMRAM] unsigned int 
   556 ;; Auto vars:     Size  Location     Type
   557 ;;  counter         1    6[COMRAM] unsigned char 
   558 ;; Return value:  Size  Location     Type
   559 ;;                  2    2[COMRAM] unsigned int 
   560 ;; Registers used:
   561 ;;		wreg, status,2, status,0
   562 ;; Tracked objects:
   563 ;;		On entry : 0/0
   564 ;;		On exit  : 0/0
   565 ;;		Unchanged: 0/0
   566 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   567 ;;      Params:         4       0       0       0       0       0       0       0       0
   568 ;;      Locals:         1       0       0       0       0       0       0       0       0
   569 ;;      Temps:          0       0       0       0       0       0       0       0       0
   570 ;;      Totals:         5       0       0       0       0       0       0       0       0
   571 ;;Total ram usage:        5 bytes
   572 ;; Hardware stack levels used: 1
   573 ;; Hardware stack levels required when called: 1
   574 ;; This function calls:
   575 ;;		Nothing
   576 ;; This function is called by:
   577 ;;		_convierte
   578 ;; This function uses a non-reentrant model
   579 ;;
   580                           
   581                           	psect	text3
   582  000A10                     __ptext3:
   583                           	callstack 0
   584  000A10                     ___lwmod:
   585                           	callstack 28
   586  000A10  5005               	movf	___lwmod@divisor^0,w,c
   587  000A12  1006               	iorwf	(___lwmod@divisor+1)^0,w,c
   588  000A14  B4D8               	btfsc	status,2,c
   589  000A16  EF0F  F005         	goto	u281
   590  000A1A  EF11  F005         	goto	u280
   591  000A1E                     u281:
   592  000A1E  EF35  F005         	goto	l689
   593  000A22                     u280:
   594  000A22  0E01               	movlw	1
   595  000A24  6E07               	movwf	___lwmod@counter^0,c
   596  000A26  EF19  F005         	goto	l1387
   597  000A2A                     l1385:
   598  000A2A  90D8               	bcf	status,0,c
   599  000A2C  3605               	rlcf	___lwmod@divisor^0,f,c
   600  000A2E  3606               	rlcf	(___lwmod@divisor+1)^0,f,c
   601  000A30  2A07               	incf	___lwmod@counter^0,f,c
   602  000A32                     l1387:
   603  000A32  AE06               	btfss	(___lwmod@divisor+1)^0,7,c
   604  000A34  EF1E  F005         	goto	u291
   605  000A38  EF20  F005         	goto	u290
   606  000A3C                     u291:
   607  000A3C  EF15  F005         	goto	l1385
   608  000A40                     u290:
   609  000A40                     l1389:
   610  000A40  5005               	movf	___lwmod@divisor^0,w,c
   611  000A42  5C03               	subwf	___lwmod@dividend^0,w,c
   612  000A44  5006               	movf	(___lwmod@divisor+1)^0,w,c
   613  000A46  5804               	subwfb	(___lwmod@dividend+1)^0,w,c
   614  000A48  A0D8               	btfss	status,0,c
   615  000A4A  EF29  F005         	goto	u301
   616  000A4E  EF2B  F005         	goto	u300
   617  000A52                     u301:
   618  000A52  EF2F  F005         	goto	l1393
   619  000A56                     u300:
   620  000A56  5005               	movf	___lwmod@divisor^0,w,c
   621  000A58  5E03               	subwf	___lwmod@dividend^0,f,c
   622  000A5A  5006               	movf	(___lwmod@divisor+1)^0,w,c
   623  000A5C  5A04               	subwfb	(___lwmod@dividend+1)^0,f,c
   624  000A5E                     l1393:
   625  000A5E  90D8               	bcf	status,0,c
   626  000A60  3206               	rrcf	(___lwmod@divisor+1)^0,f,c
   627  000A62  3205               	rrcf	___lwmod@divisor^0,f,c
   628  000A64  2E07               	decfsz	___lwmod@counter^0,f,c
   629  000A66  EF20  F005         	goto	l1389
   630  000A6A                     l689:
   631  000A6A  C003  F003         	movff	___lwmod@dividend,?___lwmod
   632  000A6E  C004  F004         	movff	___lwmod@dividend+1,?___lwmod+1
   633  000A72  0012               	return		;funcret
   634  000A74                     __end_of___lwmod:
   635                           	callstack 0
   636                           
   637 ;; *************** function ___lwdiv *****************
   638 ;; Defined at:
   639 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\lwdiv.c"
   640 ;; Parameters:    Size  Location     Type
   641 ;;  dividend        2    7[COMRAM] unsigned int 
   642 ;;  divisor         2    9[COMRAM] unsigned int 
   643 ;; Auto vars:     Size  Location     Type
   644 ;;  quotient        2   11[COMRAM] unsigned int 
   645 ;;  counter         1   13[COMRAM] unsigned char 
   646 ;; Return value:  Size  Location     Type
   647 ;;                  2    7[COMRAM] unsigned int 
   648 ;; Registers used:
   649 ;;		wreg, status,2, status,0
   650 ;; Tracked objects:
   651 ;;		On entry : 0/0
   652 ;;		On exit  : 0/0
   653 ;;		Unchanged: 0/0
   654 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   655 ;;      Params:         4       0       0       0       0       0       0       0       0
   656 ;;      Locals:         3       0       0       0       0       0       0       0       0
   657 ;;      Temps:          0       0       0       0       0       0       0       0       0
   658 ;;      Totals:         7       0       0       0       0       0       0       0       0
   659 ;;Total ram usage:        7 bytes
   660 ;; Hardware stack levels used: 1
   661 ;; Hardware stack levels required when called: 1
   662 ;; This function calls:
   663 ;;		Nothing
   664 ;; This function is called by:
   665 ;;		_convierte
   666 ;;		_main
   667 ;; This function uses a non-reentrant model
   668 ;;
   669                           
   670                           	psect	text4
   671  00092A                     __ptext4:
   672                           	callstack 0
   673  00092A                     ___lwdiv:
   674                           	callstack 28
   675  00092A  0E00               	movlw	0
   676  00092C  6E0D               	movwf	(___lwdiv@quotient+1)^0,c
   677  00092E  0E00               	movlw	0
   678  000930  6E0C               	movwf	___lwdiv@quotient^0,c
   679  000932  500A               	movf	___lwdiv@divisor^0,w,c
   680  000934  100B               	iorwf	(___lwdiv@divisor+1)^0,w,c
   681  000936  B4D8               	btfsc	status,2,c
   682  000938  EFA0  F004         	goto	u251
   683  00093C  EFA2  F004         	goto	u250
   684  000940                     u251:
   685  000940  EFCA  F004         	goto	l679
   686  000944                     u250:
   687  000944  0E01               	movlw	1
   688  000946  6E0E               	movwf	___lwdiv@counter^0,c
   689  000948  EFAA  F004         	goto	l1367
   690  00094C                     l1365:
   691  00094C  90D8               	bcf	status,0,c
   692  00094E  360A               	rlcf	___lwdiv@divisor^0,f,c
   693  000950  360B               	rlcf	(___lwdiv@divisor+1)^0,f,c
   694  000952  2A0E               	incf	___lwdiv@counter^0,f,c
   695  000954                     l1367:
   696  000954  AE0B               	btfss	(___lwdiv@divisor+1)^0,7,c
   697  000956  EFAF  F004         	goto	u261
   698  00095A  EFB1  F004         	goto	u260
   699  00095E                     u261:
   700  00095E  EFA6  F004         	goto	l1365
   701  000962                     u260:
   702  000962                     l1369:
   703  000962  90D8               	bcf	status,0,c
   704  000964  360C               	rlcf	___lwdiv@quotient^0,f,c
   705  000966  360D               	rlcf	(___lwdiv@quotient+1)^0,f,c
   706  000968  500A               	movf	___lwdiv@divisor^0,w,c
   707  00096A  5C08               	subwf	___lwdiv@dividend^0,w,c
   708  00096C  500B               	movf	(___lwdiv@divisor+1)^0,w,c
   709  00096E  5809               	subwfb	(___lwdiv@dividend+1)^0,w,c
   710  000970  A0D8               	btfss	status,0,c
   711  000972  EFBD  F004         	goto	u271
   712  000976  EFBF  F004         	goto	u270
   713  00097A                     u271:
   714  00097A  EFC4  F004         	goto	l1377
   715  00097E                     u270:
   716  00097E  500A               	movf	___lwdiv@divisor^0,w,c
   717  000980  5E08               	subwf	___lwdiv@dividend^0,f,c
   718  000982  500B               	movf	(___lwdiv@divisor+1)^0,w,c
   719  000984  5A09               	subwfb	(___lwdiv@dividend+1)^0,f,c
   720  000986  800C               	bsf	___lwdiv@quotient^0,0,c
   721  000988                     l1377:
   722  000988  90D8               	bcf	status,0,c
   723  00098A  320B               	rrcf	(___lwdiv@divisor+1)^0,f,c
   724  00098C  320A               	rrcf	___lwdiv@divisor^0,f,c
   725  00098E  2E0E               	decfsz	___lwdiv@counter^0,f,c
   726  000990  EFB1  F004         	goto	l1369
   727  000994                     l679:
   728  000994  C00C  F008         	movff	___lwdiv@quotient,?___lwdiv
   729  000998  C00D  F009         	movff	___lwdiv@quotient+1,?___lwdiv+1
   730  00099C  0012               	return		;funcret
   731  00099E                     __end_of___lwdiv:
   732                           	callstack 0
   733                           
   734 ;; *************** function _configuro *****************
   735 ;; Defined at:
   736 ;;		line 18 in file "main.c"
   737 ;; Parameters:    Size  Location     Type
   738 ;;		None
   739 ;; Auto vars:     Size  Location     Type
   740 ;;		None
   741 ;; Return value:  Size  Location     Type
   742 ;;                  1    wreg      void 
   743 ;; Registers used:
   744 ;;		wreg, status,2, status,0, cstack
   745 ;; Tracked objects:
   746 ;;		On entry : 0/0
   747 ;;		On exit  : 0/0
   748 ;;		Unchanged: 0/0
   749 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   750 ;;      Params:         0       0       0       0       0       0       0       0       0
   751 ;;      Locals:         0       0       0       0       0       0       0       0       0
   752 ;;      Temps:          0       0       0       0       0       0       0       0       0
   753 ;;      Totals:         0       0       0       0       0       0       0       0       0
   754 ;;Total ram usage:        0 bytes
   755 ;; Hardware stack levels used: 1
   756 ;; Hardware stack levels required when called: 5
   757 ;; This function calls:
   758 ;;		_LCD_INIT
   759 ;; This function is called by:
   760 ;;		_main
   761 ;; This function uses a non-reentrant model
   762 ;;
   763                           
   764                           	psect	text5
   765  000B10                     __ptext5:
   766                           	callstack 0
   767  000B10                     _configuro:
   768                           	callstack 25
   769  000B10                     
   770                           ;main.c: 19:     OSCCON = 0x52;
   771  000B10  0E52               	movlw	82
   772  000B12  6ED3               	movwf	211,c	;volatile
   773  000B14                     
   774                           ;main.c: 20:     TRISAbits.RA0 = 1;
   775  000B14  8092               	bsf	146,0,c	;volatile
   776  000B16                     
   777                           ;main.c: 21:     ANSELAbits.ANSA0 = 1;
   778  000B16  010F               	movlb	15	; () banked
   779  000B18  815B               	bsf	91,0,b	;volatile
   780  000B1A                     
   781                           ; BSR set to: 15
   782                           ;main.c: 22:     TRISAbits.RA3 = 1;
   783  000B1A  8692               	bsf	146,3,c	;volatile
   784  000B1C                     
   785                           ; BSR set to: 15
   786                           ;main.c: 23:     ANSELAbits.ANSA3 = 0;
   787  000B1C  975B               	bcf	91,3,b	;volatile
   788  000B1E                     
   789                           ; BSR set to: 15
   790                           ;main.c: 24:     TRISBbits.RB0 = 1;
   791  000B1E  8093               	bsf	147,0,c	;volatile
   792  000B20                     
   793                           ; BSR set to: 15
   794                           ;main.c: 25:     ANSELBbits.ANSB0 = 0;
   795  000B20  915C               	bcf	92,0,b	;volatile
   796  000B22                     
   797                           ; BSR set to: 15
   798                           ;main.c: 26:     INTCON2bits.RBPU = 0;
   799  000B22  9EF1               	bcf	241,7,c	;volatile
   800  000B24                     
   801                           ; BSR set to: 15
   802                           ;main.c: 27:     WPUBbits.WPUB0 = 0;
   803  000B24  9085               	bcf	133,0,c	;volatile
   804                           
   805                           ;main.c: 28:     TRISD = 0x08;
   806  000B26  0E08               	movlw	8
   807  000B28  6E95               	movwf	149,c	;volatile
   808                           
   809                           ;main.c: 29:     ANSELD = 0x00;
   810  000B2A  0E00               	movlw	0
   811  000B2C  6F5E               	movwf	94,b	;volatile
   812  000B2E                     
   813                           ; BSR set to: 15
   814                           ;main.c: 30:     LCD_INIT();
   815  000B2E  EC13  F006         	call	_LCD_INIT	;wreg free
   816  000B32                     
   817                           ;main.c: 31:     PR2 = 62;
   818  000B32  0E3E               	movlw	62
   819  000B34  6EBB               	movwf	187,c	;volatile
   820  000B36                     
   821                           ;main.c: 32:     CCPR1L = 31;
   822  000B36  0E1F               	movlw	31
   823  000B38  6EBE               	movwf	190,c	;volatile
   824  000B3A                     
   825                           ;main.c: 33:     T2CON = 0x06;
   826  000B3A  0E06               	movlw	6
   827  000B3C  6EBA               	movwf	186,c	;volatile
   828  000B3E                     
   829                           ;main.c: 34:     CCP1CON = 0x0C;
   830  000B3E  0E0C               	movlw	12
   831  000B40  6EBD               	movwf	189,c	;volatile
   832  000B42                     
   833                           ;main.c: 36:     INTCONbits.GIE = 1;
   834  000B42  8EF2               	bsf	242,7,c	;volatile
   835  000B44                     
   836                           ;main.c: 37:     INTCONbits.INT0IE =1;
   837  000B44  88F2               	bsf	242,4,c	;volatile
   838  000B46                     
   839                           ;main.c: 38:     INTCON2bits.INTEDG0 = 0;
   840  000B46  9CF1               	bcf	241,6,c	;volatile
   841  000B48  0012               	return		;funcret
   842  000B4A                     __end_of_configuro:
   843                           	callstack 0
   844                           
   845 ;; *************** function _LCD_INIT *****************
   846 ;; Defined at:
   847 ;;		line 184 in file "LCD.c"
   848 ;; Parameters:    Size  Location     Type
   849 ;;		None
   850 ;; Auto vars:     Size  Location     Type
   851 ;;		None
   852 ;; Return value:  Size  Location     Type
   853 ;;                  1    wreg      void 
   854 ;; Registers used:
   855 ;;		wreg, status,2, status,0, cstack
   856 ;; Tracked objects:
   857 ;;		On entry : 0/0
   858 ;;		On exit  : 0/0
   859 ;;		Unchanged: 0/0
   860 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   861 ;;      Params:         0       0       0       0       0       0       0       0       0
   862 ;;      Locals:         0       0       0       0       0       0       0       0       0
   863 ;;      Temps:          1       0       0       0       0       0       0       0       0
   864 ;;      Totals:         1       0       0       0       0       0       0       0       0
   865 ;;Total ram usage:        1 bytes
   866 ;; Hardware stack levels used: 1
   867 ;; Hardware stack levels required when called: 4
   868 ;; This function calls:
   869 ;;		_BORRAR_LCD
   870 ;;		_CURSOR_HOME
   871 ;;		_CURSOR_ONOFF
   872 ;;		_LCD_CONFIG
   873 ;; This function is called by:
   874 ;;		_configuro
   875 ;; This function uses a non-reentrant model
   876 ;;
   877                           
   878                           	psect	text6
   879  000C26                     __ptext6:
   880                           	callstack 0
   881  000C26                     _LCD_INIT:
   882                           	callstack 25
   883  000C26                     
   884                           ;LCD.c: 185:     _delay((unsigned long)((15)*(4000000UL/4000.0)));
   885  000C26  0E14               	movlw	20
   886  000C28  6E07               	movwf	??_LCD_INIT^0,c
   887  000C2A  0E7A               	movlw	122
   888  000C2C                     u417:
   889  000C2C  2EE8               	decfsz	wreg,f,c
   890  000C2E  D7FE               	bra	u417
   891  000C30  2E07               	decfsz	??_LCD_INIT^0,f,c
   892  000C32  D7FC               	bra	u417
   893  000C34                     
   894                           ;LCD.c: 186:     LCD_CONFIG();
   895  000C34  EC3A  F005         	call	_LCD_CONFIG	;wreg free
   896  000C38                     
   897                           ;LCD.c: 187:     _delay((unsigned long)((15)*(4000000UL/4000.0)));
   898  000C38  0E14               	movlw	20
   899  000C3A  6E07               	movwf	??_LCD_INIT^0,c
   900  000C3C  0E7A               	movlw	122
   901  000C3E                     u427:
   902  000C3E  2EE8               	decfsz	wreg,f,c
   903  000C40  D7FE               	bra	u427
   904  000C42  2E07               	decfsz	??_LCD_INIT^0,f,c
   905  000C44  D7FC               	bra	u427
   906                           
   907                           ;LCD.c: 188:     BORRAR_LCD();
   908  000C46  EC74  F006         	call	_BORRAR_LCD	;wreg free
   909                           
   910                           ;LCD.c: 189:     CURSOR_HOME();
   911  000C4A  EC70  F006         	call	_CURSOR_HOME	;wreg free
   912                           
   913                           ;LCD.c: 190:     CURSOR_ONOFF(1);
   914  000C4E  0E01               	movlw	1
   915  000C50  EC2B  F006         	call	_CURSOR_ONOFF
   916  000C54  0012               	return		;funcret
   917  000C56                     __end_of_LCD_INIT:
   918                           	callstack 0
   919                           
   920 ;; *************** function _LCD_CONFIG *****************
   921 ;; Defined at:
   922 ;;		line 101 in file "LCD.c"
   923 ;; Parameters:    Size  Location     Type
   924 ;;		None
   925 ;; Auto vars:     Size  Location     Type
   926 ;;		None
   927 ;; Return value:  Size  Location     Type
   928 ;;                  1    wreg      void 
   929 ;; Registers used:
   930 ;;		wreg, status,2, status,0, cstack
   931 ;; Tracked objects:
   932 ;;		On entry : 0/0
   933 ;;		On exit  : 0/0
   934 ;;		Unchanged: 0/0
   935 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   936 ;;      Params:         0       0       0       0       0       0       0       0       0
   937 ;;      Locals:         0       0       0       0       0       0       0       0       0
   938 ;;      Temps:          1       0       0       0       0       0       0       0       0
   939 ;;      Totals:         1       0       0       0       0       0       0       0       0
   940 ;;Total ram usage:        1 bytes
   941 ;; Hardware stack levels used: 1
   942 ;; Hardware stack levels required when called: 3
   943 ;; This function calls:
   944 ;;		_ENVIA_LCD_CMD
   945 ;;		_ENVIA_NIBBLE
   946 ;; This function is called by:
   947 ;;		_LCD_INIT
   948 ;; This function uses a non-reentrant model
   949 ;;
   950                           
   951                           	psect	text7
   952  000A74                     __ptext7:
   953                           	callstack 0
   954  000A74                     _LCD_CONFIG:
   955                           	callstack 25
   956  000A74                     
   957                           ;LCD.c: 103:  LATDbits.LATD0 = 0;
   958  000A74  908C               	bcf	140,0,c	;volatile
   959                           
   960                           ;LCD.c: 104:  LATDbits.LATD1 = 0;
   961  000A76  928C               	bcf	140,1,c	;volatile
   962  000A78                     
   963                           ;LCD.c: 105:  ENVIA_NIBBLE(0x30);
   964  000A78  0E30               	movlw	48
   965  000A7A  EC55  F006         	call	_ENVIA_NIBBLE
   966  000A7E                     
   967                           ;LCD.c: 106:     _delay((unsigned long)((2)*(4000000UL/4000.0)));
   968  000A7E  0E03               	movlw	3
   969  000A80  6E06               	movwf	??_LCD_CONFIG^0,c
   970  000A82  0E98               	movlw	152
   971  000A84                     u437:
   972  000A84  2EE8               	decfsz	wreg,f,c
   973  000A86  D7FE               	bra	u437
   974  000A88  2E06               	decfsz	??_LCD_CONFIG^0,f,c
   975  000A8A  D7FC               	bra	u437
   976  000A8C                     
   977                           ;LCD.c: 107:  ENVIA_NIBBLE(0x30);
   978  000A8C  0E30               	movlw	48
   979  000A8E  EC55  F006         	call	_ENVIA_NIBBLE
   980                           
   981                           ;LCD.c: 108:     _delay((unsigned long)((100)*(4000000UL/4000000.0)));
   982  000A92  0E21               	movlw	33
   983  000A94                     u447:
   984  000A94  2EE8               	decfsz	wreg,f,c
   985  000A96  D7FE               	bra	u447
   986  000A98  F000               	nop	
   987  000A9A                     
   988                           ;LCD.c: 109:     ENVIA_NIBBLE(0x30);
   989  000A9A  0E30               	movlw	48
   990  000A9C  EC55  F006         	call	_ENVIA_NIBBLE
   991  000AA0                     
   992                           ;LCD.c: 110:  ENVIA_NIBBLE(0x20);
   993  000AA0  0E20               	movlw	32
   994  000AA2  EC55  F006         	call	_ENVIA_NIBBLE
   995  000AA6                     
   996                           ;LCD.c: 111:  ENVIA_LCD_CMD(0x01);
   997  000AA6  0E01               	movlw	1
   998  000AA8  ECDF  F005         	call	_ENVIA_LCD_CMD
   999  000AAC                     
  1000                           ;LCD.c: 112:  ENVIA_LCD_CMD(0x28);
  1001  000AAC  0E28               	movlw	40
  1002  000AAE  ECDF  F005         	call	_ENVIA_LCD_CMD
  1003  000AB2                     
  1004                           ;LCD.c: 113:  ENVIA_LCD_CMD(0x0F);
  1005  000AB2  0E0F               	movlw	15
  1006  000AB4  ECDF  F005         	call	_ENVIA_LCD_CMD
  1007  000AB8                     
  1008                           ;LCD.c: 114:  ENVIA_LCD_CMD(0x06);
  1009  000AB8  0E06               	movlw	6
  1010  000ABA  ECDF  F005         	call	_ENVIA_LCD_CMD
  1011  000ABE                     
  1012                           ;LCD.c: 115:  ENVIA_LCD_CMD(0x01);
  1013  000ABE  0E01               	movlw	1
  1014  000AC0  ECDF  F005         	call	_ENVIA_LCD_CMD
  1015  000AC4  0012               	return		;funcret
  1016  000AC6                     __end_of_LCD_CONFIG:
  1017                           	callstack 0
  1018                           
  1019 ;; *************** function _CURSOR_ONOFF *****************
  1020 ;; Defined at:
  1021 ;;		line 54 in file "LCD.c"
  1022 ;; Parameters:    Size  Location     Type
  1023 ;;  estado          1    wreg     unsigned char 
  1024 ;; Auto vars:     Size  Location     Type
  1025 ;;  estado          1    5[COMRAM] unsigned char 
  1026 ;; Return value:  Size  Location     Type
  1027 ;;                  1    wreg      void 
  1028 ;; Registers used:
  1029 ;;		wreg, status,2, status,0, cstack
  1030 ;; Tracked objects:
  1031 ;;		On entry : 0/0
  1032 ;;		On exit  : 0/0
  1033 ;;		Unchanged: 0/0
  1034 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1035 ;;      Params:         0       0       0       0       0       0       0       0       0
  1036 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1037 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1038 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1039 ;;Total ram usage:        1 bytes
  1040 ;; Hardware stack levels used: 1
  1041 ;; Hardware stack levels required when called: 3
  1042 ;; This function calls:
  1043 ;;		_ENVIA_LCD_CMD
  1044 ;; This function is called by:
  1045 ;;		_LCD_INIT
  1046 ;; This function uses a non-reentrant model
  1047 ;;
  1048                           
  1049                           	psect	text8
  1050  000C56                     __ptext8:
  1051                           	callstack 0
  1052  000C56                     _CURSOR_ONOFF:
  1053                           	callstack 25
  1054                           
  1055                           ;incstack = 0
  1056                           ;CURSOR_ONOFF@estado stored from wreg
  1057  000C56  6E06               	movwf	CURSOR_ONOFF@estado^0,c
  1058  000C58                     
  1059                           ;LCD.c: 54: void CURSOR_ONOFF(unsigned char estado);LCD.c: 55: {;LCD.c: 56:  if(estado =
      +                          = 0) ENVIA_LCD_CMD(0x0E);
  1060  000C58  5006               	movf	CURSOR_ONOFF@estado^0,w,c
  1061  000C5A  A4D8               	btfss	status,2,c
  1062  000C5C  EF32  F006         	goto	u221
  1063  000C60  EF34  F006         	goto	u220
  1064  000C64                     u221:
  1065  000C64  EF37  F006         	goto	l1293
  1066  000C68                     u220:
  1067  000C68  0E0E               	movlw	14
  1068  000C6A  ECDF  F005         	call	_ENVIA_LCD_CMD
  1069  000C6E                     l1293:
  1070                           
  1071                           ;LCD.c: 57:  if(estado == 1) ENVIA_LCD_CMD(0x0C);
  1072  000C6E  0406               	decf	CURSOR_ONOFF@estado^0,w,c
  1073  000C70  A4D8               	btfss	status,2,c
  1074  000C72  EF3D  F006         	goto	u231
  1075  000C76  EF3F  F006         	goto	u230
  1076  000C7A                     u231:
  1077  000C7A  EF42  F006         	goto	l144
  1078  000C7E                     u230:
  1079  000C7E  0E0C               	movlw	12
  1080  000C80  ECDF  F005         	call	_ENVIA_LCD_CMD
  1081  000C84                     l144:
  1082  000C84  0012               	return		;funcret
  1083  000C86                     __end_of_CURSOR_ONOFF:
  1084                           	callstack 0
  1085                           
  1086 ;; *************** function _CURSOR_HOME *****************
  1087 ;; Defined at:
  1088 ;;		line 29 in file "LCD.c"
  1089 ;; Parameters:    Size  Location     Type
  1090 ;;		None
  1091 ;; Auto vars:     Size  Location     Type
  1092 ;;		None
  1093 ;; Return value:  Size  Location     Type
  1094 ;;                  1    wreg      void 
  1095 ;; Registers used:
  1096 ;;		wreg, status,2, status,0, cstack
  1097 ;; Tracked objects:
  1098 ;;		On entry : 0/0
  1099 ;;		On exit  : 0/0
  1100 ;;		Unchanged: 0/0
  1101 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1102 ;;      Params:         0       0       0       0       0       0       0       0       0
  1103 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1104 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1105 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1106 ;;Total ram usage:        0 bytes
  1107 ;; Hardware stack levels used: 1
  1108 ;; Hardware stack levels required when called: 3
  1109 ;; This function calls:
  1110 ;;		_ENVIA_LCD_CMD
  1111 ;; This function is called by:
  1112 ;;		_LCD_INIT
  1113 ;; This function uses a non-reentrant model
  1114 ;;
  1115                           
  1116                           	psect	text9
  1117  000CE0                     __ptext9:
  1118                           	callstack 0
  1119  000CE0                     _CURSOR_HOME:
  1120                           	callstack 25
  1121  000CE0                     
  1122                           ;LCD.c: 31:  ENVIA_LCD_CMD(0x02);
  1123  000CE0  0E02               	movlw	2
  1124  000CE2  ECDF  F005         	call	_ENVIA_LCD_CMD
  1125  000CE6  0012               	return		;funcret
  1126  000CE8                     __end_of_CURSOR_HOME:
  1127                           	callstack 0
  1128                           
  1129 ;; *************** function _BORRAR_LCD *****************
  1130 ;; Defined at:
  1131 ;;		line 96 in file "LCD.c"
  1132 ;; Parameters:    Size  Location     Type
  1133 ;;		None
  1134 ;; Auto vars:     Size  Location     Type
  1135 ;;		None
  1136 ;; Return value:  Size  Location     Type
  1137 ;;                  1    wreg      void 
  1138 ;; Registers used:
  1139 ;;		wreg, status,2, status,0, cstack
  1140 ;; Tracked objects:
  1141 ;;		On entry : 0/0
  1142 ;;		On exit  : 0/0
  1143 ;;		Unchanged: 0/0
  1144 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1145 ;;      Params:         0       0       0       0       0       0       0       0       0
  1146 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1147 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1148 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1149 ;;Total ram usage:        0 bytes
  1150 ;; Hardware stack levels used: 1
  1151 ;; Hardware stack levels required when called: 3
  1152 ;; This function calls:
  1153 ;;		_ENVIA_LCD_CMD
  1154 ;; This function is called by:
  1155 ;;		_LCD_INIT
  1156 ;; This function uses a non-reentrant model
  1157 ;;
  1158                           
  1159                           	psect	text10
  1160  000CE8                     __ptext10:
  1161                           	callstack 0
  1162  000CE8                     _BORRAR_LCD:
  1163                           	callstack 25
  1164  000CE8                     
  1165                           ;LCD.c: 98:  ENVIA_LCD_CMD(0x01);
  1166  000CE8  0E01               	movlw	1
  1167  000CEA  ECDF  F005         	call	_ENVIA_LCD_CMD
  1168  000CEE  0012               	return		;funcret
  1169  000CF0                     __end_of_BORRAR_LCD:
  1170                           	callstack 0
  1171                           
  1172 ;; *************** function _POS_CURSOR *****************
  1173 ;; Defined at:
  1174 ;;		line 5 in file "LCD.c"
  1175 ;; Parameters:    Size  Location     Type
  1176 ;;  fila            1    wreg     unsigned char 
  1177 ;;  columna         1    5[COMRAM] unsigned char 
  1178 ;; Auto vars:     Size  Location     Type
  1179 ;;  fila            1    6[COMRAM] unsigned char 
  1180 ;; Return value:  Size  Location     Type
  1181 ;;                  1    wreg      void 
  1182 ;; Registers used:
  1183 ;;		wreg, status,2, status,0, cstack
  1184 ;; Tracked objects:
  1185 ;;		On entry : 0/0
  1186 ;;		On exit  : 0/0
  1187 ;;		Unchanged: 0/0
  1188 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1189 ;;      Params:         1       0       0       0       0       0       0       0       0
  1190 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1191 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1192 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1193 ;;Total ram usage:        2 bytes
  1194 ;; Hardware stack levels used: 1
  1195 ;; Hardware stack levels required when called: 3
  1196 ;; This function calls:
  1197 ;;		_ENVIA_LCD_CMD
  1198 ;; This function is called by:
  1199 ;;		_main
  1200 ;; This function uses a non-reentrant model
  1201 ;;
  1202                           
  1203                           	psect	text11
  1204  000B4A                     __ptext11:
  1205                           	callstack 0
  1206  000B4A                     _POS_CURSOR:
  1207                           	callstack 27
  1208                           
  1209                           ;incstack = 0
  1210                           ;POS_CURSOR@fila stored from wreg
  1211  000B4A  6E07               	movwf	POS_CURSOR@fila^0,c
  1212  000B4C                     
  1213                           ;LCD.c: 5: void POS_CURSOR(unsigned char fila,unsigned char columna);LCD.c: 6: {;LCD.c: 
      +                          7:  if(fila == 1)
  1214  000B4C  0407               	decf	POS_CURSOR@fila^0,w,c
  1215  000B4E  A4D8               	btfss	status,2,c
  1216  000B50  EFAC  F005         	goto	u321
  1217  000B54  EFAE  F005         	goto	u320
  1218  000B58                     u321:
  1219  000B58  EFB4  F005         	goto	l1443
  1220  000B5C                     u320:
  1221  000B5C                     
  1222                           ;LCD.c: 8:  {;LCD.c: 9:   ENVIA_LCD_CMD(0x80+columna);
  1223  000B5C  5006               	movf	POS_CURSOR@columna^0,w,c
  1224  000B5E  0F80               	addlw	128
  1225  000B60  ECDF  F005         	call	_ENVIA_LCD_CMD
  1226                           
  1227                           ;LCD.c: 10:  }
  1228  000B64  EFC1  F005         	goto	l114
  1229  000B68                     l1443:
  1230  000B68  0E02               	movlw	2
  1231  000B6A  1807               	xorwf	POS_CURSOR@fila^0,w,c
  1232  000B6C  A4D8               	btfss	status,2,c
  1233  000B6E  EFBB  F005         	goto	u331
  1234  000B72  EFBD  F005         	goto	u330
  1235  000B76                     u331:
  1236  000B76  EFC1  F005         	goto	l114
  1237  000B7A                     u330:
  1238  000B7A                     
  1239                           ;LCD.c: 12:  {;LCD.c: 13:   ENVIA_LCD_CMD(0xC0+columna);
  1240  000B7A  5006               	movf	POS_CURSOR@columna^0,w,c
  1241  000B7C  0FC0               	addlw	192
  1242  000B7E  ECDF  F005         	call	_ENVIA_LCD_CMD
  1243  000B82                     l114:
  1244  000B82  0012               	return		;funcret
  1245  000B84                     __end_of_POS_CURSOR:
  1246                           	callstack 0
  1247                           
  1248 ;; *************** function _ENVIA_LCD_CMD *****************
  1249 ;; Defined at:
  1250 ;;		line 128 in file "LCD.c"
  1251 ;; Parameters:    Size  Location     Type
  1252 ;;  dato            1    wreg     unsigned char 
  1253 ;; Auto vars:     Size  Location     Type
  1254 ;;  dato            1    3[COMRAM] unsigned char 
  1255 ;;  aux             1    4[COMRAM] unsigned char 
  1256 ;; Return value:  Size  Location     Type
  1257 ;;                  1    wreg      void 
  1258 ;; Registers used:
  1259 ;;		wreg, status,2, status,0, cstack
  1260 ;; Tracked objects:
  1261 ;;		On entry : 0/0
  1262 ;;		On exit  : 0/0
  1263 ;;		Unchanged: 0/0
  1264 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1265 ;;      Params:         0       0       0       0       0       0       0       0       0
  1266 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1267 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1268 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1269 ;;Total ram usage:        2 bytes
  1270 ;; Hardware stack levels used: 1
  1271 ;; Hardware stack levels required when called: 2
  1272 ;; This function calls:
  1273 ;;		_ENVIA_NIBBLE
  1274 ;;		_LEER_LCD
  1275 ;; This function is called by:
  1276 ;;		_POS_CURSOR
  1277 ;;		_CURSOR_HOME
  1278 ;;		_CURSOR_ONOFF
  1279 ;;		_BORRAR_LCD
  1280 ;;		_LCD_CONFIG
  1281 ;;		_BLINK_CURSOR
  1282 ;;		_DISPLAY_ONOFF
  1283 ;;		_CURSOR_SHIFTLEFT
  1284 ;;		_CURSOR_SHIFTRIGHT
  1285 ;;		_DISPLAY_SHIFTLEFT
  1286 ;;		_DISPLAY_SHIFTRIGHT
  1287 ;;		_GENERACARACTER
  1288 ;; This function uses a non-reentrant model
  1289 ;;
  1290                           
  1291                           	psect	text12
  1292  000BBE                     __ptext12:
  1293                           	callstack 0
  1294  000BBE                     _ENVIA_LCD_CMD:
  1295                           	callstack 25
  1296                           
  1297                           ;incstack = 0
  1298                           ;ENVIA_LCD_CMD@dato stored from wreg
  1299  000BBE  6E04               	movwf	ENVIA_LCD_CMD@dato^0,c
  1300  000BC0                     
  1301                           ;LCD.c: 128: void ENVIA_LCD_CMD(unsigned char dato);LCD.c: 129: {;LCD.c: 130:  unsigned 
      +                          char aux;;LCD.c: 131:  LATDbits.LATD0 = 0;
  1302  000BC0  908C               	bcf	140,0,c	;volatile
  1303  000BC2                     
  1304                           ;LCD.c: 132:  LEER_LCD();
  1305  000BC2  ECCF  F004         	call	_LEER_LCD	;wreg free
  1306  000BC6                     
  1307                           ;LCD.c: 133:  TRISD = 0b00000000;
  1308  000BC6  0E00               	movlw	0
  1309  000BC8  6E95               	movwf	149,c	;volatile
  1310  000BCA                     
  1311                           ;LCD.c: 134:     _delay((unsigned long)((100)*(4000000UL/4000000.0)));
  1312  000BCA  0E21               	movlw	33
  1313  000BCC                     u457:
  1314  000BCC  2EE8               	decfsz	wreg,f,c
  1315  000BCE  D7FE               	bra	u457
  1316  000BD0  F000               	nop	
  1317  000BD2                     
  1318                           ;LCD.c: 135:     LATDbits.LATD1 = 0;
  1319  000BD2  928C               	bcf	140,1,c	;volatile
  1320  000BD4                     
  1321                           ;LCD.c: 136:  LATDbits.LATD2 = 0;
  1322  000BD4  948C               	bcf	140,2,c	;volatile
  1323  000BD6                     
  1324                           ;LCD.c: 137:  LATDbits.LATD0 = 0;
  1325  000BD6  908C               	bcf	140,0,c	;volatile
  1326  000BD8                     
  1327                           ;LCD.c: 138:  aux = dato & 0xF0;
  1328  000BD8  5004               	movf	ENVIA_LCD_CMD@dato^0,w,c
  1329  000BDA  0BF0               	andlw	240
  1330  000BDC  6E05               	movwf	ENVIA_LCD_CMD@aux^0,c
  1331  000BDE                     
  1332                           ;LCD.c: 139:  ENVIA_NIBBLE(aux);
  1333  000BDE  5005               	movf	ENVIA_LCD_CMD@aux^0,w,c
  1334  000BE0  EC55  F006         	call	_ENVIA_NIBBLE
  1335  000BE4                     
  1336                           ;LCD.c: 140:  aux = dato<<4;
  1337  000BE4  3804               	swapf	ENVIA_LCD_CMD@dato^0,w,c
  1338  000BE6  0BF0               	andlw	240
  1339  000BE8  6E05               	movwf	ENVIA_LCD_CMD@aux^0,c
  1340  000BEA                     
  1341                           ;LCD.c: 141:  ENVIA_NIBBLE(aux);
  1342  000BEA  5005               	movf	ENVIA_LCD_CMD@aux^0,w,c
  1343  000BEC  EC55  F006         	call	_ENVIA_NIBBLE
  1344  000BF0  0012               	return		;funcret
  1345  000BF2                     __end_of_ENVIA_LCD_CMD:
  1346                           	callstack 0
  1347                           
  1348 ;; *************** function _ESCRIBE_MENSAJE2 *****************
  1349 ;; Defined at:
  1350 ;;		line 69 in file "LCD.c"
  1351 ;; Parameters:    Size  Location     Type
  1352 ;;  cadena          2    6[COMRAM] PTR const unsigned char 
  1353 ;;		 -> STR_2(6), STR_1(15), 
  1354 ;; Auto vars:     Size  Location     Type
  1355 ;;  i               1   11[COMRAM] unsigned char 
  1356 ;;  tam             1   10[COMRAM] unsigned char 
  1357 ;; Return value:  Size  Location     Type
  1358 ;;                  1    wreg      void 
  1359 ;; Registers used:
  1360 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1361 ;; Tracked objects:
  1362 ;;		On entry : 0/0
  1363 ;;		On exit  : 0/0
  1364 ;;		Unchanged: 0/0
  1365 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1366 ;;      Params:         2       0       0       0       0       0       0       0       0
  1367 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1368 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1369 ;;      Totals:         6       0       0       0       0       0       0       0       0
  1370 ;;Total ram usage:        6 bytes
  1371 ;; Hardware stack levels used: 1
  1372 ;; Hardware stack levels required when called: 3
  1373 ;; This function calls:
  1374 ;;		_ENVIA_CHAR
  1375 ;;		_strlen
  1376 ;; This function is called by:
  1377 ;;		_main
  1378 ;; This function uses a non-reentrant model
  1379 ;;
  1380                           
  1381                           	psect	text13
  1382  000AC6                     __ptext13:
  1383                           	callstack 0
  1384  000AC6                     _ESCRIBE_MENSAJE2:
  1385                           	callstack 27
  1386  000AC6                     
  1387                           ;LCD.c: 69: void ESCRIBE_MENSAJE2(const char *cadena);LCD.c: 70: {;LCD.c: 71:     unsign
      +                          ed char tam;;LCD.c: 72:     tam = strlen(cadena);
  1388  000AC6  C007  F003         	movff	ESCRIBE_MENSAJE2@cadena,strlen@s
  1389  000ACA  C008  F004         	movff	ESCRIBE_MENSAJE2@cadena+1,strlen@s+1
  1390  000ACE  ECC2  F005         	call	_strlen	;wreg free
  1391  000AD2  5003               	movf	?_strlen^0,w,c
  1392  000AD4  6E0B               	movwf	ESCRIBE_MENSAJE2@tam^0,c
  1393  000AD6                     
  1394                           ;LCD.c: 74:  for(i = 0; i<tam; i++)
  1395  000AD6  0E00               	movlw	0
  1396  000AD8  6E0C               	movwf	ESCRIBE_MENSAJE2@i^0,c
  1397  000ADA  EF7E  F005         	goto	l1457
  1398  000ADE                     l1453:
  1399                           
  1400                           ;LCD.c: 75:  {;LCD.c: 76:   ENVIA_CHAR(cadena[i]);
  1401  000ADE  500C               	movf	ESCRIBE_MENSAJE2@i^0,w,c
  1402  000AE0  2407               	addwf	ESCRIBE_MENSAJE2@cadena^0,w,c
  1403  000AE2  6E09               	movwf	??_ESCRIBE_MENSAJE2^0,c
  1404  000AE4  0E00               	movlw	0
  1405  000AE6  2008               	addwfc	(ESCRIBE_MENSAJE2@cadena+1)^0,w,c
  1406  000AE8  6E0A               	movwf	(??_ESCRIBE_MENSAJE2+1)^0,c
  1407  000AEA  C009  FFF6         	movff	??_ESCRIBE_MENSAJE2,tblptrl
  1408  000AEE  C00A  FFF7         	movff	??_ESCRIBE_MENSAJE2+1,tblptrh
  1409  000AF2                     	if	0	;tblptru may be non-zero
  1410  000AF2                     	endif
  1411  000AF2                     	if	0	;tblptru may be non-zero
  1412  000AF2                     	endif
  1413  000AF2  0008               	tblrd		*
  1414  000AF4  50F5               	movf	tablat,w,c
  1415  000AF6  ECF9  F005         	call	_ENVIA_CHAR
  1416  000AFA                     
  1417                           ;LCD.c: 77:  }
  1418  000AFA  2A0C               	incf	ESCRIBE_MENSAJE2@i^0,f,c
  1419  000AFC                     l1457:
  1420  000AFC  500B               	movf	ESCRIBE_MENSAJE2@tam^0,w,c
  1421  000AFE  5C0C               	subwf	ESCRIBE_MENSAJE2@i^0,w,c
  1422  000B00  A0D8               	btfss	status,0,c
  1423  000B02  EF85  F005         	goto	u341
  1424  000B06  EF87  F005         	goto	u340
  1425  000B0A                     u341:
  1426  000B0A  EF6F  F005         	goto	l1453
  1427  000B0E                     u340:
  1428  000B0E  0012               	return		;funcret
  1429  000B10                     __end_of_ESCRIBE_MENSAJE2:
  1430                           	callstack 0
  1431                           
  1432 ;; *************** function _strlen *****************
  1433 ;; Defined at:
  1434 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\strlen.c"
  1435 ;; Parameters:    Size  Location     Type
  1436 ;;  s               2    2[COMRAM] PTR const unsigned char 
  1437 ;;		 -> STR_2(6), STR_1(15), 
  1438 ;; Auto vars:     Size  Location     Type
  1439 ;;  a               2    4[COMRAM] PTR const unsigned char 
  1440 ;;		 -> STR_2(6), STR_1(15), 
  1441 ;; Return value:  Size  Location     Type
  1442 ;;                  2    2[COMRAM] unsigned int 
  1443 ;; Registers used:
  1444 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
  1445 ;; Tracked objects:
  1446 ;;		On entry : 0/0
  1447 ;;		On exit  : 0/0
  1448 ;;		Unchanged: 0/0
  1449 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1450 ;;      Params:         2       0       0       0       0       0       0       0       0
  1451 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1452 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1453 ;;      Totals:         4       0       0       0       0       0       0       0       0
  1454 ;;Total ram usage:        4 bytes
  1455 ;; Hardware stack levels used: 1
  1456 ;; Hardware stack levels required when called: 1
  1457 ;; This function calls:
  1458 ;;		Nothing
  1459 ;; This function is called by:
  1460 ;;		_ESCRIBE_MENSAJE2
  1461 ;; This function uses a non-reentrant model
  1462 ;;
  1463                           
  1464                           	psect	text14
  1465  000B84                     __ptext14:
  1466                           	callstack 0
  1467  000B84                     _strlen:
  1468                           	callstack 28
  1469  000B84  C003  F005         	movff	strlen@s,strlen@a
  1470  000B88  C004  F006         	movff	strlen@s+1,strlen@a+1
  1471  000B8C  EFCA  F005         	goto	l1353
  1472  000B90                     l1351:
  1473  000B90  4A03               	infsnz	strlen@s^0,f,c
  1474  000B92  2A04               	incf	(strlen@s+1)^0,f,c
  1475  000B94                     l1353:
  1476  000B94  C003  FFF6         	movff	strlen@s,tblptrl
  1477  000B98  C004  FFF7         	movff	strlen@s+1,tblptrh
  1478  000B9C                     	if	0	;tblptru may be non-zero
  1479  000B9C                     	endif
  1480  000B9C                     	if	0	;tblptru may be non-zero
  1481  000B9C                     	endif
  1482  000B9C  0008               	tblrd		*
  1483  000B9E  50F5               	movf	tablat,w,c
  1484  000BA0  0900               	iorlw	0
  1485  000BA2  A4D8               	btfss	status,2,c
  1486  000BA4  EFD6  F005         	goto	u241
  1487  000BA8  EFD8  F005         	goto	u240
  1488  000BAC                     u241:
  1489  000BAC  EFC8  F005         	goto	l1351
  1490  000BB0                     u240:
  1491  000BB0  5005               	movf	strlen@a^0,w,c
  1492  000BB2  5C03               	subwf	strlen@s^0,w,c
  1493  000BB4  6E03               	movwf	?_strlen^0,c
  1494  000BB6  5006               	movf	(strlen@a+1)^0,w,c
  1495  000BB8  5804               	subwfb	(strlen@s+1)^0,w,c
  1496  000BBA  6E04               	movwf	(?_strlen+1)^0,c
  1497  000BBC  0012               	return		;funcret
  1498  000BBE                     __end_of_strlen:
  1499                           	callstack 0
  1500                           
  1501 ;; *************** function _ENVIA_CHAR *****************
  1502 ;; Defined at:
  1503 ;;		line 80 in file "LCD.c"
  1504 ;; Parameters:    Size  Location     Type
  1505 ;;  dato            1    wreg     unsigned char 
  1506 ;; Auto vars:     Size  Location     Type
  1507 ;;  dato            1    3[COMRAM] unsigned char 
  1508 ;;  aux             1    4[COMRAM] unsigned char 
  1509 ;; Return value:  Size  Location     Type
  1510 ;;                  1    wreg      void 
  1511 ;; Registers used:
  1512 ;;		wreg, status,2, status,0, cstack
  1513 ;; Tracked objects:
  1514 ;;		On entry : 0/0
  1515 ;;		On exit  : 0/0
  1516 ;;		Unchanged: 0/0
  1517 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1518 ;;      Params:         0       0       0       0       0       0       0       0       0
  1519 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1520 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1521 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1522 ;;Total ram usage:        2 bytes
  1523 ;; Hardware stack levels used: 1
  1524 ;; Hardware stack levels required when called: 2
  1525 ;; This function calls:
  1526 ;;		_ENVIA_NIBBLE
  1527 ;;		_LEER_LCD
  1528 ;; This function is called by:
  1529 ;;		_main
  1530 ;;		_ESCRIBE_MENSAJE2
  1531 ;;		_ESCRIBE_MENSAJE
  1532 ;;		_GENERACARACTER
  1533 ;; This function uses a non-reentrant model
  1534 ;;
  1535                           
  1536                           	psect	text15
  1537  000BF2                     __ptext15:
  1538                           	callstack 0
  1539  000BF2                     _ENVIA_CHAR:
  1540                           	callstack 27
  1541                           
  1542                           ;incstack = 0
  1543                           ;ENVIA_CHAR@dato stored from wreg
  1544  000BF2  6E04               	movwf	ENVIA_CHAR@dato^0,c
  1545  000BF4                     
  1546                           ;LCD.c: 80: void ENVIA_CHAR(unsigned char dato);LCD.c: 81: {;LCD.c: 82:  unsigned char a
      +                          ux;;LCD.c: 83:  LATDbits.LATD0 = 1;
  1547  000BF4  808C               	bsf	140,0,c	;volatile
  1548  000BF6                     
  1549                           ;LCD.c: 84:  LEER_LCD();
  1550  000BF6  ECCF  F004         	call	_LEER_LCD	;wreg free
  1551  000BFA                     
  1552                           ;LCD.c: 85:  TRISD = 0x00;
  1553  000BFA  0E00               	movlw	0
  1554  000BFC  6E95               	movwf	149,c	;volatile
  1555  000BFE                     
  1556                           ;LCD.c: 86:     _delay((unsigned long)((100)*(4000000UL/4000000.0)));
  1557  000BFE  0E21               	movlw	33
  1558  000C00                     u467:
  1559  000C00  2EE8               	decfsz	wreg,f,c
  1560  000C02  D7FE               	bra	u467
  1561  000C04  F000               	nop	
  1562  000C06                     
  1563                           ;LCD.c: 87:  LATDbits.LATD1 = 0;
  1564  000C06  928C               	bcf	140,1,c	;volatile
  1565  000C08                     
  1566                           ;LCD.c: 88:  LATDbits.LATD2 = 0;
  1567  000C08  948C               	bcf	140,2,c	;volatile
  1568  000C0A                     
  1569                           ;LCD.c: 89:  LATDbits.LATD0 = 1;
  1570  000C0A  808C               	bsf	140,0,c	;volatile
  1571  000C0C                     
  1572                           ;LCD.c: 90:  aux = dato & 0xF0;
  1573  000C0C  5004               	movf	ENVIA_CHAR@dato^0,w,c
  1574  000C0E  0BF0               	andlw	240
  1575  000C10  6E05               	movwf	ENVIA_CHAR@aux^0,c
  1576  000C12                     
  1577                           ;LCD.c: 91:  ENVIA_NIBBLE(aux);
  1578  000C12  5005               	movf	ENVIA_CHAR@aux^0,w,c
  1579  000C14  EC55  F006         	call	_ENVIA_NIBBLE
  1580  000C18                     
  1581                           ;LCD.c: 92:  aux = dato << 4;
  1582  000C18  3804               	swapf	ENVIA_CHAR@dato^0,w,c
  1583  000C1A  0BF0               	andlw	240
  1584  000C1C  6E05               	movwf	ENVIA_CHAR@aux^0,c
  1585  000C1E                     
  1586                           ;LCD.c: 93:  ENVIA_NIBBLE(aux);
  1587  000C1E  5005               	movf	ENVIA_CHAR@aux^0,w,c
  1588  000C20  EC55  F006         	call	_ENVIA_NIBBLE
  1589  000C24  0012               	return		;funcret
  1590  000C26                     __end_of_ENVIA_CHAR:
  1591                           	callstack 0
  1592                           
  1593 ;; *************** function _LEER_LCD *****************
  1594 ;; Defined at:
  1595 ;;		line 144 in file "LCD.c"
  1596 ;; Parameters:    Size  Location     Type
  1597 ;;		None
  1598 ;; Auto vars:     Size  Location     Type
  1599 ;;  aux             1    2[COMRAM] unsigned char 
  1600 ;; Return value:  Size  Location     Type
  1601 ;;                  1    wreg      void 
  1602 ;; Registers used:
  1603 ;;		wreg, status,2, status,0
  1604 ;; Tracked objects:
  1605 ;;		On entry : 0/0
  1606 ;;		On exit  : 0/0
  1607 ;;		Unchanged: 0/0
  1608 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1609 ;;      Params:         0       0       0       0       0       0       0       0       0
  1610 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1611 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1612 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1613 ;;Total ram usage:        1 bytes
  1614 ;; Hardware stack levels used: 1
  1615 ;; Hardware stack levels required when called: 1
  1616 ;; This function calls:
  1617 ;;		Nothing
  1618 ;; This function is called by:
  1619 ;;		_ENVIA_CHAR
  1620 ;;		_ENVIA_LCD_CMD
  1621 ;; This function uses a non-reentrant model
  1622 ;;
  1623                           
  1624                           	psect	text16
  1625  00099E                     __ptext16:
  1626                           	callstack 0
  1627  00099E                     _LEER_LCD:
  1628                           	callstack 25
  1629  00099E                     
  1630                           ;LCD.c: 146:  unsigned char aux;;LCD.c: 147:  TRISD = 0xF8;
  1631  00099E  0EF8               	movlw	248
  1632  0009A0  6E95               	movwf	149,c	;volatile
  1633  0009A2                     
  1634                           ;LCD.c: 148:  LATDbits.LATD0 = 0;
  1635  0009A2  908C               	bcf	140,0,c	;volatile
  1636  0009A4                     
  1637                           ;LCD.c: 149:  LATDbits.LATD1 = 1;
  1638  0009A4  828C               	bsf	140,1,c	;volatile
  1639  0009A6                     
  1640                           ;LCD.c: 150:  LATDbits.LATD2 = 1;
  1641  0009A6  848C               	bsf	140,2,c	;volatile
  1642  0009A8                     
  1643                           ;LCD.c: 151:     _delay((unsigned long)((100)*(4000000UL/4000000.0)));
  1644  0009A8  0E21               	movlw	33
  1645  0009AA                     u477:
  1646  0009AA  2EE8               	decfsz	wreg,f,c
  1647  0009AC  D7FE               	bra	u477
  1648  0009AE  F000               	nop	
  1649  0009B0                     
  1650                           ;LCD.c: 152:  aux = PORTD;
  1651  0009B0  CF83 F003          	movff	3971,LEER_LCD@aux	;volatile
  1652  0009B4                     
  1653                           ;LCD.c: 153:  LATDbits.LATD2 = 0;
  1654  0009B4  948C               	bcf	140,2,c	;volatile
  1655  0009B6                     
  1656                           ;LCD.c: 154:     _delay((unsigned long)((100)*(4000000UL/4000000.0)));
  1657  0009B6  0E21               	movlw	33
  1658  0009B8                     u487:
  1659  0009B8  2EE8               	decfsz	wreg,f,c
  1660  0009BA  D7FE               	bra	u487
  1661  0009BC  F000               	nop	
  1662  0009BE                     
  1663                           ;LCD.c: 155:  LATDbits.LATD2 = 1;
  1664  0009BE  848C               	bsf	140,2,c	;volatile
  1665  0009C0                     
  1666                           ;LCD.c: 156:     _delay((unsigned long)((100)*(4000000UL/4000000.0)));
  1667  0009C0  0E21               	movlw	33
  1668  0009C2                     u497:
  1669  0009C2  2EE8               	decfsz	wreg,f,c
  1670  0009C4  D7FE               	bra	u497
  1671  0009C6  F000               	nop	
  1672  0009C8                     
  1673                           ;LCD.c: 157:  LATDbits.LATD2 = 0;
  1674  0009C8  948C               	bcf	140,2,c	;volatile
  1675  0009CA                     l1241:
  1676                           
  1677                           ;LCD.c: 158:  aux = aux & 0x80;
  1678  0009CA  5003               	movf	LEER_LCD@aux^0,w,c
  1679  0009CC  0B80               	andlw	128
  1680  0009CE  6E03               	movwf	LEER_LCD@aux^0,c
  1681                           
  1682                           ;LCD.c: 159:  while(aux == 0x80)
  1683  0009D0  EFFE  F004         	goto	l1255
  1684  0009D4                     l175:
  1685                           
  1686                           ;LCD.c: 160:         {;LCD.c: 161:             LATDbits.LATD2 = 1;
  1687  0009D4  848C               	bsf	140,2,c	;volatile
  1688  0009D6                     
  1689                           ;LCD.c: 162:             _delay((unsigned long)((100)*(4000000UL/4000000.0)));
  1690  0009D6  0E21               	movlw	33
  1691  0009D8                     u507:
  1692  0009D8  2EE8               	decfsz	wreg,f,c
  1693  0009DA  D7FE               	bra	u507
  1694  0009DC  F000               	nop	
  1695  0009DE                     
  1696                           ;LCD.c: 163:             aux = PORTD;
  1697  0009DE  CF83 F003          	movff	3971,LEER_LCD@aux	;volatile
  1698  0009E2                     
  1699                           ;LCD.c: 164:             LATDbits.LATD2 = 0;
  1700  0009E2  948C               	bcf	140,2,c	;volatile
  1701                           
  1702                           ;LCD.c: 165:             _delay((unsigned long)((100)*(4000000UL/4000000.0)));
  1703  0009E4  0E21               	movlw	33
  1704  0009E6                     u517:
  1705  0009E6  2EE8               	decfsz	wreg,f,c
  1706  0009E8  D7FE               	bra	u517
  1707  0009EA  F000               	nop	
  1708  0009EC                     
  1709                           ;LCD.c: 166:             LATDbits.LATD2 = 1;
  1710  0009EC  848C               	bsf	140,2,c	;volatile
  1711                           
  1712                           ;LCD.c: 167:             _delay((unsigned long)((100)*(4000000UL/4000000.0)));
  1713  0009EE  0E21               	movlw	33
  1714  0009F0                     u527:
  1715  0009F0  2EE8               	decfsz	wreg,f,c
  1716  0009F2  D7FE               	bra	u527
  1717  0009F4  F000               	nop	
  1718  0009F6                     
  1719                           ;LCD.c: 168:             LATDbits.LATD2 = 0;
  1720  0009F6  948C               	bcf	140,2,c	;volatile
  1721  0009F8  EFE5  F004         	goto	l1241
  1722  0009FC                     l1255:
  1723                           
  1724                           ;LCD.c: 159:  while(aux == 0x80)
  1725  0009FC  0E80               	movlw	128
  1726  0009FE  1803               	xorwf	LEER_LCD@aux^0,w,c
  1727  000A00  B4D8               	btfsc	status,2,c
  1728  000A02  EF05  F005         	goto	u211
  1729  000A06  EF07  F005         	goto	u210
  1730  000A0A                     u211:
  1731  000A0A  EFEA  F004         	goto	l175
  1732  000A0E                     u210:
  1733  000A0E  0012               	return		;funcret
  1734  000A10                     __end_of_LEER_LCD:
  1735                           	callstack 0
  1736                           
  1737 ;; *************** function _ENVIA_NIBBLE *****************
  1738 ;; Defined at:
  1739 ;;		line 118 in file "LCD.c"
  1740 ;; Parameters:    Size  Location     Type
  1741 ;;  dato            1    wreg     unsigned char 
  1742 ;; Auto vars:     Size  Location     Type
  1743 ;;  dato            1    2[COMRAM] unsigned char 
  1744 ;; Return value:  Size  Location     Type
  1745 ;;                  1    wreg      void 
  1746 ;; Registers used:
  1747 ;;		wreg, status,2, status,0
  1748 ;; Tracked objects:
  1749 ;;		On entry : 0/0
  1750 ;;		On exit  : 0/0
  1751 ;;		Unchanged: 0/0
  1752 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1753 ;;      Params:         0       0       0       0       0       0       0       0       0
  1754 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1755 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1756 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1757 ;;Total ram usage:        1 bytes
  1758 ;; Hardware stack levels used: 1
  1759 ;; Hardware stack levels required when called: 1
  1760 ;; This function calls:
  1761 ;;		Nothing
  1762 ;; This function is called by:
  1763 ;;		_ENVIA_CHAR
  1764 ;;		_LCD_CONFIG
  1765 ;;		_ENVIA_LCD_CMD
  1766 ;; This function uses a non-reentrant model
  1767 ;;
  1768                           
  1769                           	psect	text17
  1770  000CAA                     __ptext17:
  1771                           	callstack 0
  1772  000CAA                     _ENVIA_NIBBLE:
  1773                           	callstack 26
  1774                           
  1775                           ;incstack = 0
  1776                           ;ENVIA_NIBBLE@dato stored from wreg
  1777  000CAA  6E03               	movwf	ENVIA_NIBBLE@dato^0,c
  1778  000CAC                     
  1779                           ;LCD.c: 118: void ENVIA_NIBBLE(unsigned char dato);LCD.c: 119: {;LCD.c: 120:  LATD &= 0x
      +                          0F;
  1780  000CAC  0E0F               	movlw	15
  1781  000CAE  168C               	andwf	140,f,c	;volatile
  1782                           
  1783                           ;LCD.c: 121:  dato &= 0xF0;
  1784  000CB0  0EF0               	movlw	240
  1785  000CB2  1603               	andwf	ENVIA_NIBBLE@dato^0,f,c
  1786                           
  1787                           ;LCD.c: 122:  LATD|= dato;
  1788  000CB4  5003               	movf	ENVIA_NIBBLE@dato^0,w,c	;volatile
  1789  000CB6  128C               	iorwf	140,f,c	;volatile
  1790  000CB8                     
  1791                           ;LCD.c: 123:  LATDbits.LATD2 = 1;
  1792  000CB8  848C               	bsf	140,2,c	;volatile
  1793  000CBA                     
  1794                           ;LCD.c: 124:     _delay((unsigned long)((100)*(4000000UL/4000000.0)));
  1795  000CBA  0E21               	movlw	33
  1796  000CBC                     u537:
  1797  000CBC  2EE8               	decfsz	wreg,f,c
  1798  000CBE  D7FE               	bra	u537
  1799  000CC0  F000               	nop	
  1800  000CC2                     
  1801                           ;LCD.c: 125:  LATDbits.LATD2 = 0;
  1802  000CC2  948C               	bcf	140,2,c	;volatile
  1803  000CC4  0012               	return		;funcret
  1804  000CC6                     __end_of_ENVIA_NIBBLE:
  1805                           	callstack 0
  1806                           
  1807 ;; *************** function _INT0_ISR *****************
  1808 ;; Defined at:
  1809 ;;		line 53 in file "main.c"
  1810 ;; Parameters:    Size  Location     Type
  1811 ;;		None
  1812 ;; Auto vars:     Size  Location     Type
  1813 ;;		None
  1814 ;; Return value:  Size  Location     Type
  1815 ;;                  1    wreg      void 
  1816 ;; Registers used:
  1817 ;;		wreg, status,2, status,0
  1818 ;; Tracked objects:
  1819 ;;		On entry : 0/0
  1820 ;;		On exit  : 0/0
  1821 ;;		Unchanged: 0/0
  1822 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1823 ;;      Params:         0       0       0       0       0       0       0       0       0
  1824 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1825 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1826 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1827 ;;Total ram usage:        2 bytes
  1828 ;; Hardware stack levels used: 1
  1829 ;; This function calls:
  1830 ;;		Nothing
  1831 ;; This function is called by:
  1832 ;;		Interrupt level 2
  1833 ;; This function uses a non-reentrant model
  1834 ;;
  1835                           
  1836                           	psect	intcode
  1837  000008                     __pintcode:
  1838                           	callstack 0
  1839  000008                     _INT0_ISR:
  1840                           	callstack 25
  1841                           
  1842                           ;incstack = 0
  1843  000008  821A               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  1844  00000A                     
  1845                           ;main.c: 54:     INTCONbits.INT0IF = 0;
  1846  00000A  92F2               	bcf	242,1,c	;volatile
  1847                           
  1848                           ;main.c: 55:     switch (nivel){
  1849  00000C  EF32  F000         	goto	i2l1125
  1850  000010                     i2l1109:
  1851                           
  1852                           ;main.c: 57:             CCPR1L = 5;
  1853  000010  0E05               	movlw	5
  1854  000012  6EBE               	movwf	190,c	;volatile
  1855                           
  1856                           ;main.c: 58:             nivel = 1;
  1857  000014  0E01               	movlw	1
  1858  000016  6E19               	movwf	_nivel^0,c
  1859                           
  1860                           ;main.c: 59:             break;
  1861  000018  EF5B  F000         	goto	i2l80
  1862  00001C                     i2l1111:
  1863                           
  1864                           ;main.c: 61:             CCPR1L = 15;
  1865  00001C  0E0F               	movlw	15
  1866  00001E  6EBE               	movwf	190,c	;volatile
  1867                           
  1868                           ;main.c: 62:             nivel = 2;
  1869  000020  0E02               	movlw	2
  1870  000022  6E19               	movwf	_nivel^0,c
  1871                           
  1872                           ;main.c: 63:             break;
  1873  000024  EF5B  F000         	goto	i2l80
  1874  000028                     i2l1113:
  1875                           
  1876                           ;main.c: 65:             CCPR1L = 25;
  1877  000028  0E19               	movlw	25
  1878  00002A  6EBE               	movwf	190,c	;volatile
  1879                           
  1880                           ;main.c: 66:             nivel = 3;
  1881  00002C  0E03               	movlw	3
  1882  00002E  6E19               	movwf	_nivel^0,c
  1883                           
  1884                           ;main.c: 67:             break;
  1885  000030  EF5B  F000         	goto	i2l80
  1886  000034                     i2l1115:
  1887                           
  1888                           ;main.c: 69:             CCPR1L = 35;
  1889  000034  0E23               	movlw	35
  1890  000036  6EBE               	movwf	190,c	;volatile
  1891                           
  1892                           ;main.c: 70:             nivel = 4;
  1893  000038  0E04               	movlw	4
  1894  00003A  6E19               	movwf	_nivel^0,c
  1895                           
  1896                           ;main.c: 71:             break;
  1897  00003C  EF5B  F000         	goto	i2l80
  1898  000040                     i2l1117:
  1899                           
  1900                           ;main.c: 73:             CCPR1L = 45;
  1901  000040  0E2D               	movlw	45
  1902  000042  6EBE               	movwf	190,c	;volatile
  1903                           
  1904                           ;main.c: 74:             nivel = 5;
  1905  000044  0E05               	movlw	5
  1906  000046  6E19               	movwf	_nivel^0,c
  1907                           
  1908                           ;main.c: 75:             break;
  1909  000048  EF5B  F000         	goto	i2l80
  1910  00004C                     i2l1119:
  1911                           
  1912                           ;main.c: 77:             CCPR1L = 55;
  1913  00004C  0E37               	movlw	55
  1914  00004E  6EBE               	movwf	190,c	;volatile
  1915                           
  1916                           ;main.c: 78:             nivel = 6;
  1917  000050  0E06               	movlw	6
  1918  000052  6E19               	movwf	_nivel^0,c
  1919                           
  1920                           ;main.c: 79:             break;
  1921  000054  EF5B  F000         	goto	i2l80
  1922  000058                     i2l1121:
  1923                           
  1924                           ;main.c: 81:             CCPR1L = 65;
  1925  000058  0E41               	movlw	65
  1926  00005A  6EBE               	movwf	190,c	;volatile
  1927                           
  1928                           ;main.c: 82:             nivel = 7;
  1929  00005C  0E07               	movlw	7
  1930  00005E  6E19               	movwf	_nivel^0,c
  1931                           
  1932                           ;main.c: 83:             break;
  1933  000060  EF5B  F000         	goto	i2l80
  1934  000064                     i2l1125:
  1935  000064  5019               	movf	_nivel^0,w,c
  1936  000066  6E01               	movwf	??_INT0_ISR^0,c
  1937  000068  6A02               	clrf	(??_INT0_ISR+1)^0,c
  1938                           
  1939                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1940                           ; Switch size 1, requested type "simple"
  1941                           ; Number of cases is 1, Range of values is 0 to 0
  1942                           ; switch strategies available:
  1943                           ; Name         Instructions Cycles
  1944                           ; simple_byte            4     3 (average)
  1945                           ;	Chosen strategy is simple_byte
  1946  00006A  5002               	movf	(??_INT0_ISR+1)^0,w,c
  1947  00006C  0A00               	xorlw	0	; case 0
  1948  00006E  B4D8               	btfsc	status,2,c
  1949  000070  EF3C  F000         	goto	i2l1547
  1950  000074  EF5B  F000         	goto	i2l80
  1951  000078                     i2l1547:
  1952                           
  1953                           ; Switch size 1, requested type "simple"
  1954                           ; Number of cases is 7, Range of values is 0 to 6
  1955                           ; switch strategies available:
  1956                           ; Name         Instructions Cycles
  1957                           ; simple_byte           22    12 (average)
  1958                           ;	Chosen strategy is simple_byte
  1959  000078  5001               	movf	??_INT0_ISR^0,w,c
  1960  00007A  0A00               	xorlw	0	; case 0
  1961  00007C  B4D8               	btfsc	status,2,c
  1962  00007E  EF08  F000         	goto	i2l1109
  1963  000082  0A01               	xorlw	1	; case 1
  1964  000084  B4D8               	btfsc	status,2,c
  1965  000086  EF0E  F000         	goto	i2l1111
  1966  00008A  0A03               	xorlw	3	; case 2
  1967  00008C  B4D8               	btfsc	status,2,c
  1968  00008E  EF14  F000         	goto	i2l1113
  1969  000092  0A01               	xorlw	1	; case 3
  1970  000094  B4D8               	btfsc	status,2,c
  1971  000096  EF1A  F000         	goto	i2l1115
  1972  00009A  0A07               	xorlw	7	; case 4
  1973  00009C  B4D8               	btfsc	status,2,c
  1974  00009E  EF20  F000         	goto	i2l1117
  1975  0000A2  0A01               	xorlw	1	; case 5
  1976  0000A4  B4D8               	btfsc	status,2,c
  1977  0000A6  EF26  F000         	goto	i2l1119
  1978  0000AA  0A03               	xorlw	3	; case 6
  1979  0000AC  B4D8               	btfsc	status,2,c
  1980  0000AE  EF2C  F000         	goto	i2l1121
  1981  0000B2  EF5B  F000         	goto	i2l80
  1982  0000B6                     i2l80:
  1983  0000B6  921A               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1984  0000B8  0011               	retfie		f
  1985  0000BA                     __end_of_INT0_ISR:
  1986                           	callstack 0
  1987                           
  1988                           	psect	rparam
  1989  0000                     
  1990                           	psect	temp
  1991  00001A                     btemp:
  1992                           	callstack 0
  1993  00001A                     	ds	1
  1994  0000                     int$flags	set	btemp
  1995  0000                     wtemp8	set	btemp+1
  1996  0000                     ttemp5	set	btemp+1
  1997  0000                     ttemp6	set	btemp+4
  1998  0000                     ttemp7	set	btemp+8
  1999                           
  2000                           	psect	idloc
  2001                           
  2002                           ;Config register IDLOC0 @ 0x200000
  2003                           ;	unspecified, using default values
  2004  200000                     	org	2097152
  2005  200000  FF                 	db	255
  2006                           
  2007                           ;Config register IDLOC1 @ 0x200001
  2008                           ;	unspecified, using default values
  2009  200001                     	org	2097153
  2010  200001  FF                 	db	255
  2011                           
  2012                           ;Config register IDLOC2 @ 0x200002
  2013                           ;	unspecified, using default values
  2014  200002                     	org	2097154
  2015  200002  FF                 	db	255
  2016                           
  2017                           ;Config register IDLOC3 @ 0x200003
  2018                           ;	unspecified, using default values
  2019  200003                     	org	2097155
  2020  200003  FF                 	db	255
  2021                           
  2022                           ;Config register IDLOC4 @ 0x200004
  2023                           ;	unspecified, using default values
  2024  200004                     	org	2097156
  2025  200004  FF                 	db	255
  2026                           
  2027                           ;Config register IDLOC5 @ 0x200005
  2028                           ;	unspecified, using default values
  2029  200005                     	org	2097157
  2030  200005  FF                 	db	255
  2031                           
  2032                           ;Config register IDLOC6 @ 0x200006
  2033                           ;	unspecified, using default values
  2034  200006                     	org	2097158
  2035  200006  FF                 	db	255
  2036                           
  2037                           ;Config register IDLOC7 @ 0x200007
  2038                           ;	unspecified, using default values
  2039  200007                     	org	2097159
  2040  200007  FF                 	db	255
  2041                           
  2042                           	psect	config
  2043                           
  2044                           ;Config register CONFIG1L @ 0x300000
  2045                           ;	PLL Selection
  2046                           ;	PLLSEL = PLL4X, 4x clock multiplier
  2047                           ;	PLL Enable Configuration bit
  2048                           ;	CFGPLLEN = OFF, PLL Disabled (firmware controlled)
  2049                           ;	CPU System Clock Postscaler
  2050                           ;	CPUDIV = NOCLKDIV, CPU uses system clock (no divide)
  2051                           ;	Low Speed USB mode with 48 MHz system clock
  2052                           ;	LS48MHZ = SYS24X4, System clock at 24 MHz, USB clock divider is set to 4
  2053  300000                     	org	3145728
  2054  300000  00                 	db	0
  2055                           
  2056                           ;Config register CONFIG1H @ 0x300001
  2057                           ;	Oscillator Selection
  2058                           ;	FOSC = INTOSCIO, Internal oscillator
  2059                           ;	Primary Oscillator Shutdown
  2060                           ;	PCLKEN = OFF, Primary oscillator shutdown firmware controlled
  2061                           ;	Fail-Safe Clock Monitor
  2062                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
  2063                           ;	Internal/External Oscillator Switchover
  2064                           ;	IESO = OFF, Oscillator Switchover mode disabled
  2065  300001                     	org	3145729
  2066  300001  08                 	db	8
  2067                           
  2068                           ;Config register CONFIG2L @ 0x300002
  2069                           ;	Power-up Timer Enable
  2070                           ;	nPWRTEN = ON, Power up timer enabled
  2071                           ;	Brown-out Reset Enable
  2072                           ;	BOREN = OFF, BOR disabled in hardware (SBOREN is ignored)
  2073                           ;	Brown-out Reset Voltage
  2074                           ;	BORV = 190, BOR set to 1.9V nominal
  2075                           ;	Low-Power Brown-out Reset
  2076                           ;	nLPBOR = OFF, Low-Power Brown-out Reset disabled
  2077  300002                     	org	3145730
  2078  300002  58                 	db	88
  2079                           
  2080                           ;Config register CONFIG2H @ 0x300003
  2081                           ;	Watchdog Timer Enable bits
  2082                           ;	WDTEN = OFF, WDT disabled in hardware (SWDTEN ignored)
  2083                           ;	Watchdog Timer Postscaler
  2084                           ;	WDTPS = 32768, 1:32768
  2085  300003                     	org	3145731
  2086  300003  3C                 	db	60
  2087                           
  2088                           ; Padding undefined space
  2089  300004                     	org	3145732
  2090  300004  FF                 	db	255
  2091                           
  2092                           ;Config register CONFIG3H @ 0x300005
  2093                           ;	CCP2 MUX bit
  2094                           ;	CCP2MX = RC1, CCP2 input/output is multiplexed with RC1
  2095                           ;	PORTB A/D Enable bit
  2096                           ;	PBADEN = OFF, PORTB<5:0> pins are configured as digital I/O on Reset
  2097                           ;	Timer3 Clock Input MUX bit
  2098                           ;	T3CMX = RC0, T3CKI function is on RC0
  2099                           ;	SDO Output MUX bit
  2100                           ;	SDOMX = RB3, SDO function is on RB3
  2101                           ;	Master Clear Reset Pin Enable
  2102                           ;	MCLRE = ON, MCLR pin enabled; RE3 input disabled
  2103  300005                     	org	3145733
  2104  300005  D1                 	db	209
  2105                           
  2106                           ;Config register CONFIG4L @ 0x300006
  2107                           ;	Stack Full/Underflow Reset
  2108                           ;	STVREN = ON, Stack full/underflow will cause Reset
  2109                           ;	Single-Supply ICSP Enable bit
  2110                           ;	LVP = OFF, Single-Supply ICSP disabled
  2111                           ;	Dedicated In-Circuit Debug/Programming Port Enable
  2112                           ;	ICPRT = OFF, ICPORT disabled
  2113                           ;	Extended Instruction Set Enable bit
  2114                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled
  2115                           ;	Background Debugger Enable bit
  2116                           ;	DEBUG = 0x1, unprogrammed default
  2117  300006                     	org	3145734
  2118  300006  81                 	db	129
  2119                           
  2120                           ; Padding undefined space
  2121  300007                     	org	3145735
  2122  300007  FF                 	db	255
  2123                           
  2124                           ;Config register CONFIG5L @ 0x300008
  2125                           ;	Block 0 Code Protect
  2126                           ;	CP0 = OFF, Block 0 is not code-protected
  2127                           ;	Block 1 Code Protect
  2128                           ;	CP1 = OFF, Block 1 is not code-protected
  2129                           ;	Block 2 Code Protect
  2130                           ;	CP2 = OFF, Block 2 is not code-protected
  2131                           ;	Block 3 Code Protect
  2132                           ;	CP3 = OFF, Block 3 is not code-protected
  2133  300008                     	org	3145736
  2134  300008  0F                 	db	15
  2135                           
  2136                           ;Config register CONFIG5H @ 0x300009
  2137                           ;	Boot Block Code Protect
  2138                           ;	CPB = OFF, Boot block is not code-protected
  2139                           ;	Data EEPROM Code Protect
  2140                           ;	CPD = OFF, Data EEPROM is not code-protected
  2141  300009                     	org	3145737
  2142  300009  C0                 	db	192
  2143                           
  2144                           ;Config register CONFIG6L @ 0x30000A
  2145                           ;	Block 0 Write Protect
  2146                           ;	WRT0 = OFF, Block 0 (0800-1FFFh) is not write-protected
  2147                           ;	Block 1 Write Protect
  2148                           ;	WRT1 = OFF, Block 1 (2000-3FFFh) is not write-protected
  2149                           ;	Block 2 Write Protect
  2150                           ;	WRT2 = OFF, Block 2 (04000-5FFFh) is not write-protected
  2151                           ;	Block 3 Write Protect
  2152                           ;	WRT3 = OFF, Block 3 (06000-7FFFh) is not write-protected
  2153  30000A                     	org	3145738
  2154  30000A  0F                 	db	15
  2155                           
  2156                           ;Config register CONFIG6H @ 0x30000B
  2157                           ;	Configuration Registers Write Protect
  2158                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) are not write-protected
  2159                           ;	Boot Block Write Protect
  2160                           ;	WRTB = OFF, Boot block (0000-7FFh) is not write-protected
  2161                           ;	Data EEPROM Write Protect
  2162                           ;	WRTD = OFF, Data EEPROM is not write-protected
  2163  30000B                     	org	3145739
  2164  30000B  E0                 	db	224
  2165                           
  2166                           ;Config register CONFIG7L @ 0x30000C
  2167                           ;	Block 0 Table Read Protect
  2168                           ;	EBTR0 = OFF, Block 0 is not protected from table reads executed in other blocks
  2169                           ;	Block 1 Table Read Protect
  2170                           ;	EBTR1 = OFF, Block 1 is not protected from table reads executed in other blocks
  2171                           ;	Block 2 Table Read Protect
  2172                           ;	EBTR2 = OFF, Block 2 is not protected from table reads executed in other blocks
  2173                           ;	Block 3 Table Read Protect
  2174                           ;	EBTR3 = OFF, Block 3 is not protected from table reads executed in other blocks
  2175  30000C                     	org	3145740
  2176  30000C  0F                 	db	15
  2177                           
  2178                           ;Config register CONFIG7H @ 0x30000D
  2179                           ;	Boot Block Table Read Protect
  2180                           ;	EBTRB = OFF, Boot block is not protected from table reads executed in other blocks
  2181  30000D                     	org	3145741
  2182  30000D  40                 	db	64
  2183                           tosu	equ	0xFFF
  2184                           tosh	equ	0xFFE
  2185                           tosl	equ	0xFFD
  2186                           stkptr	equ	0xFFC
  2187                           pclatu	equ	0xFFB
  2188                           pclath	equ	0xFFA
  2189                           pcl	equ	0xFF9
  2190                           tblptru	equ	0xFF8
  2191                           tblptrh	equ	0xFF7
  2192                           tblptrl	equ	0xFF6
  2193                           tablat	equ	0xFF5
  2194                           prodh	equ	0xFF4
  2195                           prodl	equ	0xFF3
  2196                           indf0	equ	0xFEF
  2197                           postinc0	equ	0xFEE
  2198                           postdec0	equ	0xFED
  2199                           preinc0	equ	0xFEC
  2200                           plusw0	equ	0xFEB
  2201                           fsr0h	equ	0xFEA
  2202                           fsr0l	equ	0xFE9
  2203                           wreg	equ	0xFE8
  2204                           indf1	equ	0xFE7
  2205                           postinc1	equ	0xFE6
  2206                           postdec1	equ	0xFE5
  2207                           preinc1	equ	0xFE4
  2208                           plusw1	equ	0xFE3
  2209                           fsr1h	equ	0xFE2
  2210                           fsr1l	equ	0xFE1
  2211                           bsr	equ	0xFE0
  2212                           indf2	equ	0xFDF
  2213                           postinc2	equ	0xFDE
  2214                           postdec2	equ	0xFDD
  2215                           preinc2	equ	0xFDC
  2216                           plusw2	equ	0xFDB
  2217                           fsr2h	equ	0xFDA
  2218                           fsr2l	equ	0xFD9
  2219                           status	equ	0xFD8

Data Sizes:
    Strings     21
    Constant    0
    Data        0
    BSS         7
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     18      25
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    strlen@s	PTR const unsigned char  size(2) Largest target is 15
		 -> STR_2(CODE[6]), STR_1(CODE[15]), 

    strlen@a	PTR const unsigned char  size(2) Largest target is 15
		 -> STR_2(CODE[6]), STR_1(CODE[15]), 

    ESCRIBE_MENSAJE2@cadena	PTR const unsigned char  size(2) Largest target is 15
		 -> STR_2(CODE[6]), STR_1(CODE[15]), 


Critical Paths under _main in COMRAM

    _main->_convierte
    _convierte->___lwdiv
    ___lwdiv->___lwmod
    _configuro->_LCD_INIT
    _LCD_INIT->_CURSOR_ONOFF
    _LCD_INIT->_LCD_CONFIG
    _LCD_CONFIG->_ENVIA_LCD_CMD
    _CURSOR_ONOFF->_ENVIA_LCD_CMD
    _CURSOR_HOME->_ENVIA_LCD_CMD
    _BORRAR_LCD->_ENVIA_LCD_CMD
    _POS_CURSOR->_ENVIA_LCD_CMD
    _ENVIA_LCD_CMD->_ENVIA_NIBBLE
    _ENVIA_LCD_CMD->_LEER_LCD
    _ESCRIBE_MENSAJE2->_strlen
    _ENVIA_CHAR->_ENVIA_NIBBLE
    _ENVIA_CHAR->_LEER_LCD

Critical Paths under _INT0_ISR in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _INT0_ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INT0_ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INT0_ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INT0_ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INT0_ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INT0_ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INT0_ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INT0_ISR in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    4362
                                             16 COMRAM     2     2      0
                         _ENVIA_CHAR
                   _ESCRIBE_MENSAJE2
                         _POS_CURSOR
                            ___lwdiv
                          _configuro
                          _convierte
                    _tomamuestra_ADC
 ---------------------------------------------------------------------------------
 (1) _tomamuestra_ADC                                      4     2      2       0
                                              2 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (1) _convierte                                            2     0      2    1549
                                             14 COMRAM     2     0      2
                            ___lwdiv
                            ___lwmod
                    _tomamuestra_ADC (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     615
                                              2 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     770
                                              7 COMRAM     7     3      4
                            ___lwmod (ARG)
                    _tomamuestra_ADC (ARG)
 ---------------------------------------------------------------------------------
 (1) _configuro                                            0     0      0     799
                           _LCD_INIT
 ---------------------------------------------------------------------------------
 (2) _LCD_INIT                                             1     1      0     799
                                              6 COMRAM     1     1      0
                         _BORRAR_LCD
                        _CURSOR_HOME
                       _CURSOR_ONOFF
                         _LCD_CONFIG
 ---------------------------------------------------------------------------------
 (3) _LCD_CONFIG                                           1     1      0     206
                                              5 COMRAM     1     1      0
                      _ENVIA_LCD_CMD
                       _ENVIA_NIBBLE
 ---------------------------------------------------------------------------------
 (3) _CURSOR_ONOFF                                         1     1      0     227
                                              5 COMRAM     1     1      0
                      _ENVIA_LCD_CMD
 ---------------------------------------------------------------------------------
 (3) _CURSOR_HOME                                          0     0      0     183
                      _ENVIA_LCD_CMD
 ---------------------------------------------------------------------------------
 (3) _BORRAR_LCD                                           0     0      0     183
                      _ENVIA_LCD_CMD
 ---------------------------------------------------------------------------------
 (1) _POS_CURSOR                                           2     1      1     423
                                              5 COMRAM     2     1      1
                      _ENVIA_LCD_CMD
 ---------------------------------------------------------------------------------
 (4) _ENVIA_LCD_CMD                                        2     2      0     183
                                              3 COMRAM     2     2      0
                       _ENVIA_NIBBLE
                           _LEER_LCD
 ---------------------------------------------------------------------------------
 (1) _ESCRIBE_MENSAJE2                                     6     4      2     615
                                              6 COMRAM     6     4      2
                         _ENVIA_CHAR
                             _strlen
 ---------------------------------------------------------------------------------
 (2) _strlen                                               4     2      2     166
                                              2 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (2) _ENVIA_CHAR                                           2     2      0     183
                                              3 COMRAM     2     2      0
                       _ENVIA_NIBBLE
                           _LEER_LCD
 ---------------------------------------------------------------------------------
 (5) _LEER_LCD                                             1     1      0      70
                                              2 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _ENVIA_NIBBLE                                         1     1      0      23
                                              2 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _INT0_ISR                                             2     2      0       0
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ENVIA_CHAR
     _ENVIA_NIBBLE
     _LEER_LCD
   _ESCRIBE_MENSAJE2
     _ENVIA_CHAR
     _strlen
   _POS_CURSOR
     _ENVIA_LCD_CMD
       _ENVIA_NIBBLE
       _LEER_LCD
   ___lwdiv
     ___lwmod (ARG)
     _tomamuestra_ADC (ARG)
   _configuro
     _LCD_INIT
       _BORRAR_LCD
         _ENVIA_LCD_CMD
       _CURSOR_HOME
         _ENVIA_LCD_CMD
       _CURSOR_ONOFF
         _ENVIA_LCD_CMD
       _LCD_CONFIG
         _ENVIA_LCD_CMD
         _ENVIA_NIBBLE
   _convierte
     ___lwdiv
     ___lwmod
     _tomamuestra_ADC (ARG)
   _tomamuestra_ADC

 _INT0_ISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      34        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     12      19       1       26.6%
BITBIGSFRllhlhl     24      0       0      30        0.0%
BITBIGSFRlhhl       24      0       0      25        0.0%
BITBIGSFRhl         1D      0       0      21        0.0%
BITBIGSFRlhhhhh      E      0       0      22        0.0%
BITBIGSFRhh          D      0       0      20        0.0%
BITBIGSFRlll         8      0       0      32        0.0%
BITBIGSFRllhhl       6      0       0      28        0.0%
BITBIGSFRllhhh       5      0       0      27        0.0%
BITBIGSFRlhhhhl      3      0       0      23        0.0%
BITBIGSFRllhlhh      1      0       0      29        0.0%
BITBIGSFRlhhhl       1      0       0      24        0.0%
BITBIGSFRllhll       1      0       0      31        0.0%
BITBIGSFRlhl         1      0       0      26        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      19      33        0.0%
DATA                 0      0      19       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.36 build 20220127204148 
Symbol Table                                                                                   Thu Jun 01 17:30:40 2023

                      l60 08A0                        l63 0C88                        l57 0B48  
                      l66 0CA8             ENVIA_CHAR@aux 0005                       l114 0B82  
                     l127 0CE6                       l144 0C84                       l162 0CEE  
                     l171 0BF0                       l156 0B0E                       l165 0AC4  
                     l175 09D4                       l159 0C24                       l168 0CC4  
                     l177 0A0E                       l185 0C54                       l686 099C  
                     l679 0994                       l696 0A72                       l865 0BBC  
                     l689 0A6A                       u210 0A0E                       u211 0A0A  
                     u220 0C68                       u300 0A56                       u221 0C64  
                     u301 0A52                       u230 0C7E                       u310 0C96  
                     u231 0C7A                       u311 0C92                       u240 0BB0  
                     u320 0B5C                       u241 0BAC                       u321 0B58  
                     u330 0B7A                       u250 0944                       u331 0B76  
                     u251 0940                       u340 0B0E                       u260 0962  
                     u341 0B0A                       u261 095E                       u270 097E  
                     _PR2 000FBB                       u271 097A                       u280 0A22  
                     u417 0C2C                       u281 0A1E                       u290 0A40  
                     u507 09D8                       u427 0C3E                       u291 0A3C  
                     u517 09E6                       u437 0A84                       u527 09F0  
                     u447 0A94                       u537 0CBC                       u457 0BCC  
                     u467 0C00                       u477 09AA                       u487 09B8  
                     u497 09C2               LEER_LCD@aux 0003                       wreg 000FE8  
            ?_CURSOR_HOME 0001            ??_ENVIA_NIBBLE 0003            ENVIA_CHAR@dato 0004  
                    l1221 09A2                      l1301 0A78                      l1231 09B4  
                    l1223 09A4                      l1311 0AA6                      l1303 0A7E  
                    l1241 09CA                      l1233 09B6                      l1225 09A6  
                    l1313 0AAC                      l1305 0A8C                      l1321 0C26  
                    l1401 0B16                      l1251 09F6                      l1243 09D6  
                    l1235 09BE                      l1227 09A8                      l1219 099E  
                    l1331 0BFA                      l1315 0AB2                      l1307 0A9A  
                    l1323 0C34                      l1411 0B22                      l1403 0B1A  
                    l1261 0CBA                      l1245 09DE                      l1237 09C0  
                    l1229 09B0                      l1341 0C0C                      l1333 0BFE  
                    l1317 0AB8                      l1309 0AA0                      l1325 0C38  
                    l1421 0B3A                      l1413 0B24                      l1405 0B1C  
                    l1263 0CC2                      l1247 09E2                      l1255 09FC  
                    l1239 09C8                      l1343 0C12                      l1335 0C06  
                    l1327 0BF4                      l1351 0B90                      l1271 0BCA  
                    l1319 0ABE                      l1423 0B3E                      l1415 0B2E  
                    l1407 0B1E                      l1431 0818                      l1257 0CAC  
                    l1249 09EC                      l1345 0C18                      l1337 0C08  
                    l1329 0BF6                      l1353 0B94                      l1281 0BDE  
                    l1273 0BD2                      l1265 0BC0                      l1441 0B5C  
                    l1425 0B42                      l1417 0B32                      l1409 0B20  
                    l1361 0932                      l1433 0C86                      l1259 0CB8  
                    l1347 0C1E                      l1339 0C0A                      l1355 0BB0  
                    l1451 0AD6                      l1283 0BE4                      l1275 0BD4  
                    l1267 0BC2                      l1443 0B68                      l1291 0C68  
                    l1427 0B44                      l1419 0B36                      l1371 0968  
                    l1363 0944                      l1435 0C96                      l1349 0B84  
                    l1453 0ADE                      l1285 0BEA                      l1277 0BD6  
                    l1269 0BC6                      l1445 0B7A                      l1293 0C6E  
                    l1429 0B46                      l1373 097E                      l1365 094C  
                    l1381 0A10                      l1461 08B0                      l1455 0AFA  
                    l1447 0AC6                      l1279 0BD8                      l1439 0B4C  
                    l1287 0CE0                      l1295 0C7E                      l1375 0986  
                    l1367 0954                      l1359 092A                      l1391 0A56  
                    l1383 0A22                      l1471 0906                      l1463 08BC  
                    l1457 0AFC                      l1449 0AD6                      l1297 0CE8  
                    l1289 0C58                      l1377 0988                      l1369 0962  
                    l1393 0A5E                      l1385 0A2A                      l1473 090E  
                    l1465 08DC                      l1299 0A74                      l1379 098E  
                    l1395 0A64                      l1387 0A32                      l1475 0916  
                    l1467 08E8                      l1459 08A2                      l1397 0B10  
                    l1389 0A40                      l1477 091C                      l1469 08FE  
                    l1399 0B14                      STR_1 0801                      STR_2 0810  
                    _LATD 000F8C                      i2l80 00B6                      _main 08A2  
                    btemp 001A                      start 00BA             ?_CURSOR_ONOFF 0001  
       ??_tomamuestra_ADC 0005              ___param_bank 000000           ??_ENVIA_LCD_CMD 0004  
        __end_of_LCD_INIT 0C56          __end_of_LEER_LCD 0A10          __end_of_INT0_ISR 00BA  
                   ?_main 0001                     _T2CON 000FBA           __end_of___lwdiv 099E  
         __end_of___lwmod 0A74                     _PORTD 000F83                     _TRISD 000F95  
                   _nivel 0019               ?_POS_CURSOR 0006                     tablat 000FF5  
                   ttemp5 001B                     ttemp6 001E                     ttemp7 0022  
                   status 000FD8                     wtemp8 001B            ??_CURSOR_ONOFF 0006  
         __initialization 0CC6              __end_of_main 092A                    ??_main 0011  
           __activetblptr 000002                    _ADRESH 000FC4                    _ADRESL 000FC3  
                  _CCPR1L 000FBE                    _ANSELD 000F5E                    i2l1111 001C  
                  i2l1121 0058                    i2l1113 0028                    i2l1115 0034  
                  i2l1107 000A                    i2l1117 0040                    i2l1109 0010  
                  i2l1125 0064                    i2l1119 004C                    i2l1547 0078  
                  _OSCCON 000FD3                    _decena 0016      __end_of_ENVIA_NIBBLE 0CC6  
               ??___lwdiv 000C                 ??___lwmod 0007                    _millar 0018  
                  clear_0 0CCC                    isa$std 000001                    _unidad 0015  
                  _strlen 0B84              __mediumconst 0000                    tblptrh 000FF7  
                  tblptrl 000FF6                    tblptru 000FF8              ??_BORRAR_LCD 0006  
               ?_LCD_INIT 0001                 ?_LEER_LCD 0001                __accesstop 0060  
 __end_of__initialization 0CD2                 ?_INT0_ISR 0001              ??_LCD_CONFIG 0006  
           ___rparam_used 000001              ??_ENVIA_CHAR 0004            __pcstackCOMRAM 0001  
      __end_of_BORRAR_LCD 0CF0          _ESCRIBE_MENSAJE2 0AC6          ENVIA_LCD_CMD@aux 0005  
    __end_of_CURSOR_ONOFF 0C86        __end_of_LCD_CONFIG 0AC6        __end_of_ENVIA_CHAR 0C26  
         _tomamuestra_ADC 0C86                ??_LCD_INIT 0007                ??_LEER_LCD 0003  
        ENVIA_NIBBLE@dato 0003                ??_INT0_ISR 0001                   _CCP1CON 000FBD  
                 ?_strlen 0003              ??_POS_CURSOR 0007                   __Hparam 0000  
                 __Lparam 0000         __end_of_configuro 0B4A                   ___lwdiv 092A  
                 ___lwmod 0A10              __psmallconst 0800     __end_of_ENVIA_LCD_CMD 0BF2  
       __end_of_convierte 08A2                   __pcinit 0CC6        __end_of_POS_CURSOR 0B84  
                 __ramtop 0800                   _centena 0017                   __ptext0 08A2  
                 __ptext1 0C86                   __ptext2 0818                   __ptext3 0A10  
                 __ptext4 092A                   __ptext5 0B10                   __ptext6 0C26  
                 __ptext7 0A74                   __ptext8 0C56                   __ptext9 0CE0  
 __end_of_tomamuestra_ADC 0CAA              _ENVIA_NIBBLE 0CAA      end_of_initialization 0CD2  
           __Lmediumconst 0000                   postinc0 000FEE                   strlen@a 0005  
                 strlen@s 0003         ESCRIBE_MENSAJE2@i 000C                 _TRISAbits 000F92  
               _TRISBbits 000F93  __end_of_ESCRIBE_MENSAJE2 0B10              _CURSOR_ONOFF 0C56  
      CURSOR_ONOFF@estado 0006            __end_of_strlen 0BBE             ??_CURSOR_HOME 0006  
        ?_tomamuestra_ADC 0003       start_initialization 0CC6         ENVIA_LCD_CMD@dato 0004  
                ??_strlen 0005               __pbssCOMRAM 0013       __end_of_CURSOR_HOME 0CE8  
               _main$1197 0011          ___lwdiv@dividend 0008                 __pintcode 0008  
                ?___lwdiv 0008                  ?___lwmod 0003                 _configuro 0B10  
             __smallconst 0800                 _convierte 0818           convierte@numero 000F  
        ___lwdiv@quotient 000C                  _LCD_INIT 0C26                  _LEER_LCD 099E  
                _INT0_ISR 0008                  _LATDbits 000F8C            POS_CURSOR@fila 0007  
              ?_configuro 0001                _ADCON0bits 000FC2    ESCRIBE_MENSAJE2@cadena 0007  
              ?_convierte 000F                  _WPUBbits 000F85               _CURSOR_HOME 0CE0  
             _INTCON2bits 000FF1                  __Hrparam 0000         ?_ESCRIBE_MENSAJE2 0007  
                __Lrparam 0000        ??_ESCRIBE_MENSAJE2 0009                _ANSELAbits 000F5B  
              _ANSELBbits 000F5C           ___lwdiv@divisor 000A           ___lwdiv@counter 000E  
                __ptext10 0CE8                  __ptext11 0B4A                  __ptext12 0BBE  
                __ptext13 0AC6                  __ptext14 0B84                  __ptext15 0BF2  
                __ptext16 099E                  __ptext17 0CAA                _BORRAR_LCD 0CE8  
           _resultado_ADC 0013                _LCD_CONFIG 0A74                _ENVIA_CHAR 0BF2  
                isa$xinst 000000                  int$flags 001A             _ENVIA_LCD_CMD 0BBE  
             ??_configuro 0008               ??_convierte 0011                _INTCONbits 000FF2  
                intlevel2 0000          ___lwmod@dividend 0003            ?_ENVIA_LCD_CMD 0001  
         ___lwmod@divisor 0005           ___lwmod@counter 0007       ESCRIBE_MENSAJE2@tam 000B  
             ?_BORRAR_LCD 0001             ?_ENVIA_NIBBLE 0001                _POS_CURSOR 0B4A  
             ?_LCD_CONFIG 0001               ?_ENVIA_CHAR 0001         POS_CURSOR@columna 0006  
